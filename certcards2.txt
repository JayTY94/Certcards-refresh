





1
PP365
System-Assigned Managed Identity
A type of managed identity in Azure that is directly tied to an individual Azure resource, such as an Azure Function. The lifecycle of a system-assigned managed identity is bound to the resource; it is automatically created when enabled and deleted when the resource is removed.





2
PP365
Webhooks
HTTP callbacks triggered by specific events in applications like Dynamics 365. When an event occurs, the application sends an HTTP request to a predefined URL (e.g., an Azure Function), allowing external systems to respond in real-time without constant polling.





3
Taxes
An S Corporation is a type of corporation that meets specific Internal Revenue Code requirements. The main difference between an S Corp and a C Corp is how they are taxed. An S Corp is a pass-through entity, meaning that the corporation's income, deductions, and credits pass through to the shareholders, who report these on their personal tax returns.





4
Taxes
The main differences between an S Corp and a C Corp fall into three major categories: formation, taxation, and ownership. Generally, taxes are the biggest and most important difference. C Corps are subject to corporate tax rates, while S Corps allow for pass-through taxation, meaning owners report the business profits and losses on their personal income tax returns.





5
Taxes
U.S. persons, including citizens, residents, corporations, partnerships, limited liability companies, trusts, and estates, must file a Report of Foreign Bank and Financial Accounts (FBAR) if they meet the reporting threshold.





6
Taxes
Taxation: Pass-Through Entities (PTEs) themselves do not pay income taxes. Instead, the owners or shareholders pay taxes on their share of the income on their personal tax returns.
Benefits: Pass-Through Entities (PTEs) can offer tax benefits by avoiding double taxation, which occurs when income is taxed at both the corporate and individual levels.





7
Azure AI Foundry
Compute and quota allocation is managed as shared capacity for all projects in AI Foundry portal that share the same hub. This quota includes compute instance as managed cloud-based workstation for an individual. The same user can use a compute instance across projects.





8
Azure AI Foundry
When using Azure AI Foundry portal, you can directly work with Azure OpenAI without an Azure Studio project or you can use Azure OpenAI through a project.





9
Azure AI Foundry
Managed compute resources and managed virtual networks exist in the Microsoft subscription, but you manage them. For example, you control which VM sizes are used for compute resources, and which outbound rules are configured for the managed virtual network.





10
Azure AI Foundry
While most of the resources used by Azure AI Foundry live in your Azure subscription, some resources are in an Azure subscription managed by Microsoft. The cost for these managed resources shows on your Azure bill as a line item under the Azure Machine Learning resource provider.





11
Azure AI Foundry
To reduce the complexity of Azure RBAC management, AI Foundry provides a control plane proxy that allows you to perform operations on connected Azure AI services and Azure OpenAI resources. Performing operations on these resources through the control plane proxy only requires Azure RBAC permissions on the hub.





12
Azure AI Foundry
AI Foundry hub: The hub is the top-level resource in AI Foundry portal and is based on the Azure Machine Learning service. The Azure resource provider for a hub is Microsoft.MachineLearningServices/workspaces, and the kind of resource is Hub.





13
Azure AI Foundry
Azure AI Studio is now Azure AI Foundry portal. We're updating the documentation to reflect this change. In the meantime, you might see references to Azure AI Studio.





14
Azure AI Foundry
Azure OpenAI: Provides access to the latest Open AI models. You can create secure deployments, try playgrounds, fine tune models, content filters, and batch jobs. The Azure OpenAI resource provider is Microsoft.CognitiveServices/account and the kind of resource is OpenAI.





15
Search Engine Optimization
Link building is the practice of acquiring backlinks from other websites to improve a site's authority and search rankings. It is critical for enhancing a website’s SEO performance by increasing the number and quality of inbound links from reputable sources.





16
Search Engine Optimization
A backlink is an incoming hyperlink from one webpage to another website. Backlinks are crucial for SEO as they signal authority and trustworthiness to search engines, thereby improving a website’s search engine rankings and visibility.





17
Search Engine Optimization
Ahrefs is a comprehensive SEO toolset used for backlink analysis, keyword research, competitor analysis, and site audits. It helps users identify backlink opportunities, monitor website performance, and gain insights into competitors' strategies to enhance their own SEO efforts.





18
Search Engine Optimization
Duplicate content refers to identical or very similar content appearing on multiple webpages or across different websites. It can negatively impact SEO by causing confusion for search engines about which page to rank, potentially diluting search rankings.





19
Search Engine Optimization
Link Explorer by Moz is a tool for analyzing a website’s backlink profile and domain authority. It helps users identify linking opportunities, monitor backlink quality, and understand the overall strength of their site’s SEO through detailed backlink data.





20
Search Engine Optimization
Link equity refers to the value or authority passed from one page to another through hyperlinks. It influences the ranking potential of linked pages, helping them to perform better in search engine results by distributing authority throughout the website.





21
Search Engine Optimization
A website crawler is a tool that systematically browses the web to index and analyze website content. It identifies SEO issues, broken links, and content structure, providing valuable insights for optimization and ensuring that websites are efficiently indexed by search engines.





22
Search Engine Optimization
Google PageSpeed Insights analyzes the content of a web page and provides suggestions to make it faster. It evaluates both desktop and mobile performance, offering recommendations to improve load times and overall website performance for better user experience.





23
Search Engine Optimization
Keyword density is the percentage of times a keyword appears on a webpage compared to the total number of words. It is used to optimize content for relevant keywords without overstuffing, ensuring that the content remains natural and readable while signaling relevance to search engines.





24
Search Engine Optimization
Domain Authority (DA), developed by Moz, is a metric that predicts how well a website will rank on search engine result pages (SERPs). It is based on various factors, including the quality and quantity of backlinks, and helps gauge a site’s overall SEO strength.





25
Search Engine Optimization
An XML sitemap is a file that lists all the important pages of a website, helping search engines crawl the site more effectively. It improves the discoverability of webpages, ensures all content is indexed, and can include additional metadata about each URL.





26
Vocab
Palimpsest
noun
SPA: PAL-imps-est
IPA: /ˈpælɪmpsɛst/

A manuscript or document that has been written on, scraped off, and reused, often revealing traces of previous writings beneath the surface.
Example: Archaeologists discovered an ancient palimpsest where earlier texts were still legible under the more recent writing.





27
Vocab
Hieratic
adjective
SPA: hi-uh-RAT-ik
IPA: /ˌhaɪəˈrætɪk/

Relating to the simplified, cursive form of Egyptian hieroglyphs, used by priests in ancient Egypt for religious texts.
Example: The hieratic script was employed for everyday purposes in ancient Egypt, in contrast to the more elaborate hieroglyphic script.





28
Vocab
Lacunary
adjective
SPA: LACK-yoo-nary
IPA: /ˈlækjʊnəri/

Characterized by gaps or missing portions, particularly in texts or manuscripts.
Example: The ancient manuscript was lacunary, with several sections of the text lost to time.





29
Vocab
Scriptorium
noun
SPA: skrip-TOR-ee-um
IPA: /skrɪpˈtɔːrɪəm/

A room or place in medieval monasteries where manuscripts were copied, typically by hand.
Example: The scriptorium was the heart of manuscript production during the Middle Ages, where scribes worked diligently.





30
Vocab
Paleography
noun
SPA: pay-lee-AW-gruh-fee
IPA: /ˌpæliˈɒɡrəfi/

The study of ancient or historical handwriting, particularly as it pertains to deciphering, reading, and dating manuscripts.
Example: The paleography of medieval texts helps historians understand the evolution of written language.





31
Vocab
Logogram
noun
SPA: LOG-oh-gram
IPA: /ˈləʊɡəʊɡræm/

A written character or symbol that represents a word or morpheme, rather than a sound, commonly found in languages like Chinese.
Example: Chinese characters are logograms, each representing a concept or word rather than a phonetic sound.





32
Vocab
Grapheme
noun
SPA: GRAP-heem
IPA: /ˈɡræfiːm/

The smallest unit of written language that carries meaning, such as a letter, a numeral, or a punctuation mark.
Example: The letter "a" in the alphabet is a grapheme that represents a specific phoneme in many languages.





33
Vocab
Boustrophedonic
adjective
SPA: boo-struh-fee-DON-ik
IPA: /ˌbʊsˌtrɒfəˈdɒnɪk/

Of or relating to a style of writing in which the direction alternates from left to right on one line and right to left on the next, continuing in this manner throughout the text.
Example: The ancient script was written in a boustrophedonic manner, making it challenging to read for modern scholars.





34
Vocab
Anacoluthon
noun
SPA: an-uh-koh-LOO-thon
IPA: /ˌænəkəˈluːθɒn/

A grammatical construction in which a sentence begins in one way but ends in another, often disrupting the expected syntax or logical sequence.
Example: His speech was full of anacoluthons, making it difficult to follow his intended argument.





35
Vocab
Ecriture
noun
SPA: ay-KREE-toor
IPA: /ˈɛkrɪtʊr/

A French term for writing or script, often used in literary theory to describe the act or art of writing itself.
Example: The novel's use of écriture gives a distinct rhythm and depth to the narrative.





36
Vocab
Intercalation
noun
SPA: in-ter-kay-LAY-shun
IPA: /ˌɪntəkəˈleɪʃən/

The insertion of an additional element, such as a day or month, into a calendar or text to maintain alignment or consistency.
Example: The intercalation of a leap day every four years ensures that the calendar stays synchronized with Earth's orbit.





37
Azure Kubernetes Learning Path
Docker provides us with the docker stats command. This command returns information for the container such as percentage CPU usage, percentage memory usage, I/O written to disk, network data sent and received, and process IDs assigned. This information is useful as an immediate data stream; however, no aggregation is done, because the data isn't stored. We'd have to install third-party software for meaningful data capture over a period of time.





38
Azure Kubernetes Learning Path
1. A container is launched using the --publish 8080:80 flag. Which of the following options is the most likely network configuration used for the container? 
The Bridge network configuration is an internal, private network used by the container and isolates the container network from the Docker host network. We use the publish flag to map ports between the container and host ports.





39
Azure Kubernetes Learning Path
Docker images are large files that are initially stored on your PC, and we need tools to manage these files.

The Docker CLI and Docker Desktop allow us to manage images by building, listing, removing, and running them. We manage Docker images by using the docker client. The client doesn't execute the commands directly, and sends all queries to the dockerd daemon.





40
Azure Kubernetes Learning Path
Docker login will prompt you for a username and password. To find this information, go to the Azure portal and look up the access keys for the registry or run the following command.

Azure CLI
az acr credential show --name myregistry --resource-group mygroup





41
Azure Kubernetes Learning Path
The following example creates an alias for the reservationsystem image.

Bash
docker tag reservationsystem myregistry.azurecr.io/reservationsystem:v2

If you run docker image ls, you'll see two entries for the image: one with the original name and the second with the new alias.





42
Azure Kubernetes Learning Path
You push an image from your local computer to a Docker registry by using the docker push command. Before you push an image, you must create an alias for the image that specifies the repository and tag that the Docker registry creates. The repository name must be of the form *<login_server>/<image_name>:<tag/>. Use the docker tag command to perform this operation.





43
Azure Kubernetes Learning Path
Azure Container Registry is a registry-hosting service provided by Azure. Each Azure Container Registry resource you create is a separate registry with a unique URL. These registries are private, meaning they require authentication to push or pull images





44
Azure Kubernetes Learning Path
To pause a running container, use the pause command. This command suspends all processes in the container.

To stop a running container, use the stop command. The stop command enables the working process to shut down gracefully by sending it a termination signal. The container's kernel terminates after the process shuts down.





45
Azure Kubernetes Learning Path
A volume is stored on the host filesystem at a specific folder location. Choose a folder where you know the data won't be modified by non-Docker processes.

Docker creates and manages the new volume by running the docker volume create command. This command can form part of our Dockerfile definition, which means that you can create volumes as part of the container-creation process. Docker creates the volume if it doesn't exist when you try to mount the volume into a container the first time.





46
Azure Kubernetes Learning Path
Azure Container Instance is a service that loads and runs Docker images on demand. The Azure Container Instance service can retrieve an image from a registry, such as Docker Hub or Azure Container Registry.





47
Azure Kubernetes Learning Path
Azure Container Registry repositories are private, meaning they don't support unauthenticated access. To pull images from an Azure Container Registry repository, use the docker login command and specify the URL of the login server for the registry.

docker login myregistry.azurecr.io





48
Azure Kubernetes Learning Path
Command in DockerFile
RUN	Executes a command in the container. Arguments to the RUN command are command-line commands.





49
Azure Kubernetes Learning Path
The host network enables you to run the container on the host network directly. This configuration effectively removes the isolation between the host and the container at a network level.

Keep in mind that the container can use only ports the host isn't already using.





50
Azure Kubernetes Learning Path
Dockerfile Example:
FROM mcr.microsoft.com/dotnet/sdk:6.0
WORKDIR /app
COPY myapp_code .
RUN dotnet build -c Release -o /rel
EXPOSE 80
WORKDIR /rel
ENTRYPOINT ["dotnet", "myapp.dll"]





51
Email Auth and Security
p=reject

A DMARC policy action.
Instructs receiving mail servers to reject unauthenticated emails outright.
Provides the strictest protection against fraudulent emails.





52
Email Auth and Security
p=none

A DMARC policy action.
Requests no specific action be taken on unauthenticated emails.
Used for monitoring and gathering data without affecting email delivery.





53
Email Auth and Security
DMARC (Domain-based Message Authentication, Reporting & Conformance)

Builds on SPF and DKIM to provide domain owners with policies for handling unauthenticated emails.
Enables reporting on email authentication status and issues.
Protects against unauthorized use of a domain in email communications.





54
Email Auth and Security
p=quarantine

A DMARC policy action.
Instructs receiving mail servers to treat unauthenticated emails with suspicion.
Typically places such emails in the spam or junk folder.





55
Email Auth and Security
PGP (Pretty Good Privacy)

A data encryption and decryption program that provides cryptographic privacy and authentication.
Used for securing emails through encryption and digital signatures.
Combines symmetric and asymmetric encryption for robust security.





56
Email Auth and Security
BIMI (Brand Indicators for Message Identification)

Allows organizations to display their brand logos alongside authenticated emails in recipients' inboxes.
Enhances brand recognition and trust.
Requires proper implementation of SPF, DKIM, and DMARC.





57
Email Auth and Security
Feedback Loops (FBL)

Mechanisms by which email service providers notify senders about spam complaints from recipients.
Allow senders to monitor and address spam-related issues, improving sender reputation and email deliverability.
Implemented through services like Return Path and Feedback Loop (FBL) agreements with ISPs.





58
Email Auth and Security
MX Toolbox

An online suite of tools for diagnosing and analyzing DNS records.
Checks SPF, DKIM, and DMARC configurations.
Helps administrators verify the correctness of their email authentication setups.





59
Email Auth and Security
Identifier Alignment

Ensuring that the domains used in SPF and DKIM authentication align with the domain in the email's "From" header.
Critical for DMARC to function correctly.
Can be achieved through relaxed alignment (subdomains are allowed) or strict alignment (exact match required).





60
Email Auth and Security
MUA (Mail User Agent)

An email client used by end-users to send, receive, and manage their emails.
Provides the interface for users to interact with their email accounts.
Examples include Microsoft Outlook, Mozilla Thunderbird, and Gmail.





61
Email Auth and Security
Email Authentication Alignment

Ensuring that SPF and DKIM align with the domain specified in the email's "From" header.
Critical for DMARC to function correctly.
Provides consistent authentication results and improves email deliverability.





62
Email Auth and Security
SPF (Sender Policy Framework)

A DNS-based email authentication method.
Specifies which mail servers are authorized to send emails on behalf of a domain.
Helps prevent email spoofing by verifying the sender's IP address against the domain's SPF record.





63
Email Auth and Security
SMTP (Simple Mail Transfer Protocol)

The standard protocol used for sending emails across the internet.
Facilitates the transmission of email messages from senders to recipients via mail servers.
Includes commands like HELO/EHLO, MAIL FROM, RCPT TO, DATA, and QUIT.





64
Email Auth and Security
Aggregate Reports

Summary reports sent periodically (usually daily) to domain owners detailing email authentication results.
Provide insights into SPF and DKIM alignment and the overall effectiveness of DMARC policies.
Typically formatted in XML, containing data on email sources, authentication outcomes, and policy actions.





65
OData
IsSideEffecting Annotation (Org.OData.Core.V1.IsSideEffecting)

Definition: An OData annotation that indicates an operation (action or function) may cause data changes on the server.
Context: Useful for clients to understand that the request cannot be treated as purely read-only or cached safely.





66
OData
Annotations provide additional metadata about entities, properties, or relationships in the OData model. They enrich the data with information like display names, validation rules, and formatting instructions, enhancing both data semantics and client-side interactions.





67
OData
Type Casting converts an entity from one type to another within inheritance hierarchies. In OData, it is facilitated by the @odata.type annotation, which specifies the target type for the cast, ensuring accurate data interpretation and processing.





68
OData
Namespaces

Definition: Unique identifiers (like MyCompany.CRM) that group related schemas and prevent naming conflicts in OData models.
Context: Used to differentiate entities, actions, and functions that may share common names but serve different domains or versions.





69
OData
Metadata in OData describes the structure, data types, relationships, and other aspects of the data model. The $metadata endpoint provides the service’s data model and schema definitions using CSDL, essential for understanding available entities and their relationships.





70
OData
Fully qualified action and function names include a namespace or alias prefix. The Edm, odata and geo namespaces are reserved for the use of this specification.





71
OData
An ETag is a mechanism for concurrency control in OData, representing a version identifier for a resource. It ensures that updates or deletions are performed on the correct version of a record, preventing conflicts and maintaining data integrity.





72
OData
Batch Requests
- Definition: OData feature allowing multiple operations (queries/updates) to be combined into a single HTTP request.
- Context: Improves efficiency and reduces network overhead.





73
OData
The set of annotations defined within a schema comprise a vocabulary. Shared vocabularies provide a powerful extensibility point for OData.

Metadata annotations can be used to define additional characteristics or capabilities of a metadata element, such as a service, entity type, property, function, action or parameter.





74
OData
Functions MUST NOT have side-effects. Functions can be invoked from a URL that addresses a resource or within an expression to a $filter or $orderby system query option.





75
OData
OData-defined system query options are optionally prefixed with "$". Services may support additional custom query options not defined in the OData specification, but they MUST NOT begin with the "$" or "@" character and MUST NOT conflict with any OData-defined system query options defined in the OData version supported by the service.





76
OData
Actions and Functions extend the set of operations that can be performed on or with a service or resource. Actions can have side-effects. For example, Actions can be used to modify data or to invoke custom operations.





77
OData
OData services SHOULD NOT require any query options to be specified in a request. Services SHOULD fail any request that contains query options that they do not understand and MUST fail any request that contains unsupported OData query options defined in the version of this specification supported by the service.





78
OData
Instance annotations can be used to define additional information associated with a particular result, entity, property, or error; for example whether a property is read-only for a particular instance.





79
Azure AI Search
Depending on the data source, the indexer will try different operations to extract potentially indexable content:

When the document is a file with embedded images, such as a PDF, the indexer extracts text, images, and metadata. Indexers can open files from Azure Blob Storage, Azure Data Lake Storage Gen2, and SharePoint.





80
Azure AI Search
After the first indexer run, you can rerun it on demand or set up a schedule.

You can monitor indexer status in the Azure portal or through Get Indexer Status API. You should also run queries on the index to verify the result is what you expected.





81
Azure AI Search
If you include a skillset, you'll need to specify output field mappings in the indexer definition. The output of a skillset is manifested internally as a tree structure referred to as an enriched document. Output field mappings allow you to select which parts of this tree to map into fields in your index.





82
Azure AI Search
A search service runs one indexer job per search unit. If you need concurrent processing, make sure you have sufficient replicas. Indexers don't run in the background, so you might detect more query throttling than usual if the service is under pressure.





83
Azure AI Search
Indexers don't have dedicated processing resources. Based on this, indexers' status may show as idle before running (depending on other jobs in the queue) and run times may not be predictable. Other factors define indexer performance as well, such as document size, document complexity, image analysis, among others.





84
Azure AI Search
Indexers accept flattened row sets, such as a table or view, or items in a container or folder. In most cases, it creates one search document per row, record, or item.





85
Azure AI Search
If AI enrichment or integrated vectorization are solution requirements, you must use the pull model (indexers) to load an index. Skillsets are attached to indexers and don't run independently.





86
Azure AI Search
Integrated vectorization is an extension of the indexing and query pipelines in Azure AI Search. It adds the following capabilities:

Data chunking during indexing
Text-to-vector conversion during indexing
Text-to-vector conversion during queries





87
Azure AI Search
Push model is an approach that uses APIs to upload documents into an existing search index. You can upload documents in batches of up to 1000 per batch, or 16 MB per batch, whichever limit comes first.





88
Azure AI Search
Whether you use the REST API or an Azure SDK, the following document operations are supported for data import:
    Upload (think upsert)
    merge
    mergeOrUpload
    delete





89
Azure AI Search
You can run indexers on demand or on a recurring data refresh schedule that runs as often as every five minutes. More frequent updates preclude the use of indexers, requiring that you implement a 'push model' that simultaneously pushes data to both Azure AI Search and your external data source.





90
Azure AI Search
Indexers drive skillset execution and AI enrichment, where you can configure skills to integrate extra processing of content en route to an index. A few examples are OCR over image files, text split skill for data chunking, and calling embedding models to generate vectors for vector search.





91
Azure AI Search
A quick way to perform a preliminary check on the document upload is to use Search explorer in the Azure portal.
The explorer lets you query an index without having to write any code. The search experience is based on default settings, such as the simple syntax and default searchMode query parameter. Results are returned in JSON so that you can inspect the entire document.





92
Azure AI Search
You can have multiple indexers writing into the same index, and you can reuse the same data source for multiple indexers. However, an indexer can only consume one data source at a time, and can only write to a single index.





93
Azure Functions + Visual Studio
ASP.NET Web Forms is an older way to build web applications, focusing on drag-and-drop components and less code, while ASP.NET MVC offers greater flexibility, control, and a more maintainable approach to building web applications.





94
Azure Functions + Visual Studio
ASP.NET provides comprehensive authentication and authorization mechanisms, such as ASP.NET Identity, for managing users and roles. It supports external authentication providers like Google and Facebook, allowing you to integrate them into your application seamlessly.





95
Azure Functions + Visual Studio
ASP.NET supports asynchronous programming with async and await keywords, allowing non-blocking operations such as file and database access. This improves scalability and performance by freeing up threads during long-running tasks.





96
Azure Functions + Visual Studio
ASP.NET Razor syntax is a streamlined way to integrate C# code into HTML pages. Razor allows developers to write dynamic web pages by combining HTML and server-side logic seamlessly.





97
Azure Functions + Visual Studio
ASP.NET uses a flexible routing system to map URLs to controllers and actions in ASP.NET MVC or ASP.NET Web API applications. This routing system supports custom URL patterns and simplifies URL management.





98
Azure Functions + Visual Studio
An Azure Function is implemented as a static class (.NET). The class provides a static, asynchronous method named Run, which acts as the entry point for the class. The parameters passed to the Run method provide the context for the trigger. If it's an HTTP trigger, the function receives an HttpRequest object.





99
Azure Functions + Visual Studio
In all cases, a function is passed an ILogger parameter. The function can use this parameter to write log messages, which the function app writes to storage for later analysis.





100
Azure Functions + Visual Studio
ASP.NET supports caching to improve performance by reducing database calls and loading times. You can cache data at different levels, such as in-memory caching, distributed caching, or output caching, to increase the responsiveness of your application.





101
Azure Functions + Visual Studio
ASP.NET offers several state management techniques, including Session State, View State, and Cookies, to retain data across user requests and provide a better user experience on dynamic websites.





102
Azure Functions + Visual Studio
The ASP.NET MVC architecture is based on the Model-View-Controller pattern, which separates the application into three components: Models (data), Views (UI), and Controllers (logic), providing a clean separation of concerns for better maintainability.





103
Azure Functions + Visual Studio
ASP.NET includes a variety of built-in security features such as request validation, input sanitization, SQL injection prevention, and protection against cross-site scripting (XSS) and cross-site request forgery (CSRF). HTTPS and encryption are also supported for secure communication.





104
Azure Functions + Visual Studio
ASP.NET Web API is a framework for building HTTP-based services that can be consumed by various clients, including browsers, mobile devices, and other web applications. It’s ideal for creating RESTful services in ASP.NET.





105
Azure Functions + Visual Studio
ASP.NET Core provides built-in Dependency Injection (DI) support, enabling you to manage dependencies in your application. This makes your code more modular, testable, and easier to maintain.





106
Azure Functions + Visual Studio
ASP.NET is a powerful framework for building dynamic web applications and services. It runs on the .NET platform, allowing developers to use multiple languages like C#, F#, and VB.NET to create modern web applications.





107
Azure Functions
Durable Functions allows you to define stateful workflows using an orchestration function. An orchestration function provides these extra benefits:
You can define the workflows in code. You don't need to write a JSON description or use a workflow design tool.
Functions can be called both synchronously and asynchronously. Output from the called functions is saved locally in variables and used in subsequent function calls.





108
Azure Functions
Use Case for User-assigned managed identity:
Workloads where resources are recycled frequently, but permissions should stay consistent.
For example, a workload where multiple virtual machines need to access the same resource.





109
Azure Functions
You can use three durable function types: Client, Orchestrator, and Activity.
Client functions are the entry point for creating an instance of a Durable Functions orchestration. They can run in response to an event from many sources, such as a new HTTP request arriving, a message being posted to a message queue, an event arriving in an event stream. You can write them in any of the supported languages.





110
Azure Functions
You can use three durable function types: Client, Orchestrator, and Activity.





111
Azure Functions
When you enable a user-assigned managed identity:

A service principal of a special type is created in Microsoft Entra ID for the identity. The service principal is managed separately from the resources that use it.





112
Azure Functions
What is the name of the file that contains function configuration data? 
The configuration is named function.json, which contains JSON configuration data such as binding declarations.





113
Azure Functions
Reasons to choose WebJobs over Azure Functions

You have specific customizations that you want to make to the JobHost that aren't supported by Azure Functions.
You want to control your app's retry policies.
WebJobs only supports C# on Microsoft Windows.





114
Azure Functions
When you enable a system-assigned managed identity:

A service principal of a special type is created in Microsoft Entra ID for the identity. The service principal is tied to the lifecycle of that Azure resource. When the Azure resource is deleted, Azure automatically deletes the service principal for you.





115
Azure Functions
Here are some of the benefits of using managed identities:

You don't need to manage credentials. Credentials aren’t even accessible to you.
You can use managed identities to authenticate to any resource that supports Microsoft Entra authentication, including your own applications.
Managed identities can be used at no extra cost.





116
Azure Functions
Fan out/fan in: This pattern runs multiple functions in parallel and waits for all the functions to finish. You can aggregate the results of the parallel executions or use them to compute a final result.





117
Azure Functions
Managed identities for Azure resources is the new name for the service formerly known as Managed Service Identity (MSI).





118
Azure Functions
There are two types of managed identities:

System-assigned. Some Azure resources, such as virtual machines allow you to enable a managed identity directly on the resource.
User-assigned. You may also create a managed identity as a standalone Azure resource. You can create a user-assigned managed identity and assign it to one or more Azure Resources.





119
Azure Functions
2. Which of the following best describes the role of the Orchestrator function in a workflow? 
The Orchestrator Function is written in code. The function is used for describing how actions are executed and the order in which actions are executed.





120
Azure Functions
2. Suppose your Azure Function has a blob trigger associated with it and you want it to execute only when png images are uploaded. Which of the following blob trigger Path values should you use? 

samples-workitems/{name}.png
The Path tells the blob trigger where it should monitor for changes, and if there are any filters applied. Adding a file extension to the Path specifies that uploaded files must have that file extension in order for the trigger to invoke the function.





121
Azure Functions
The name of the system-assigned service principal is always the same as the name of the Azure resource it's created for. For a deployment slot, the name of its system-assigned identity is <app-name>/slots/<slot-name>.





122
Azure Functions
Activity functions are the basic units of work in a Durable Functions orchestration. An activity function contains the actual work performed by the tasks being orchestrated.





123
Audit Report Tracker (Sharepoint List)
Column (SharePoint Column)
Definition: A field in a SharePoint list that holds a specific type of data (e.g., text, number, date, choice).
Context: Columns define the structure of the data within a SharePoint list or library.





124
Audit Report Tracker (Sharepoint List)
Content Type
Definition: A feature in SharePoint that defines a set of metadata (columns) and behaviors that apply to a certain type of content (e.g., a document, list item).
Context: Helps structure how data is stored and interacted with in SharePoint.





125
Audit Report Tracker (Sharepoint List)
Item (SharePoint List Item)
Definition: A single entry in a SharePoint list, containing values for each of the list’s columns.
Context: Each item typically represents a single entity, such as a task or document.





126
Audit Report Tracker (Sharepoint List)
Graph Explorer
Definition: A tool provided by Microsoft that allows developers to test and experiment with Microsoft Graph API queries directly in the browser.
Context: It helps you quickly interact with Microsoft Graph APIs to retrieve or manipulate SharePoint data without writing full applications.





127
Audit Report Tracker (Sharepoint List)
Power Automate (Flow) Owner
Definition: A user who has full control over a Flow, including the ability to edit, run, and manage its settings.
Context: Necessary to inspect and modify automation workflows in Power Automate that are tied to SharePoint lists.





128
Audit Report Tracker (Sharepoint List)
List Views Endpoint (for getting views in a SharePoint list):

Endpoint: GET https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/views
Description: Retrieves the views available in a specified SharePoint list.





129
Audit Report Tracker (Sharepoint List)
Site Collection Administrator
Definition: A user with full control over a SharePoint site collection, including managing permissions, lists, libraries, and settings.
Context: Required to access and modify the structure, permissions, and content of a SharePoint site and its associated lists.





130
Audit Report Tracker (Sharepoint List)
Create List Item (for creating a new item in a SharePoint list):

Endpoint: POST https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/items
Description: Adds a new item to a specified SharePoint list.





131
Audit Report Tracker (Sharepoint List)
Permissions (SharePoint Permissions)
Definition: Settings that control what users can and cannot do in SharePoint (e.g., View, Edit, Delete).
Context: Permissions can be set at various levels such as the site, list, or item level.





132
Audit Report Tracker (Sharepoint List)
List Administrator
Definition: A user with permissions to manage a specific SharePoint list, including adding columns, modifying views, and setting list-specific permissions.
Context: Has permissions to edit and configure a specific list within a site.





133
Audit Report Tracker (Sharepoint List)
List Columns Endpoint (for getting column information in a SharePoint list):

Endpoint: GET https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/columns
Description: Retrieves information about the columns in a specified list.





134
Audit Report Tracker (Sharepoint List)
List Items Endpoint (for retrieving items in a SharePoint list):

Endpoint: GET https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/items
Description: Retrieves items from a specified SharePoint list.





135
Audit Report Tracker (Sharepoint List)
Create Column in List (for creating new columns in a SharePoint list):

Endpoint: POST https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/columns
Description: Creates a new column in the specified SharePoint list.





136
Audit Report Tracker (Sharepoint List)
Content Type (SharePoint)
Definition: A reusable set of columns (fields) and settings in SharePoint that define a specific kind of content (e.g., document, task).
Context: A list can have multiple content types, each with different columns and settings depending on the type of data being tracked.





137
Audit Report Tracker (Sharepoint List)
View (SharePoint View)
Definition: A pre-defined display of list data, which can filter, sort, and group information in a specific way.
Context: Views can be customized to show only specific columns, items, or data based on user needs.





138
Audit Report Tracker (Sharepoint List)
Permissions Endpoint (for managing list permissions in SharePoint):

Endpoint: GET https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/permissions
Description: Retrieves the permissions set for a specific SharePoint list.





139
DNS
Conditional Forwarders vs. DNS Policies
Conditional Forwarders direct specific domain queries to designated DNS servers, while DNS Policies allow for more granular control based on various criteria like client IP ranges. Both enhance DNS management but serve different operational needs.





140
DNS
SRV (Service) Records
DNS records that specify the location (hostname and port) of servers for particular services within a domain. Essential for services like SIP (VoIP) or LDAP, they enable clients to discover service endpoints automatically.





141
DNS
Remove-DnsServerZone (PowerShell Cmdlet)
A PowerShell command used to delete an existing DNS zone from a Windows DNS Server. It allows administrators to remove obsolete or unnecessary zones efficiently through scripts or command-line operations.





142
DNS
Forward Lookup Zones
DNS zones that translate hostnames to IP addresses. They are the most common type of DNS zones, enabling clients to resolve domain names to their corresponding IPv4 or IPv6 addresses.





143
DNS
Refresh Interval
The period following the No-Refresh Interval during which the timestamp on a DNS record can be updated. If a record is refreshed within this interval, it remains active; otherwise, it becomes eligible for scavenging.





144
DNS
Active Directory-Integrated Zones
DNS zones that store their data within the Active Directory database. This integration allows for secure dynamic updates and automatic replication of DNS data across all domain controllers, enhancing security and redundancy.





145
DNS
DNS Scavenging
An automated process in Windows DNS that removes stale or outdated DNS records. It helps maintain DNS integrity by deleting records no longer valid, such as those from devices removed from the network or with changed IP addresses.





146
DNS
DNS Zone Types
Different types of DNS zones include Primary, Secondary, Stub, and Active Directory-Integrated zones. Each type serves distinct roles in DNS management, such as data storage, redundancy, delegation, and integration with directory services.





147
DNS
Conditional Forwarding
A DNS configuration that directs queries for specific domain names to designated DNS servers instead of using default forwarders. It's useful for managing inter-office DNS resolution or directing queries for partner domains to their respective DNS servers.





148
DNS
Securing Zone Transfers
Measures taken to protect DNS zone data during transfers between DNS servers. This includes restricting transfers to authorized IP addresses and using security protocols like TSIG or IPsec to authenticate and encrypt the data, ensuring integrity and confidentiality.





149
DNS
Zone Transfers
The process of copying DNS zone data from a primary DNS server to secondary DNS servers. Zone transfers ensure DNS data consistency and redundancy across multiple DNS servers, enhancing reliability and load distribution.





150
DNS
DNS Manager
A graphical administrative tool in Windows Server used to manage DNS settings and zones. DNS Manager provides interfaces for creating and modifying DNS records, configuring zone properties, setting up forwarders, and implementing security measures.





151
DNS
Root Hints
A list of authoritative DNS servers for the root zone. Root hints are used by DNS servers to initiate recursive queries when resolving domain names, especially when no forwarders are configured.





152
DNS
No-Refresh Interval
In DNS scavenging, the period during which the timestamp on a DNS record cannot be updated. It prevents excessive DNS updates, helping determine when a record becomes stale and eligible for removal during scavenging.





153
DNS
DNS Policies
A feature in Windows DNS Server that allows administrators to define rules for how DNS queries are handled. Policies can filter queries or provide different responses based on criteria like client IP addresses, enabling scenarios like split-brain DNS.





154
DNS
TSIG (Transaction SIGnature)
A security mechanism used to authenticate DNS messages, ensuring that zone transfers and other DNS communications are from trusted sources. TSIG uses shared secret keys and cryptographic signatures to verify the authenticity of DNS transactions.





155
DNS
Stub Zone
A DNS zone that contains only essential information about another zone's authoritative DNS servers. It facilitates efficient DNS resolution by allowing a DNS server to know where to forward queries for that specific zone without storing all DNS records.





156
SharePoint
The Content-Type header specifies the media type of the resource being sent to the server. When uploading a file, setting the correct Content-Type ensures that SharePoint correctly interprets the file type. For example, for a Word document, you might use application/vnd.openxmlformats-officedocument.wordprocessingml.document.





157
SharePoint
The SharePoint REST API can return data in both JSON and XML formats. By default, it often returns JSON, but you can specify the desired format using the Accept header.





158
SharePoint
Authentication and Authorization
OAuth is commonly used. When building client applications, you'll typically register your app in Azure Active Directory to obtain the necessary credentials and permissions to interact with SharePoint.





159
SharePoint
When checking if a file exists, which HTTP status code indicates that the file was found?

<resposne code> 200 OK

Explanation:
A 200 OK status code indicates that the request was successful and the file exists. If the file does not exist, SharePoint typically returns a 404 Not Found status code.





160
SharePoint
Whenever possible, the URI for these REST endpoints closely mimics the API signature of the resource in the SharePoint client object model. The main entry points for the REST service represent the site collection and site of the specified context. 

To access a specific site, use the following construction:

https://{site_url}/_api/web





161
SharePoint
SharePoint REST API adheres to REST (Representational State Transfer) principles, which means it uses standard HTTP methods (GET, POST, PUT, DELETE) to perform operations on resources identified by URLs.





162
SharePoint
How can you retrieve the metadata of a specific file, including its properties, using the SharePoint REST API?

GET /_api/web/GetFileByServerRelativeUrl('/Documents/Report.docx')?$expand=ListItemAllFields





163
SharePoint
Application Permissions (App-Only)
Definition: Permissions granted directly to the application, without user context. The app operates independently of any user.
Use Case: Ideal for background services, daemons, or automated scripts that need to run without user interaction.
Authentication Flow: Utilizes the Client Credentials Flow with client ID and client secret or certificate.





164
SharePoint
Which REST API endpoint would you use to check if a file named "Report.docx" exists in the "Documents" library of a SharePoint site?

/_api/web/GetFolderByServerRelativeUrl('/Documents')/Files('Report.docx')





165
SharePoint
The PUT method is used to update the entire content of an existing file. If you need to modify only specific properties or metadata, you might use MERGE with the PATCH method instead. However, for updating file content specifically, PUT is appropriate.





166
SharePoint
How can you delete a file named "OldReport.docx" from the "Documents" library using the SharePoint REST API?

DELETE /_api/web/lists/getByTitle('Documents')/files('OldReport.docx')





167
SharePoint
To access SharePoint resources using REST, construct a RESTful HTTP request by using the OData standard, which corresponds to the desired client object model API. For example:

GET https://{site_url}/_api/lists/getbytitle('{list_name}')/items
Authorization: "Bearer " + accessToken
Accept: "application/json;odata=verbose"





168
SharePoint
Uploading large files (typically over 4MB) requires a chunked upload approach. SharePoint REST API provides methods to upload files in slices or chunks, which helps manage large file sizes efficiently and avoids timeouts or memory issues.





169
SharePoint
For more advanced scenarios or to leverage modern authentication libraries, you can use the Microsoft Authentication Library (MSAL) in PowerShell. This approach provides enhanced security features and easier token management.

a. Install MSAL.PS Module
powershell
> Install-Module -Name MSAL.PS -Scope CurrentUser





170
SharePoint
The __metadata property specifies the type information of the item being created or updated. This helps SharePoint understand the schema of the item, ensuring that the correct fields and data types are used.





171
SharePoint
To retrieve the actual content of the file, you append /$value to the REST API endpoint. This instructs SharePoint to return the binary content of the file instead of its metadata.

GET https://contoso.sharepoint.com/sites/YourSite/_api/web/GetFileByServerRelativeUrl('/Documents/Report.docx')/$value
Headers:
  Accept: application/octet-stream





172
SharePoint
Delegated Permissions
Definition: Permissions granted to an application on behalf of a user. The app acts as the user and can only perform actions that the user is permitted to do.
Use Case: Suitable for scenarios where a user is present and can interactively sign in, such as desktop applications or web apps with user interfaces.
Authentication Flow: Typically involves interactive authentication methods like the Authorization Code Flow or Device Code Flow





173
Powershell
Start-Process
Runs an executable or script as a new process. Often used with arguments to control behavior, such as running installers or launching applications in a specific mode.





174
Powershell
docker build -t <name>
Tags a Docker image with a specified name, making it easier to reference and organize in local or remote repositories.





175
Powershell
-AllowClobber
Allows overwriting of existing aliases or functions during module installation, preventing conflicts with pre-existing definitions.





176
Powershell
Service Manager (services.msc)
A GUI tool for managing Windows services. You can start, stop, or restart services like Docker Desktop directly from this interface.





177
Powershell
-Wait
Pauses execution until a specified process finishes. Ensures sequential steps in scripts are executed in the correct order.





178
Powershell
NUL
A virtual file in Windows that discards written data. Commonly used in Command Prompt, NOT POWERSHELL to create empty files (e.g., copy NUL filename).





179
Powershell
Invoke-WebRequest
Sends HTTP or HTTPS requests to retrieve web content, like files or API data. Commonly used for downloading installers or fetching resources directly into a script.





180
Powershell
docker build
Creates a Docker image from a Dockerfile and dependencies. This image can be used to run containerized applications on any compatible host.





181
Powershell
Set-Content
Writes or replaces the content of a file. Useful for creating files with specific content or initializing an empty file.





182
Powershell
Remove-Item
Deletes files, directories, or other items. Commonly used to clean up temporary files or outdated resources in automated scripts.





183
Powershell
cmd /c
Runs a Command Prompt command from PowerShell. Allows use of legacy commands, like copy NUL, for operations not natively supported in PowerShell.





184
Powershell
/i (msiexec argument)
Indicates installation mode for .msi files when using msiexec. Required for executing software setups from command-line tools or scripts.





185
Powershell
error during connect
Indicates the Docker CLI failed to connect to the Docker daemon, often due to the service not running or incorrect configuration.

//./pipe/dockerDesktopLinuxEngine
Refers to the Windows named pipe used for communicating with Docker Desktop's Linux container engine. Errors suggest the service isn’t available.





186
Powershell
/quiet (msiexec argument)
Suppresses all installer prompts and runs the setup silently. Ideal for automated or non-interactive installations.





187
Powershell
Install-Module
Installs PowerShell modules from the PowerShell Gallery, such as AzureRM or PowerShellGet. Often used to add functionality or manage cloud resources.





188
Powershell
az
The Azure CLI command-line tool for managing Azure resources like VMs, storage, and networks. It's cross-platform and integrates with scripting tools like PowerShell.





189
Powershell
Get-Service
Displays the status of Windows services. Useful for checking if a service (e.g., Docker Desktop) is running, stopped, or paused.





190
Powershell
-Force
Overrides warnings or confirmation prompts, ensuring the command proceeds without manual intervention. Common in scripting for reliability.





191
Jane Eyre
Croquant
(kroh-KAHN) A crispy or crunchy French dessert, often made with caramelized sugar and nuts, adding texture to pastries or served on its own.





192
Jane Eyre
Blackaviced
(BLACK-uh-vist) Having a dark or swarthy complexion, typically used descriptively in older literary works.





193
Jane Eyre
Lachrymose
(LAK-rih-mohs) Tearful, prone to crying, or causing sadness, often describing an emotional person, moment, or story.





194
Jane Eyre
Hips and Haws
Fruits of wild roses (hips) and hawthorn trees (haws), commonly seen in hedgerows. These red or orange berries are associated with autumn and are used in herbal remedies and preserves.





195
Jane Eyre
Piquant
(PEE-kahnt) Having a pleasantly sharp or spicy taste; can also describe something intellectually stimulating or excitingly provocative.





196
Jane Eyre
Basin and Ewer
(BAY-sin and YOO-er) A bowl (basin) and jug (ewer) used together for hand or face washing, commonly found before the advent of modern plumbing.





197
Jane Eyre
Post-chaise
(POST-shayz) A lightweight, horse-drawn carriage used for long-distance travel, designed for speed and efficiency, popular in the 18th and 19th centuries.





198
Jane Eyre
Spoony
(SPOO-nee) Foolishly or overly sentimental, especially in matters of love or infatuation, often appearing naïve or overly romantic.





199
Jane Eyre
Battledore and Shuttlecock
(BAT-uhl-door and SHUT-l-kok) A predecessor to badminton, where players use paddles to hit a feathered object (shuttlecock) back and forth without letting it fall.





200
Jane Eyre
Diablerie
(dee-AH-bluh-ree) Mischievous, devilish behavior or sorcery; also refers to artwork, literature, or activities evoking dark, supernatural themes.





201
Jane Eyre
Beldame
(BEL-dame) An old woman, sometimes used respectfully for a grandmother, or pejoratively to describe a hag or crone.





202
Jane Eyre
Palliate
(PAL-ee-ate) To alleviate pain or lessen the severity of something, especially symptoms or distress, without removing the cause; can also mean to downplay faults or mistakes.





203
Jane Eyre
Habergeon
(HAB-er-juhn) A sleeveless, lightweight coat of mail armor, typically covering the torso and sometimes the upper arms, used for protection in medieval combat.





204
Jane Eyre
Contumelious Epithet
(con-too-MEE-lee-uhs EP-uh-thet) An insult or scornful nickname intended to express contempt, often delivered with arrogance.





205
Jane Eyre
Arrogate
(AIR-uh-gate) To seize or assume rights or privileges without justification, often in an overbearing or presumptuous manner.





206
Jane Eyre
Merino (muh-REE-noh)
A breed of sheep prized for its soft, fine wool, ideal for high-quality textiles. The term also refers to fabrics or garments made from this wool, valued for their warmth and luxurious texture.





207
Jane Eyre
Salubrious
(suh-LOO-bree-uhs) Describing something beneficial to health or well-being, such as a pleasant climate, nutritious food, or healthy lifestyle.





208
Jane Eyre
Cachinnation (kak-ih-NAY-shun)
Loud, uncontrollable laughter, often with a connotation of being excessive, mocking, or even sinister. Derived from the Latin word cachinnare, it emphasizes the intensity of the laugh.





209
Jane Eyre
Fillip
(FIL-ip) A small but impactful boost or stimulus; also refers to a flicking motion made by snapping fingers.





210
Home Network Project
Front: What is SSL Certificate and why is it important for web services?

Back: An SSL Certificate is a digital certificate that authenticates the identity of a website and enables encrypted connections via SSL/TLS protocols. It ensures secure data transmission between the user's browser and the web server, protecting sensitive information from interception and tampering.





211
Home Network Project
Front: What are Service Discovery and its importance in containerized environments?

Back: Service Discovery is the process of automatically detecting and locating services within a network, particularly in dynamic environments like container orchestration platforms. It enables containers to find and communicate with each other without manual configuration, facilitating scalability and efficient resource management.





212
Home Network Project
Front: What is Service Mesh and how does it enhance microservices architecture?

Back: A Service Mesh is a dedicated infrastructure layer that manages service-to-service communication within a microservices architecture. It provides features like load balancing, service discovery, traffic management, security (encryption and authentication), and observability (monitoring and tracing), enhancing the reliability and efficiency of microservices interactions.





213
Home Network Project
Front: What is TLS Termination and why is it used in reverse proxies?

Back: TLS Termination refers to the process of decrypting incoming TLS/SSL encrypted traffic at the reverse proxy level before forwarding it to backend servers. It offloads the computationally intensive decryption task from backend servers, improves performance, and allows for centralized management of SSL certificates.





214
Home Network Project
What is the command to update and upgrade packages on a Debian-based system like Raspberry Pi OS?

bash
sudo apt update && sudo apt upgrade -y





215
Home Network Project
Front: What is Prometheus and what is its role in network monitoring?

Back: Prometheus is an open-source monitoring and alerting toolkit designed for reliability and scalability. It collects and stores metrics from various services and systems, allowing users to query and analyze performance data to monitor the health and performance of their network and applications.





216
Home Network Project
Front: What is DNS over HTTPS (DoH) and its advantages?

Back: DNS over HTTPS (DoH) is a protocol that encrypts DNS queries by sending them over HTTPS. Advantages include:

Privacy: Prevents eavesdropping and manipulation of DNS traffic.
Security: Protects against DNS spoofing and man-in-the-middle attacks.
Censorship Resistance: Makes it harder for third parties to block or redirect DNS queries.





217
Home Network Project
Front: What is Fail2Ban and how does it protect a network?

Back: Fail2Ban is an intrusion prevention software that monitors log files for suspicious activity, such as repeated failed login attempts. When such patterns are detected, Fail2Ban automatically updates firewall rules to temporarily or permanently ban offending IP addresses, protecting the network from brute-force attacks and unauthorized access.





218
Home Network Project
Front: What is Snort and how is it used in network security?

Back: Snort is an open-source network intrusion detection and prevention system (IDS/IPS). It analyzes network traffic in real-time, using predefined rules to detect malicious activities such as exploits, port scans, and unauthorized access attempts. Snort can be integrated into pfSense to enhance network security by identifying and responding to potential threats.





219
Home Network Project
Front: What is Docker Swarm and how does it differ from Kubernetes?

Back: Docker Swarm is Docker’s native clustering and orchestration tool for managing a group of Docker engines (nodes) as a single virtual system. It simplifies deploying and managing containerized applications across multiple hosts. Kubernetes, on the other hand, is a more feature-rich and widely adopted container orchestration platform developed by Google, offering advanced features like automated scaling, rolling updates, and self-healing, but with a steeper learning curve.





220
Home Network Project
How do you install Docker on a Raspberry Pi?

bash
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo usermod -aG docker pi





221
Home Network Project
Front: Describe the primary function of Grafana in a monitoring stack.

Back: Grafana is an open-source platform for data visualization and analytics. It connects to various data sources like Prometheus, enabling users to create interactive and customizable dashboards to visualize metrics, monitor system performance, and gain insights into network and application behavior.





222
Home Network Project
Front: How does Pi-hole utilize DNS Sinkholing to block ads?

Back: Pi-hole intercepts DNS queries for domains listed in its blocklists. Instead of resolving these domains to their legitimate IP addresses, Pi-hole returns a non-routable IP address (e.g., 0.0.0.0), preventing the ad content from loading on the client devices.





223
Home Network Project
Front: Explain the purpose of AllowedIPs in WireGuard configuration.

Back: AllowedIPs defines the IP addresses that are permitted to be routed through the VPN tunnel for a specific peer. It acts as both an access control list and routing rule, determining which traffic should be encrypted and sent through the VPN and which should bypass it.

The -f flag indicates the name of the Dockerfile to use.
The -t flag specifies the name of the image to be created; in this example, myapp:v1.
The final parameter, ., provides the build context for the source files for the COPY command: the set of files on the host computer needed during the build process.





224
Home Network Project
Front: What is Rate Limiting and how does it help in preventing attacks?

Back: Rate Limiting restricts the number of requests a user or IP address can make to a service within a specific time frame. It helps prevent various attacks, such as brute-force attacks, denial-of-service (DoS) attacks, and abuse of APIs, by limiting the potential impact of malicious activities.





225
Home Network Project
Front: What is Network Latency and how can it affect network performance?

Back: Network Latency refers to the time it takes for data to travel from the source to the destination across a network. High latency can result in delays, slow application performance, lag in real-time communications, and poor user experiences, especially in activities like gaming, video conferencing, and streaming.





226
Home Network Project
Front: Explain the difference between a Docker Image and a Docker Container.

Back:
Docker Image: A read-only template that contains the application and all its dependencies required to run it. Images are built from Dockerfiles and serve as the blueprint for containers.
Docker Container: A runnable instance of a Docker image. Containers are created from images and can be started, stopped, moved, and deleted independently.





227
Home Network Project
Front: What is Bandwidth and how does it differ from Throughput?

Back:

Bandwidth: The maximum rate of data transfer across a network path, typically measured in Mbps or Gbps. It represents the network's capacity.
Throughput: The actual rate of successful data transfer achieved, often lower than the bandwidth due to factors like network congestion and protocol overhead.





228
Home Network Project
Front: What is a Docker Compose file and what is it used for?

Back: A Docker Compose file (docker-compose.yml) is a YAML file that defines and configures multi-container Docker applications. It specifies the services, networks, and volumes needed for the application, allowing users to start and manage all containers with a single command (docker-compose up).





229
Lost in a Good Book
(Pair of) secateurs: A small, handheld pruning tool used for cutting plants, branches, and stems in gardening.





230
Lost in a Good Book
Budgerigar: A small, brightly colored parakeet native to Australia, often kept as a pet. Known for their ability to mimic sounds and words.





231
Lost in a Good Book
Vestry: A room in a church used for meetings, storage of clergy vestments, or preparation for services.





232
Lost in a Good Book
Proleptic: Relating to anticipation, particularly in literature or rhetoric, where future events are referred to as though they have already happened.





233
Lost in a Good Book
Compère (of a game show): A host or master of ceremonies, responsible for introducing participants and keeping the event flowing.





234
Lost in a Good Book
Phaeton (bodied automobile): A type of early open-top car with no fixed roof, evoking the design of 19th-century horse-drawn carriages.





235
Lost in a Good Book
Wisteria: A climbing flowering plant with fragrant, cascading purple or white blooms, often grown on pergolas or trellises.





236
Lost in a Good Book
Haggard and Hergé (authors): H. Rider Haggard, known for adventure novels like King Solomon's Mines, and Hergé, Belgian creator of The Adventures of Tintin comics.





237
Lost in a Good Book
Lerwick: The main town and port of the Shetland Islands, Scotland, known for its fishing and maritime history.





238
Lost in a Good Book
Antimacassar: A small cloth placed on furniture, especially chair backs, to protect against grease and wear, historically from hair oil ("macassar oil").





239
Lost in a Good Book
(Chicken) vol-au-vent: A small, round, puff pastry case filled with a savory chicken mixture, often served as an appetizer.





240
Lost in a Good Book
Perfidious: Deceitful and untrustworthy, often describing betrayal or disloyalty.





241
Lost in a Good Book
Cornice: An architectural feature where a projecting, decorative molding crowns a building or structure, often found at the top of walls.





242
Lost in a Good Book
Tunguska event: A massive explosion in Siberia (1908) caused by an airburst of a meteoroid or comet, flattening 800 square miles of forest.





243
Lost in a Good Book
Evelyn Waugh (novels): English writer famous for satirical works like Brideshead Revisited and A Handful of Dust, exploring themes of aristocracy, faith, and morality.





244
Lost in a Good Book
Impresario: A manager or producer of theatrical, musical, or other artistic performances, often entrepreneurial in nature.





245
Lost in a Good Book
Pelmet(s): A decorative framework or fabric cover above a window, concealing curtain fittings or rods.





246
Lost in a Good Book
Blagged (a ride): British slang meaning to obtain a ride, often by persuading or deceiving someone.





247
Lost in a Good Book
Diatryma:  A genus of large flightless Eocene birds from Wyoming and New Mexico having much reduced wings, large head and powerful beak, and long massive legs and constituting with extinct related forms (as Gastornis) an order of birds probably most nearly related to the surviving cariamas and bustards





248
Lost in a Good Book
Doric columns: A simple, sturdy style of Greek column with a plain capital and no base, emphasizing proportion and strength.





249
IW Migration
Linked Server (SQL Server)
A configuration that allows SQL Server to run queries against remote data sources as if they were local tables. This enables federated queries, joining data across different servers and even different database platforms.





250
IW Migration
Linked Table Manager (in Access)
A feature in MS Access that helps you manage and refresh connections to external data sources. If a database is split, this tool reconnects front-end objects to back-end tables, ensuring smooth data retrieval and updates.





251
IW Migration
SSMS Query Editor
A text-based interface in SQL Server Management Studio where you can write, run, and optimize SQL queries. It supports syntax highlighting, IntelliSense, and execution plans, helping users test logic, retrieve data, and troubleshoot issues efficiently.





252
IW Migration
Security (SSMS)
Tools and configurations for managing user access, roles, and permissions within SQL Server Management Studio. Administrators can control who can view, modify, or delete data, maintain compliance with policies, and ensure the database’s overall integrity.





253
IW Migration
Functions (User-Defined Functions) (SQL Server)
Reusable routines returning a scalar value or a table. They allow encapsulation of logic into named units, improving code maintainability. However, careful use is required as certain functions can impact query performance if not optimized.





254
IW Migration
Refactoring and Normalization (Access/SQL Server)
The process of reorganizing tables and fields to reduce redundancy and improve data integrity. Higher normalization forms minimize duplicate data and anomalies. This often improves long-term maintainability and eases migration to other systems.





255
IW Migration
Property Sheets (Access)
Panels that display and allow editing of properties for forms, reports, and controls. Users can customize appearance, behavior, event triggers, and data sources to tailor the interface and user experience to specific business requirements.





256
IW Migration
Check Constraints and Computed Columns (SQL Server)
Check constraints enforce custom rules on column values, ensuring data integrity at the database level. Computed columns derive their values from an expression referencing other columns, reducing redundant storage and improving data consistency.





257
IW Migration
Database Diagrams (SSMS)
Graphical representations of a database’s schema. They visually display tables, columns, keys, and relationships, aiding comprehension of complex data models, enhancing communication among developers, and assisting in planning changes or migrations to other systems.





258
IW Migration
Transaction Handling (SQL Server)
A mechanism to ensure that a series of database operations either all succeed or all fail, maintaining data integrity. Using commands like BEGIN TRAN, COMMIT, and ROLLBACK, developers control atomic operations and safeguard against partial updates.





259
IW Migration
Syntax to find files that contain a substring. Needed this when trying to remember where I made certain files when working on IW files.
Get-ChildItem -Recurse | Select-String "account_edit" -List | Select Path





260
IW Migration
Template Explorer (SSMS)
A feature in SQL Server Management Studio providing ready-made SQL code templates for common database tasks. Developers can quickly insert standardized scripts for creating tables, views, or procedures, streamlining development and enforcing coding standards.





261
IW Migration
Linked Table Manager (Access)
A utility in Access to manage external data connections. It allows refreshing, updating, or changing the source of linked tables, ensuring that front-end objects always correctly reference tables in the back-end or external databases.





262
IW Migration
VBA Modules (Access)
Visual Basic for Applications code libraries integrated within Access. Modules let developers write custom functions, event handlers, and business logic to enhance functionality beyond what macros offer, enabling more advanced data manipulation and validation.





263
IW Migration
Indexing (Access/SQL Server)
A strategy for improving data retrieval speeds by creating data structures (indexes) on certain fields. Proper indexing balances query performance gains against the overhead of maintaining those indexes during inserts, updates, and deletions.





264
IW Migration
Database Backup and Restore (SSMS)
Built-in wizards and features in SQL Server Management Studio to safeguard data. They allow administrators to create full, differential, or transaction log backups and restore databases to a previous state, ensuring data recovery after failures.





265
IW Migration
SSIS (SQL Server Integration Services)
A platform for building enterprise-level data integration, transformation, and migration workflows. While not directly in SSMS, SSIS packages can orchestrate complex ETL operations, complementing Access-to-SQL-Server migrations and ongoing data maintenance.





266
IW Migration
Locking and Concurrency Control (SQL Server)
Techniques to manage simultaneous data access, preventing conflicts and ensuring consistency. Locks, isolation levels, and optimistic concurrency are tools that balance performance with data correctness when multiple users edit data simultaneously.





267
IW Migration
Execution Plans (SQL Server)
Visual or textual representations of how the SQL Engine executes queries. They identify steps taken—like table scans, index seeks, or joins—helping developers and DBAs optimize performance, tune queries, and refine indexing strategies.





268
IW Migration
Forms (Access)
User-friendly interfaces for entering, displaying, and editing data in tables. They can incorporate buttons, dropdowns, and validation rules, making data input more efficient and consistent, and often serve as the primary user interaction layer.





269
Network Mapping
Metasploit Framework

Definition: An open-source penetration testing platform that provides a wide range of exploit modules, payloads, and auxiliary tools for developing, testing, and executing exploits against target systems.





270
Network Mapping
Metasploit Exploit Modules

Definition: Components of the Metasploit Framework designed to exploit specific vulnerabilities in target systems, enabling unauthorized access or execution of malicious actions.





271
Network Mapping
Buffer Overflow

Definition: A vulnerability where an application writes more data to a buffer than it can hold, causing adjacent memory to be overwritten, potentially allowing arbitrary code execution or system crashes.





272
Network Mapping
CDP (Cisco Discovery Protocol)

Definition: A Cisco proprietary protocol that enables network devices to share information about themselves and their connected neighbors, aiding in network mapping and management.





273
Network Mapping
Passive Network Mapping

Definition: The process of creating a network map by observing and analyzing existing traffic without actively probing or interacting with network devices, ensuring stealth and non-intrusiveness.





274
Network Mapping
Payload (Metasploit)

Definition: Code that runs on a target system after a successful exploit, performing actions like opening a command shell, creating a reverse connection, or executing other malicious activities.





275
Network Mapping
IEEE 802.15.4

Definition: A standard for low-rate wireless personal area networks (LR-WPANs), forming the basis for protocols like Zigbee and Thread, commonly used in IoT and home automation.





276
Network Mapping
Polymorphic Shellcode

Definition: Shellcode that alters its code structure each time it is executed to evade detection by signature-based security systems like antivirus software, enhancing stealth.





277
Network Mapping
IEEE 802.1Q

Definition: The standard protocol for VLAN tagging, enabling multiple Virtual Local Area Networks to share a single physical network link by inserting VLAN tags into Ethernet frames.





278
Network Mapping
Dependency Graph

Definition: A visual representation within a Service Map that illustrates the relationships and dependencies between various network services, essential for understanding service impacts and troubleshooting.





279
Network Mapping
Service Map

Definition: A visual representation illustrating the relationships, dependencies, and interactions between various network services and applications within an organization, aiding in management and troubleshooting.





280
Network Mapping
NetFlow

Definition: A network protocol developed by Cisco for collecting and monitoring IP traffic data, providing insights into bandwidth usage, traffic patterns, and network performance.





281
Network Mapping
Exploit Buffers

Definition: Memory buffers within applications susceptible to buffer overflow attacks, allowing attackers to inject and execute malicious code by overwriting adjacent memory areas.





282
Network Mapping
Control Plane (in SDN)

Definition: The centralized component in Software-Defined Networking responsible for maintaining a global network view and making routing decisions, communicating instructions to the Data Plane.





283
Network Mapping
Persistence Modules (Metasploit)

Definition: Metasploit modules designed to maintain ongoing access to a compromised system even after a reboot, typically by installing backdoors or modifying system configurations.





284
Network Mapping
ARP Spoofing (Address Resolution Protocol Spoofing)

Definition: A Man-in-the-Middle attack where an attacker sends falsified ARP messages on a local network, associating their MAC address with a legitimate IP address to intercept or manipulate traffic.





285
Network Mapping
Stack Canary

Definition: A security mechanism placed between buffers and control data on the stack to detect buffer overflows by checking if the canary value has been altered before function returns, preventing unauthorized code execution.





286
Network Mapping
Logical Topology (Service Map)

Definition: An abstract representation within a Service Map showing how services interact and depend on each other, focusing on data flow and service relationships rather than physical connections.





287
Network Mapping
Shellcode Injection

Definition: A technique where an attacker injects shellcode—a small piece of code providing control over a compromised system—into a vulnerable application to execute arbitrary commands or establish unauthorized access.





288
Network Mapping
RADIUS Server (Remote Authentication Dial-In User Service)

Definition: A networking protocol providing centralized Authentication, Authorization, and Accounting (AAA) for users accessing network services, commonly integrated with NAC solutions.





289
Network Mapping
Network Access Control (NAC)

Definition: A security solution enforcing policies on devices attempting network access, ensuring only authorized and compliant devices can connect through authentication, authorization, and compliance checks.





290
Open Source/GitHub
Code of Conduct

Guidelines that outline expected behavior and interactions within a project’s community, promoting a respectful and inclusive environment.





291
Open Source/GitHub
Merge Conflict

A situation where changes from different branches cannot be automatically reconciled, requiring manual intervention to resolve discrepancies in the code.





292
Open Source/GitHub
Downstream Repository

A fork or clone of an upstream repository, where contributors can make changes independently before contributing back.





293
Open Source/GitHub
Code Review

The process where project maintainers and contributors examine changes proposed in a pull request to ensure code quality, functionality, and adherence to guidelines.





294
Open Source/GitHub
Issue Triage

The process of reviewing and categorizing issues in the issue tracker, often involving labeling, prioritizing, and assigning tasks to contributors.





295
Open Source/GitHub
Issue Tracker

A system within a repository where bugs, feature requests, and tasks are reported, tracked, and managed by contributors and maintainers.





296
Open Source/GitHub
Upstream Repository

The original repository from which a fork is created, where contributions are eventually proposed to be merged.





297
Open Source/GitHub
Good First Issue

A label for beginner-friendly tasks in a project’s issue tracker, designed to help new contributors make their initial contributions with manageable tasks.





298
Open Source/GitHub
Contribution Guidelines

A set of rules and best practices outlined by a project to ensure consistent and quality contributions from all contributors, often found in CONTRIBUTING.md.





299
Open Source/GitHub
Test Suite

A collection of automated tests that verify the functionality and integrity of a project’s code, ensuring that changes do not introduce new bugs.





300
Open Source/GitHub
GitHub Actions

A feature on GitHub that allows automation of workflows, such as running tests or deploying code, in response to events like pull requests.





301
Open Source/GitHub
Label

Tags assigned to issues or pull requests to categorize them, such as “good first issue,” “bug,” or “enhancement,” facilitating easier navigation and filtering.





302
Open Source/GitHub
Virtual Environment

An isolated environment in Python that allows you to manage dependencies and packages for a project without affecting the global Python installation.





303
Open Source/GitHub
Maintainer

A person or group responsible for overseeing a repository, managing contributions, reviewing pull requests, and ensuring the project’s direction and quality.





304
Open Source/GitHub
CONTRIBUTING.md

A markdown file that outlines the process and guidelines for contributing to a project, including coding standards, commit messages, and pull request procedures.





305
Open Source/GitHub
Changelog

A document that records all notable changes made to a project, including new features, bug fixes, and updates, providing transparency and history for users and contributors.





306
Open Source/GitHub
Pull Request (PR)

A request to merge changes from your fork or branch into the original repository, facilitating code review and collaboration with project maintainers.





307
Open Source/GitHub
README.md

A markdown file at the root of a repository that provides an overview of the project, including its purpose, setup instructions, and usage information.





308
Open Source/GitHub
Issue Assignee

A person designated to work on a specific issue, indicating responsibility and ownership for resolving the task or bug.





309
Open Source/GitHub
Hotfix

An urgent fix applied to a project to resolve critical bugs or security vulnerabilities, typically merged quickly into the main codebase.





310
Open Source/GitHub
Contributor

An individual who contributes code, documentation, or other resources to an open source project, helping to improve and maintain the project’s quality.





311
Open Source/GitHub
PEP 8

Python Enhancement Proposal 8, the style guide for writing clean and readable Python code, outlining conventions for code layout and formatting.





312
Debugging in VS Code
Debugger Attach
A process where the debugger attaches to a running program (either locally or remotely) without stopping it. This is useful for debugging production systems or processes that cannot be restarted.





313
Debugging in VS Code
Hot Reloading
A feature in some debuggers and IDEs that allows you to modify and reload parts of your code while the program is running, enabling you to see the changes in real time without restarting the application.





314
Debugging in VS Code
Memory Inspection
The process of examining the program’s memory during debugging to understand how memory is allocated, used, and released, which can help identify memory-related bugs like leaks or corruption.





315
Debugging in VS Code
Variable Inspection
The process of viewing and analyzing the values of variables in a program while it's running.





316
Debugging in VS Code
1. Debugger
A tool used to inspect, control, and modify the execution of a program in order to identify and fix bugs.
2. Breakpoint
A marker set in a program that causes the execution to pause so that the developer can inspect the program’s state.





317
Debugging in VS Code
Tracepoint
Similar to a breakpoint, but instead of pausing execution, a tracepoint logs information about the execution of the program, such as variable values or function calls, without interrupting the flow.





318
Debugging in VS Code
Step Over
A debugging feature that allows you to skip over a function call, running it entirely without entering it.





319
Debugging in VS Code
Watch Expression
A tool in a debugger that allows you to monitor the value of a specific variable or expression during execution.





320
Debugging in VS Code
Exception Breakpoint
A breakpoint that pauses the program when a specific exception (error) is raised.





321
Debugging in VS Code
Step Into
A debugging feature that allows you to enter a function call to examine its internal execution line by line.





322
Debugging in VS Code
Step Out
A debugging feature that lets you exit the current function and return to the function that called it.





323
Debugging in VS Code
Watchpoint
A debugging feature that pauses execution when the value of a specific variable changes, similar to a breakpoint but focused on value changes rather than specific lines of code.





324
Debugging in VS Code
Live Debugging
A type of debugging where changes are made to the program and tested while it is running in a live environment, often used in web development and real-time applications.





325
Debugging in VS Code
Reverse Debugging
A debugging technique where you can move backward through the program’s execution to examine the program's state before an issue occurred, often helpful for tracking down bugs that involve complex states.





326
Debugging in VS Code
Remote Debugging
The process of debugging code running on a different machine or environment from your local computer.





327
Debugging in VS Code
Symbolic Debugging
A debugging technique that uses debug symbols (which provide additional information like variable names, function names, and line numbers) to make debugging more understandable and precise, often used in conjunction with compiled languages.





328
Debugging in VS Code
Debugger API
An application programming interface (API) that allows developers to extend or automate debugging tools, often used to integrate debugging features into custom workflows or external tools.





329
Debugging in VS Code
Profiling
The process of analyzing the performance of a program, including memory usage, execution time, and function calls, to identify bottlenecks and optimize performance.





330
Debugging in VS Code
Debug Console
A tool within a development environment used to evaluate expressions, view output, or interact with a running program during debugging.





331
Debugging in VS Code
Stack Trace
A report that provides detailed information about the sequence of function calls and the state of the program at the point where an error occurred. It's often used to diagnose issues in the execution flow.





332
Debugging in VS Code
Conditional Breakpoint
A breakpoint that only pauses execution when a specific condition is met (e.g., when a variable reaches a certain value).





333
Debugging in VS Code
Code Coverage
The process of determining which parts of your code have been executed during testing or debugging, helping to identify untested areas and ensure comprehensive testing.





334
Debugging in VS Code
Call Stack
A data structure that stores the sequence of function calls made in a program, showing the order in which they were called.





335
Logging in Python
Q: What is a key benefit of using RotatingFileHandler from the logging.handlers module?

A: It rotates log files when they reach a certain size, such as maxBytes=5*1024*1024 (5 MB).
This prevents log files from growing indefinitely, managing disk space effectively.





336
Logging in Python
Q: Which parameter in logging.basicConfig() from the logging module specifies the format of log messages?

A: format='%(asctime)s - %(levelname)s - %(message)s'
This parameter sets the layout of each log message, including timestamp, severity level, and the message itself.





337
Logging in Python
Q: How can you configure Python's logging to output messages to a file instead of the console?

A: Use FileHandler from the logging module with a filename like 'app.log'.
This directs log messages to the specified file instead of the standard console output.





338
Logging in Python
Q: Which function is used to log a message with level WARNING in Python's logging module?

A: logging.warning()
This function logs a message with a severity level of WARNING.





339
Logging in Python
Q: Which logging level is appropriate for a message that indicates a minor problem that doesn't prevent the program from functioning?

A: WARNING
This level signals potential issues that may require attention but do not halt the application's execution.





340
Logging in Python
Q: In TimedRotatingFileHandler from the logging.handlers module, what does the when parameter specify?

A: when='midnight'
This parameter sets the interval type for rotating logs, such as daily at midnight.





341
Logging in Python
Q: What does WatchedFileHandler from the logging.handlers module do differently compared to FileHandler?

A: It watches the log file for external modifications and automatically reopens it if the file is moved or deleted.
This is useful when external tools handle log rotation, ensuring continuous logging without interruption.





342
Logging in Python
Q: If a child logger has propagate set to False, what does this mean?

A: It will not pass log messages to the parent logger.
This isolates the logger, ensuring that messages are handled only by its own handlers.





343
Logging in Python
Q: Which handler would you choose to limit the size of your log files and maintain a specific number of backup files?

A: RotatingFileHandler from the logging.handlers module
This handler manages log file sizes and retains a set number of backup files to prevent excessive disk usage.





344
Logging in Python
Q: What does the exc_info parameter do in logging methods like logger.error() from the logging module?

A: exc_info=True
This includes exception traceback information in the log message, aiding in debugging.





345
Logging in Python
Q: Name a handler you would use to send log messages via email for critical errors.

A: SMTPHandler from the logging.handlers module
This handler sends log messages through an SMTP server, suitable for alerting on critical issues.





346
Logging in Python
Q: Name the four main types of file handlers available in Python's logging module.

A: FileHandler, RotatingFileHandler, TimedRotatingFileHandler, WatchedFileHandler
These handlers manage log output to files with varying rotation and monitoring capabilities.





347
Logging in Python
Q: What is the purpose of a Formatter in Python's logging module?

A: To define the structure and content of log messages using formats like '%(asctime)s - %(levelname)s - %(message)s'.
This ensures that log messages are consistently formatted for readability and analysis.





348
Logging in Python
Q: How do you add a custom filter to a logger or handler in Python's logging module?

A: Use the addFilter() method with a filter instance, e.g., logger.addFilter(SpecialFilter()).
This allows selective logging based on custom criteria defined within the filter.





349
Logging in Python
Q: What is the primary purpose of TimedRotatingFileHandler from the logging.handlers module?

A: To rotate log files at specific timed intervals, such as daily or hourly (when='midnight').
This ensures that log files are segmented based on time, facilitating organized log management.





350
Logging in Python
Q: What is the purpose of the disable_existing_loggers key in a dictConfig logging configuration?

A: disable_existing_loggers=False in logging.config.dictConfig
This ensures that existing loggers not specified in the configuration remain active and are not disabled.





351
Logging in Python
Q: What is the advantage of using logging.getLogger(__name__) in each module of a Python application?

A: It automatically names the logger based on the module's name, ensuring consistency and facilitating hierarchical logging configurations.
This practice aligns loggers with the application's structure, making configuration and debugging more manageable.





352
Logging in Python
Q: What does setting logging.disable(logging.CRITICAL) do to the logging system in Python's logging module?

A: It disables all logging messages at or below the CRITICAL level.
This effectively silences all log messages, as CRITICAL is the highest standard logging level.





353
Logging in Python
Q: What is the default logging level in Python's logging module?

A: WARNING
This means that only messages with a severity of WARNING and above will be processed by default.





354
Logging in Python
Q: Why is it recommended to use named loggers (e.g., logging.getLogger(__name__)) instead of the root logger?

A: It allows for more granular control over logging behavior in different parts of an application.
Named loggers enable targeted configurations, such as setting different log levels or handlers for specific modules.





355
Logging in Python
Q: How can you configure multiple file handlers with different log levels for the same logger in Python's logging module?

A: Add multiple handlers to the logger, each with its own level and target file, such as one handler with level=INFO writing to 'info.log' and another with level=ERROR writing to 'error.log'.
This setup allows segregation of log messages based on severity levels across different files.





356
Logging in Python
Q: How can you configure logging using an external INI-style configuration file in Python's logging module?

A: Use logging.config.fileConfig('logging.ini') from the logging.config module
This function reads the logging configuration from an INI file, allowing for external and reusable configurations.





357
Logging in Python
Q: What is the default formatter format string if none is specified in logging.basicConfig()?

A: '%(levelname)s:%(name)s:%(message)s'
This default format includes the log level, logger name, and the log message.





358
Logging in Python
Q: Which formatter attribute includes the name of the function where the log message originated in Python's logging.Formatter?

A: %(funcName)s
This attribute inserts the function name into the log message, providing context about where the log was generated.





359
Logging in Python
Q: Which of the following is not a built-in logging level in Python: DEBUG, INFO, TRACE, CRITICAL?

A: TRACE
TRACE is not a standard logging level in Python's logging module.





360
PEP 8
Handle Import Errors Gracefully: When dealing with optional dependencies, use try-except blocks to handle ImportError exceptions. This prevents the entire application from crashing if an optional module isn't available, allowing for more robust and flexible code.





361
PEP 8
No Spaces Inside Brackets: Do not add spaces inside parentheses, brackets, or braces. This rule applies to function calls, indexing, and data structures. Correct formatting ensures consistency and prevents syntax errors.

python
my_list = [1, 2, 3]





362
PEP 8
Order Sections Logically: Structure your Python file in this sequence: Module Docstring, Imports, Module-Level Variables/Constants, Classes, then Functions. This organization enhances readability and maintainability by grouping related components together.





363
PEP 8
Alphabetize Imports Within Groups: While not strictly required, alphabetizing imports within each group (Standard Library, Third-Party, Local) enhances readability and makes it easier to locate specific imports. Consistent ordering also simplifies maintenance and collaboration.





364
PEP 8
No Extra Blank Lines at the End of Files: Avoid inserting extra blank lines at the end of your Python files. Ensure that the file ends with a single newline character to comply with POSIX standards and prevent issues in some tools.





365
PEP 8
Use Parentheses for Multi-Line Imports: When importing multiple objects from a module, enclose them within parentheses and list each on a separate line. This enhances readability and adheres to line length restrictions without using backslashes.





366
PEP 8
Structuring try-except-else-finally: Follow the order: try, except, else, then finally. Place else after all except blocks and before finally to ensure that code in else runs only if no exceptions occur, maintaining clear separation of logic.





367
PEP 8
No Trailing Whitespace: Ensure that there are no unnecessary spaces at the end of lines. Trailing whitespace can clutter the codebase and cause issues with version control diffs. Most editors can be configured to remove trailing spaces automatically.





368
PEP 8
Spaces Around Assignment Operators: Use spaces around assignment operators (=) to differentiate them from keyword arguments and enhance clarity in variable assignments.

python
Copy code
total = 100





369
PEP 8
One Import Per Line: Place each import statement on its own line to improve clarity and simplify version control diffs. Avoid combining multiple imports in a single line, which can make the code harder to read and maintain.





370
PEP 8
Blank Lines Within Functions: Use single blank lines within functions to separate logical sections or blocks of code. This separation enhances readability without introducing excessive vertical space.

python
def process_data(data):
    cleaned_data = clean(data)
    
    result = compute(cleaned_data)
    
    return result





371
PEP 8
Spaces Before Opening Parentheses: Do not add a space before the opening parenthesis in function calls, definitions, or other uses. This rule keeps the syntax clean and consistent.

python
Copy code
my_function(arg1, arg2)





372
PEP 8
Spaces Around Binary Operators: Place one space on both sides of binary operators (e.g., =, +, -, ==). This spacing makes expressions clearer and easier to read. For example:

python
total = price + tax





373
PEP 8
No Spaces Around = for Keyword Arguments: Do not use spaces around the = sign when passing keyword arguments in function calls. This rule differentiates keyword arguments from assignment statements.

python
Copy code
my_function(param1=value1, param2=value2)





374
PEP 8
Prevent Circular Imports: Avoid scenarios where two modules depend on each other directly or indirectly. Refactor by combining modules, extracting common functionality, or using local imports within functions to defer the import until necessary.





375
PEP 8
Breaking Long Lines with Parentheses: Use parentheses to implicitly continue lines instead of backslashes. This method is more readable and less error-prone. Align continued lines vertically for clarity.

python
Copy code
total = (
    first_variable
    + second_variable
    - third_variable
)





376
PEP 8
Alias Imports Judiciously: Use the as keyword to create aliases for long module names or to resolve naming conflicts. Ensure that aliases are clear and widely recognized (e.g., import numpy as np) to maintain code readability and consistency.





377
PEP 8
Keep Imports at the Top: Ensure all import statements are placed at the beginning of the file, right after the module docstring and before any module-level variables or constants. This standard placement improves code organization and makes dependencies immediately visible.





378
PEP 8
Spaces After Commas, Colons, and Semicolons: Insert a single space after commas, colons, and semicolons to separate elements and enhance readability. This applies to lists, function arguments, slicing, and control structures.

python
def func(a, b, c):
    pass





379
PEP 8
Blank Lines for Separation: Use blank lines to separate top-level functions and class definitions, typically two blank lines. Within classes, use one blank line to separate methods. This separation improves code organization and readability.





380
PEP 8
Use __all__ to Define Public API: In your modules, define the __all__ list to explicitly specify which objects are public and should be imported when using from module import *. This controls the module's public interface and prevents unintended namespace pollution.





381
PEP 8
Prefer Absolute Imports: Use full paths for imports starting from the project's root rather than relative imports. Absolute imports are more readable, less error-prone, and clearly indicate the module's location within the project structure.





382
PEP 8
Limit the Use of Inline Comments: Use inline comments sparingly and only when they add significant clarity. Overusing inline comments can clutter the code and make it harder to read.





383
PEP 8
Organize Imports by Group: Group import statements into three categories separated by blank lines: Standard Library Imports, Third-Party Imports, and Local Application Imports. This clear separation helps in quickly identifying the source of each import.





384
PEP 8
Consistent Alignment in Continuation Lines: Align continuation lines either vertically with the opening delimiter or use an extra level of indentation. Consistent alignment improves the visual structure and readability of the code.

python
Copy code
result = some_function(
    first_argument,
    second_argument,
    third_argument,
)





385
PEP 8
Remove Unused Imports: Regularly clean your code by eliminating imports that are not utilized. Unused imports clutter the codebase, increase memory usage, and can lead to longer load times. Utilize linters like flake8 or pylint to identify and remove them.





386
PEP 8
Automate Import Management: Employ tools such as isort to automatically sort and organize your import statements according to PEP 8 guidelines. Integrate these tools with your development workflow to maintain consistent and error-free import structures across your projects.





387
PEP 8
Spaces in Slices and Function Parameters: Do not add spaces inside slicing brackets or between function parameters unless necessary for clarity. Proper spacing maintains clean syntax.

python
my_list[1:5]





388
WSL + Kali Linux
GPG (GNU Privacy Guard)
A tool for secure communication and data encryption, which is commonly used for email encryption and signing documents. GPG can manage encryption keys and is often used in Linux environments for secure file and message handling.





389
WSL + Kali Linux
Wayland
A modern display server protocol that is intended as a replacement for the older X11 system. While X11 is still widely used, Wayland is being adopted for more efficient and secure graphical environments, though it’s less compatible with WSL2 at the moment.





390
WSL + Kali Linux
You can also invoke Linux commands from PowerShell or CMD like:
wsl ls (runs ls command in WSL)
wsl sudo apt update (runs apt update in WSL)





391
WSL + Kali Linux
Tools for Troubleshooting GUI Apps on WSL:
xset: A command-line utility for managing X11 settings like display parameters and screen saver behavior.





392
WSL + Kali Linux
Polkit (PolicyKit)
A framework for defining and handling authorizations in a Linux system, particularly for desktop applications requiring elevated privileges. It’s used for managing permissions to perform administrative tasks through a GUI.





393
WSL + Kali Linux
/mnt Directory
In WSL, the /mnt directory is where your Windows file system is mounted. For example, C:\ is accessible at /mnt/c, D:\ at /mnt/d, etc. This allows you to access and work with files from both Windows and Linux environments seamlessly.





394
WSL + Kali Linux
Xorg
The open-source implementation of the X Window System (X11). It provides the graphical server for Unix-like operating systems, handling input, output, and screen display for graphical applications.





395
WSL + Kali Linux
WSL Performance Tuning
For better performance, particularly when running heavier workloads or containers, use a .wslconfig file to adjust resource allocation for WSL 2 (memory, CPU, etc.).
Example .wslconfig:
makefile
Copy code
[wsl2]
memory=4GB
processors=2





396
WSL + Kali Linux
WSLg (Windows Subsystem for Linux GUI)
A feature in WSL2 that allows graphical Linux applications to run natively on Windows, without requiring additional software like VNC or an X server.





397
WSL + Kali Linux
WSL Interop
WSL allows interoperability between Windows and Linux tools. You can run Windows executables from within a WSL terminal, such as:
notepad.exe (opens Notepad from WSL)
explorer.exe (opens Windows File Explorer)





398
WSL + Kali Linux
wsl.exe and .bashrc
.bashrc is a script that runs every time you launch a new terminal in WSL. You can use it to set environment variables, customize the prompt, or configure any other startup behavior you want.





399
WSL + Kali Linux
nm-applet (Network Manager Applet)
A system tray application that allows you to manage network connections in a graphical environment. It's commonly used with desktop environments like GNOME or XFCE for managing Wi-Fi, VPN, and Ethernet connections.





400
WSL + Kali Linux
Xfwm4 (XFCE Window Manager)
The window manager for the XFCE desktop environment. It manages window placement, appearance, and focus within the XFCE session.





401
WSL + Kali Linux
wsl --update
Updates the WSL 2 Linux kernel, ensuring you are running the latest version with improved features, security fixes, and bug resolutions.





402
WSL + Kali Linux
12. wsl --mount
A feature introduced with WSL 2, this allows you to mount physical disks in WSL as Linux file systems. Useful for accessing raw disks like external drives directly within WSL.
13. wsl --no-launch
Prevents WSL from automatically launching the default Linux shell after a distribution is installed.





403
WSL + Kali Linux
wsl with Docker
Docker can run on WSL 2, which enables you to run Linux containers directly on Windows. Docker Desktop for Windows integrates with WSL 2 to provide a seamless environment for both Docker and WSL.





404
WSL + Kali Linux
D-Bus
A message bus system that allows applications and services to communicate with each other, particularly in Linux-based systems. D-Bus is essential for managing things like user authentication and device notifications in desktop environments.





405
WSL + Kali Linux
IceWM (Ice Window Manager)
A lightweight window manager used in various Linux distributions. It's known for being simple and using fewer resources compared to more complex desktop environments like GNOME or KDE.





406
WSL + Kali Linux
WSL 1 vs. WSL 2
WSL 1: A translation layer that converts Linux system calls into Windows system calls. It provides faster performance for file system operations but lacks full Linux kernel support.
WSL 2: A full Linux kernel running in a lightweight VM, offering full system call compatibility, better performance for certain workloads (e.g., Docker), and improved compatibility with Linux software.





407
WSL + Kali Linux
/etc/wsl.conf
A configuration file in Linux distributions that allows you to control WSL behavior at the system level, such as automating the mount points for drives, configuring interop with Windows tools, and controlling networking options.





408
WSL + Kali Linux
X11 (X Window System)
A graphical windowing system for Unix-like operating systems, providing the foundation for graphical user interfaces. X11 is typically used with Linux systems to handle display rendering and interaction.





409
WSL + Kali Linux
WSL File System Performance
The file system in WSL 2 is optimized for Linux applications but has some overhead when accessing files stored on Windows drives (/mnt/c, /mnt/d). It's recommended to store Linux-specific files in the WSL file system (/home, etc.) for better performance.





410
WSL + Kali Linux
WSL Networking
Accessing Windows Network Services from WSL: WSL allows you to access Windows network services and vice versa. For example, you can access a Windows-hosted HTTP server in WSL at localhost:port.
wsl.exe Networking: When WSL 2 is in use, it runs a virtualized network adapter with a different IP address than the host machine, but WSL 2 allows seamless access to services running on the host.





411
WSL + Kali Linux
wsl --export <distro> <file.tar>
Exports a WSL distribution to a .tar file. This can be used for backup or migration purposes.





412
WSL + Kali Linux
XFCE (XForms Common Environment)
A lightweight and fast desktop environment for Unix-like operating systems, known for its low resource usage. XFCE provides a complete graphical interface for managing windows, files, and system settings.





413
WSL + Kali Linux
wsl --import <distro> <install-location> <tarball>
Imports a WSL distribution from a .tar file into the specified install location. This is useful for migrating or creating a custom Linux environment.





414
WSL + Kali Linux
wsl Command
The primary command-line interface for interacting with WSL instances. It is used to manage and run Linux distributions on Windows.
Common options:
wsl --set-default <distro>: Sets the default Linux distribution for running wsl commands.
wsl --terminate <distro>: Terminates a running WSL distribution.
wsl --shutdown: Stops all running WSL instances.





415
WSL + Kali Linux
wsl Command
The primary command-line interface for interacting with WSL instances. It is used to manage and run Linux distributions on Windows.
Common options:
wsl --list or wsl -l: Lists installed distributions.
wsl --set-version <distro> 2: Changes the version of a distribution to WSL 2.





416
WSL + Kali Linux
Wireshark Capture Filter
A set of rules used to filter network traffic before it is captured in Wireshark. Capture filters can limit the types of traffic being collected, making it easier to focus on specific network issues.





417
Powershell Modules
Auto-Import

Definition: A feature in PowerShell that automatically imports a module when a cmdlet from that module is invoked.
Explanation: Starting from PowerShell 3.0, modules can be auto-imported, eliminating the need to manually run Import-Module for each module you use.





418
Powershell Modules
Update-Module

Definition: A cmdlet used to update an installed module to its latest version from the repository.
Explanation: Example: Update-Module -Name Az updates the Az module. To update all modules: Get-InstalledModule | Update-Module.





419
Powershell Modules
PowerShell Gallery

Definition: The central repository for PowerShell modules, scripts, and other resources.
Explanation: Accessible via the Find-Module and Install-Module cmdlets. Website: PowerShell Gallery.





420
Powershell Modules
Get-InstalledModule

Definition: A cmdlet that retrieves modules installed on the system.
Explanation: Useful for managing and updating modules. Example: Get-InstalledModule | Update-Module updates all installed modules.





421
Powershell Modules
Dot Sourcing

Definition: A method to load functions and variables from a script into the current session.
Explanation: Not directly discussed, but related to loading scripts and modules. Typically done using a dot (.) before the script path.





422
Powershell Modules
RequiredModules
Definition: A property in a module manifest that lists other modules required for the module to function.
Explanation: Ensures that dependencies are loaded before the module itself is imported. Example: (Get-InstalledModule -Name AzureRM).RequiredModules.





423
Powershell Modules
Import-Module

Definition: A cmdlet used to load a PowerShell module into the current session.
Explanation: Makes the module's cmdlets and functions available for use. Example: Import-Module -Name Az.





424
Powershell Modules
Get-Help

Definition: A cmdlet that displays help information for other cmdlets and functions.
Explanation: Provides detailed documentation and examples. Example: Get-Help Get-AzVM -Detailed.





425
Powershell Modules
Scope (Installation)

Definition: Determines whether a module is installed for all users or just the current user.
Explanation: Controlled via the -Scope parameter in Install-Module. Options include CurrentUser and AllUsers.





426
Powershell Modules
Az Module

Definition: A module for managing Azure resources.
Explanation: Provides cmdlets to interact with Azure services. Example cmdlet: Get-AzVM.





427
Powershell Modules
Module Auto-Import

Definition: See Auto-Import above.
Explanation: Allows modules to be imported automatically when their commands are used, streamlining workflow.





428
Powershell Modules
Format-List

Definition: A PowerShell cmdlet that formats the output as a list of properties.
Explanation: Used with other cmdlets to display detailed information. Example: Get-InstalledModule | Format-List * shows all properties of installed modules.





429
Powershell Modules
Cmdlet

Definition: A lightweight command used in the PowerShell environment.
Explanation: Cmdlets follow a Verb-Noun naming pattern (e.g., Get-Module, Import-Module) and perform specific functions within PowerShell.





430
Powershell Modules
PowerShell Module

Definition: A package that contains PowerShell cmdlets, functions, scripts, and other resources.
Explanation: Extends PowerShell’s functionality and can be shared or reused across different environments and users.





431
Powershell Modules
Module Manifest

Definition: See Module Manifest (.psd1) above.
Explanation: Provides metadata and configuration for modules, ensuring they load correctly with specified dependencies and exported commands.





432
Powershell Modules
Select-Object

Definition: A cmdlet that selects specific properties of an object or set of objects.
Explanation: Often used to filter and display only the needed information. Example: Get-Module -ListAvailable | Select-Object Name, Version, Path.





433
Powershell Modules
Directory Path for Modules

Definition: The file system locations where PowerShell modules are stored.
Explanation: Common directories include C:\Program Files\PowerShell\Modules for all users and C:\Users\<Username>\Documents\PowerShell\Modules for individual users.





434
Powershell Modules
Install-Module

Definition: A cmdlet used to download and install a module from a repository like the PowerShell Gallery.
Explanation: Specifies the module name and installation scope. Example: Install-Module -Name Az -Scope CurrentUser.





435
Powershell Modules
CurrentUser Scope

Definition: An installation scope that makes a PowerShell module available only to the current user.
Explanation: Installing a module with -Scope CurrentUser does not require administrative privileges and places the module in the user's profile directory, typically C:\Users\<Username>\Documents\PowerShell\Modules.





436
Powershell Modules
Dependencies

Definition: Other modules or components that a PowerShell module requires to function correctly.
Explanation: Dependencies are specified in a module's manifest and must be present for the module to operate as intended. They can be viewed using properties like RequiredModules.





437
Powershell Modules
Get-Module

Definition: A cmdlet that retrieves information about modules.
Explanation: Can list currently loaded modules or all available modules using parameters like -ListAvailable. Example: Get-Module -ListAvailable.





438
Powershell Modules
Get-Command

Definition: A cmdlet that retrieves all commands available in PowerShell, including those from modules.
Explanation: Can be filtered to show commands from a specific module using the -Module parameter. Example: Get-Command -Module Az.





439
Powershell Modules
Module Path

Definition: The directories where PowerShell looks for modules.
Explanation: Can be viewed using the $env:PSModulePath environment variable. PowerShell searches these paths when importing modules.





440
Powershell Modules
AllUsers Scope

Definition: An installation scope that makes a PowerShell module available to all users on the system.
Explanation: When installing a module with -Scope AllUsers, it requires administrative privileges and places the module in a system-wide directory, typically C:\Program Files\PowerShell\Modules.





441
Powershell Modules
Uninstall-Module

Definition: A cmdlet used to remove a module from the system.
Explanation: Example: Uninstall-Module -Name ActiveDirectory removes the ActiveDirectory module.





442
Powershell Modules
Windows System Modules Directory
Definition: A default directory where PowerShell modules are stored for all users.
Explanation: Typically located at C:\Program Files\PowerShell\Modules.





443
Powershell Modules
Pester

Definition: A testing framework for PowerShell.
Explanation: Used for writing and running tests to ensure scripts and modules behave as expected.





444
Powershell Modules
Exporting Functions and Cmdlets
Definition: The process of making functions and cmdlets available to users when a module is imported.
Explanation: Defined in the module's .psm1 file and specified in the module manifest (.psd1) under FunctionsToExport, CmdletsToExport, etc.





445
Powershell Modules
Force Parameter (-Force)

Definition: A parameter used with Import-Module to reload a module even if it's already imported.
Explanation: Useful for ensuring the latest version of a module is loaded or to overwrite existing module imports.





446
Powershell Modules
Module Manifest (.psd1)

Definition: A PowerShell data file that describes the contents and metadata of a module.
Explanation: Includes information like the module version, author, exported functions, dependencies, and more. Essential for publishing and sharing modules.





447
PnP Powershell
Remove-PnPFile (PnP.PowerShell)
Deletes a specified file from a SharePoint library or folder. Useful for automating cleanup tasks or managing outdated documents programmatically.





448
PnP Powershell
New-PnPList (PnP.PowerShell)
Creates a new SharePoint list within a site. Supports specifying list templates, columns, and settings, facilitating automated list management.





449
PnP Powershell
Invoke-RestMethod Parameters
Key parameters include -Method (HTTP method), -Uri (API endpoint), -Headers (authentication and content type), and -Body (data payload), crucial for API interactions.





450
PnP Powershell
Client Secret (client_secret)
A confidential key associated with an Azure AD application, used alongside the client ID to authenticate the application in secure authentication flows.





451
PnP Powershell
SharePoint REST API
A set of web services provided by SharePoint to perform operations like CRUD actions on lists, libraries, and other SharePoint objects using standard HTTP methods.





452
PnP Powershell
Add-PnPUserToGroup (PnP.PowerShell)
Adds a user to a specified SharePoint group. Facilitates automated user management and access control within SharePoint environments.





453
PnP Powershell
SharePoint Site URL
The web address of a SharePoint site (e.g., https://accuityllp.sharepoint.com/sites/ASB), serving as the entry point for accessing site resources and APIs.





454
PnP Powershell
Token Caching
Stores OAuth tokens locally to reduce the need for repeated authentication requests. Enhances script performance and reduces latency in API interactions.





455
PnP Powershell
PSCredential (Microsoft.PowerShell.Security)
A PowerShell object that securely stores a username and password. Utilized for authentication purposes, ensuring sensitive information is handled safely.





456
PnP Powershell
Get-PnPWeb (PnP.PowerShell)
Fetches details about the current SharePoint site, including properties like language, template, and navigation settings. Useful for site audits and management.





457
PnP Powershell
Get-PnPSite (PnP.PowerShell)
Fetches information about the current SharePoint site, including properties like URL, title, and storage usage. Helps in monitoring and managing site configurations.





458
PnP Powershell
Add-PnPFile (PnP.PowerShell)
Uploads a file to a specified SharePoint document library or folder. Supports parameters like -Path for local files and -Stream for uploading via a data stream.





459
PnP Powershell
API Permissions
Permissions granted to an application to access specific APIs like SharePoint or Microsoft Graph. Can be delegated (user-based) or application-level (app-only).





460
PnP Powershell
Add-PnPListItem (PnP.PowerShell)
Adds a new item to a SharePoint list. Enables automated data entry and integration with other systems by programmatically populating list data.





461
PnP Powershell
Scopes
Define the level of access an application has to resources. Examples include Files.ReadWrite.All and Sites.ReadWrite.All, determining what operations the app can perform.





462
PnP Powershell
Parameter Set Conflict
Occurs when incompatible or conflicting parameters are used together in a PowerShell cmdlet, leading to errors as PowerShell cannot determine the intended operation.





463
PnP Powershell
Set-PnPWeb (PnP.PowerShell)
Configures properties of a SharePoint site, such as title, description, and logo. Enables automated site customization and configuration management.





464
PnP Powershell
Update-PnPListItem (PnP.PowerShell)
Modifies an existing item in a SharePoint list. Allows updating fields and properties, supporting dynamic data management and automation.





465
PnP Powershell
Set-PnPFileCheckedIn (PnP.PowerShell)
Checks in a previously uploaded file in SharePoint, optionally adding comments. Essential for managing document versions and maintaining collaboration workflows.





466
PnP Powershell
Get-PnPFile (PnP.PowerShell)
Retrieves a file from a SharePoint document library. Allows downloading files to a local path or accessing file properties and content directly within PowerShell scripts.





467
PnP Powershell
OAuth 2.0 Authorization Code Flow
An interactive authentication method involving user login and authorization, suitable for applications that can securely handle client secrets and require delegated permissions.





468
PnP Powershell
System.IO.File (System.IO)
A PowerShell class providing methods for file manipulation, such as reading, writing, opening, and closing files, essential for handling file operations in scripts.





469
PnP Powershell
Client ID (client_id)
A unique identifier assigned to an Azure AD application upon registration. Used to identify the application during authentication processes.





470
PnP Powershell
Get-PnPConnection (PnP.PowerShell)
Retrieves details about the current PnP.PowerShell connection, including authentication method, scopes, and connection type, aiding in troubleshooting and verification.





471
PnP Powershell
AADSTS7000218 Error
An Azure AD error stating that the authentication request lacks a client_assertion or client_secret, preventing successful token acquisition.





472
PnP Powershell
Remove-PnPListItem (PnP.PowerShell)
Deletes an item from a SharePoint list. Useful for maintaining data integrity and automating data cleanup processes





473
PnP Powershell
Connect-PnPOnline (PnP.PowerShell)
Establishes a connection to a SharePoint site using various authentication methods like client credentials or device code flow, enabling subsequent PnP.PowerShell cmdlets to interact with SharePoint.





474
PnP Powershell
Server Relative URL
The URL path relative to the SharePoint server, excluding the domain (e.g., /sites/ASB/Shared Documents), used in REST API endpoints for precise resource targeting.





475
PnP Powershell
Admin Consent
Approval granted by an Azure AD administrator for an application to access certain resources or perform specific actions, essential for elevated API permissions.





476
PnP Powershell
Azure AD App Registration
The process of registering an application in Azure Active Directory to obtain identifiers like client ID and tenant ID, enabling the app to authenticate and access Microsoft APIs.





477
PnP Powershell
System.IO.Stream (System.IO)
Represents a sequence of bytes, such as a file. Used in PowerShell to handle file data streams for operations like uploading files to SharePoint.





478
PnP Powershell
Remove-PnPUserFromGroup (PnP.PowerShell)
Removes a user from a SharePoint group. Helps in maintaining accurate group memberships and enforcing access policies through scripts.





479
PnP Powershell
Document Library
A SharePoint component where documents are stored, managed, and shared. Examples include "Shared Documents" or custom libraries within a site.





480
PnP Powershell
AppInv.aspx
A SharePoint page used to grant app permissions to specific SharePoint sites, allowing custom or third-party apps to access site resources based on defined permissions.





481
PnP Powershell
Invoke-RestMethod (Microsoft.PowerShell.Utility)
Sends HTTP and HTTPS requests to RESTful APIs and processes the responses. Commonly used for interacting directly with SharePoint REST API in PowerShell scripts.





482
PnP Powershell
OAuth 2.0 Client Credentials Flow
An authentication method where applications authenticate using a client ID and client secret, enabling server-to-server interactions without user involvement.





483
PnP Powershell
Get-PnPGroup (PnP.PowerShell)
Retrieves information about SharePoint groups within a site. Assists in managing permissions and user access by programmatically handling group memberships.





484
PnP Powershell
Throttling in SharePoint
Limits the number of API requests to prevent abuse and ensure service stability. Requires implementing retry logic and handling throttling responses in scripts.





485
Azure Functions + PP365
Fetch API
A modern JavaScript interface for making HTTP requests. Compared to XMLHttpRequest, the Fetch API provides a more powerful and flexible feature set for handling requests and responses, often used in custom scripts within Dynamics 365 to interact with services like Azure Functions securely.





486
Azure Functions + PP365
requirements.txt
A file used in Python projects to list all dependencies and packages required by the application. In Azure Functions, requirements.txt ensures that all necessary Python libraries are installed when deploying functions, maintaining consistency between development and production environments.





487
Azure Functions + PP365
Application Insights
A feature of Azure Monitor that provides extensible application performance management and monitoring. Python Azure Functions integrated with Application Insights can track telemetry data, diagnose issues, and gain insights into function performance and usage patterns, enhancing observability and reliability.





488
Azure Functions + PP365
Dataverse Virtual Entities
Entities in Dataverse that represent data stored outside the platform, accessible as if they were native entities. Virtual Entities allow Dynamics 365 applications to interact with external data sources like Azure Functions or other databases seamlessly, providing a unified data experience without data duplication.





489
Azure Functions + PP365
Environment Variables
Variables set in the operating environment that can be accessed by applications. In Python Azure Functions, environment variables are used to store configuration data, secrets, and connection strings securely, allowing functions to adapt to different environments without code changes.





490
Azure Functions + PP365
Function URL
The endpoint URL assigned to an Azure Function, used to invoke the function via HTTP requests. The Function URL typically includes the function app’s domain and may contain a function key for authentication, enabling secure and targeted access to the function’s operations.





491
Azure Functions + PP365
Remote Debugging
The ability to debug Azure Functions running in Azure from a local development environment. Python developers can use tools like Visual Studio Code to attach debuggers to remote functions, allowing for real-time troubleshooting and issue resolution without affecting the production environment.





492
Azure Functions + PP365
Azure Resource Manager (ARM) Templates
JSON files that define the infrastructure and configuration for Azure resources. Python developers use ARM templates to automate the deployment of Azure Functions and their dependencies, ensuring consistent and repeatable environments for development, testing, and production.





493
Azure Functions + PP365
XMLHttpRequest vs. Fetch API
Both are JavaScript APIs for making HTTP requests from web pages. XMLHttpRequest is older and more verbose, while the Fetch API is modern, promise-based, and provides a more streamlined approach to handling asynchronous requests, making it preferable for integrating custom scripts in Dynamics 365.





494
Azure Functions + PP365
Service Bus Triggers
Triggers that activate Azure Functions in response to messages in Azure Service Bus queues or topics. Python functions with Service Bus triggers can process asynchronous messages, enabling decoupled and scalable communication between different parts of an application or between services.





495
Azure Functions + PP365
Function App Slots
Separate environments within a Function App that allow for staging and testing of functions before swapping them into production. Python developers use deployment slots to validate changes, perform tests, and ensure stability before making updates live, minimizing disruptions and ensuring reliability.





496
Azure Functions + PP365
Azure SDK for Python
A collection of libraries provided by Microsoft to interact with Azure services using Python. The Azure SDK for Python simplifies the integration of Azure Functions with services like Azure Storage, Cosmos DB, and Azure Key Vault, providing robust and consistent APIs for developers.





497
Azure Functions + PP365
Dependency Management
The practice of managing external libraries and packages that a Python application relies on. In Azure Functions, managing dependencies through requirements.txt ensures that all necessary packages are installed and versioned correctly, maintaining consistency between development and production environments.





498
Azure Functions + PP365
HTTP Triggers
A type of function trigger that activates an Azure Function in response to HTTP requests. Python Azure Functions with HTTP triggers can handle RESTful API calls, webhooks, and other HTTP-based interactions, making them suitable for building APIs and integrating with web services.





499
Azure Functions + PP365
Logging
The practice of recording information about the execution of Azure Functions. Python Azure Functions implement logging to track operations, monitor performance, and diagnose issues, utilizing frameworks like Python’s logging module and integrating with Azure’s logging services for centralized monitoring.





500
Azure Functions + PP365
Function.json
A file that defines the bindings and configuration for an individual Azure Function. In Python-based functions, function.json specifies the trigger type, input and output bindings, and other settings, enabling Azure to correctly route events and data to the function.





501
Azure Functions + PP365
GitHub Actions
An automation tool integrated with GitHub that allows developers to create workflows for building, testing, and deploying code. Python Azure Functions can leverage GitHub Actions to implement CI/CD pipelines, enabling seamless integration with source control and automated deployments to Azure.





502
Azure Functions + PP365
Function App Settings
Configuration settings for an Azure Function App that control its behavior and integration with other services. For Python Azure Functions, settings can include environment variables, connection strings, and runtime configurations, enabling customization and secure management of function properties.





503
Azure Functions + PP365
Dynamic Content
Data dynamically pulled from triggers or previous actions in Power Automate flows. Dynamic content allows flows to be flexible and responsive to varying input data, enabling customized and context-aware operations when interacting with services like Azure Functions and Dataverse.





504
Azure Functions + PP365
Function App Name
The unique identifier assigned to an Azure Function App during creation. The Function App Name is used to access and manage the Function App within the Azure Portal, forming part of the default domain for deployed functions (e.g., https://<functionappname>.azurewebsites.net).





505
Azure Functions + PP365
Managed Identity Credential Acquisition
The process by which an Azure service with a managed identity obtains an access token from Azure AD. This token is used to authenticate requests to other Azure services, ensuring secure and seamless communication without the need for manual credential management.





506
Azure Functions + PP365
Function Proxies
A feature in Azure Functions that allows developers to create a façade over one or more functions or APIs. Function Proxies can manage routing, transformation, and composition of requests to Python Azure Functions, simplifying API management and enhancing security by abstracting backend services.





507
Azure Functions + PP365
XMLHttpRequest
A JavaScript API used to send HTTP or HTTPS requests directly from a web page. While commonly used for AJAX calls, in the context of Dynamics 365, it can facilitate communication between custom buttons and external services like Azure Functions without page reloads.





508
Azure Functions + PP365
Azure Functions Development Environment
The setup and tools required to develop Azure Functions locally before deploying them to Azure. For Python developers, this includes an IDE like VS Code, Azure Functions Core Tools, Python runtime, virtual environments, and necessary extensions for seamless development and testing.





509
Azure Functions + PP365
Cold Start
The latency experienced when an Azure Function is invoked after a period of inactivity. Python Azure Functions, especially on Consumption Plans, may experience cold starts, where the platform needs to allocate resources and initialize the function, leading to initial delays before execution.





510
Azure Functions + PP365
Function App Plan
The hosting plan for Azure Functions that determines compute resources, scaling behavior, and pricing. Python Azure Functions can be hosted on different plans, such as Consumption Plans for automatic scaling or Premium Plans for enhanced performance and features, allowing developers to choose based on application needs.





511
Azure Functions + PP365
Azure Function App Logs
Logs generated by Azure Functions that provide insights into function executions, errors, and performance. Python Azure Functions can emit logs to Azure Monitor and Application Insights, enabling developers to monitor, analyze, and optimize function behavior based on comprehensive log data.





512
Azure Functions + PP365
Environment Configuration
The setup of environment-specific settings and variables that dictate how Python Azure Functions operate. Proper environment configuration ensures that functions behave correctly across different stages (development, staging, production), maintaining separation of concerns and enhancing security.





513
Azure Functions + PP365
Power Platform CLI
A command-line interface tool for managing Power Platform resources, including Power Apps, Power Automate, and Dataverse. The Power Platform CLI facilitates automation, scripting, and advanced management tasks, enabling developers and administrators to interact with the platform efficiently.





514
Azure Functions + PP365
Scopes
Permissions in OAuth 2.0 that specify the level of access an application is requesting. Scopes define what actions the application can perform on behalf of the user or service, such as reading data, writing records, or accessing specific APIs, ensuring granular control over permissions.





515
Azure Functions + PP365
Asyncio
A Python library used to write concurrent code using the async/await syntax. In Azure Functions, leveraging asyncio allows Python developers to write non-blocking, asynchronous functions that handle multiple tasks efficiently, improving performance and scalability.





516
Azure Functions + PP365
Local Debugging
Running and testing Azure Functions on a local machine to identify and fix issues before deployment. Python developers use tools like Azure Functions Core Tools and VS Code to debug functions locally, allowing for rapid development and troubleshooting in a controlled environment.





517
Azure Functions + PP365
Azure Functions Premium Plan
A hosting plan for Azure Functions that offers enhanced performance, VNET integration, and advanced features like unlimited execution duration and pre-warmed instances. Python functions hosted on the Premium Plan benefit from reduced cold starts and greater scalability, suitable for enterprise-grade applications.





518
Azure Functions + PP365
OAuth 2.0 Authentication Flow
A sequence of steps in the OAuth 2.0 protocol where an application obtains an access token from an authorization server. This flow involves redirecting users for consent, exchanging authorization codes for tokens, and securely accessing protected resources using the obtained tokens, enabling secure delegation of access.





519
Azure Functions + PP365
Async Programming (Asyncio)
A programming paradigm in Python that enables concurrent execution of code using asynchronous functions and event loops. In Azure Functions, leveraging asyncio can improve performance and scalability by allowing Python functions to handle multiple tasks simultaneously without blocking.





520
Azure Functions + PP365
Redirect URI
A URI in OAuth 2.0 flows where the authorization server redirects the user after authentication. It ensures that tokens are sent to the correct application endpoint, maintaining security by validating the redirect destination during the authentication process.





521
Azure Functions + PP365
Azure AD Grant Admin Consent
The process of obtaining organizational approval for an application’s requested API permissions in Azure AD. Granting admin consent ensures that applications have the necessary permissions to operate within the organization's security policies, enabling seamless and authorized interactions with Azure services.





522
Azure Functions + PP365
Azure AD TokenRequestContext
A context object used in Azure AD token acquisition processes, specifying the scopes and resources for which an access token is requested. TokenRequestContext ensures that tokens are issued with the appropriate permissions and are valid for the intended resources, facilitating secure and targeted access in applications.





523
Azure Functions + PP365
Azure Service Principal
An identity created for use with applications, hosted services, and automated tools to access Azure resources. Service principals enable secure, programmatic access to Azure services, acting as non-human users with specific permissions, essential for authenticating applications like Power Automate and Azure Functions.





524
Azure Functions + PP365
Virtual Environment Activation
The process of activating a Python virtual environmentto  isolate project dependencies. When developing Python Azure Functions, activating the virtual environment ensures that the correct packages are used, preventing conflicts and maintaining a clean development setup.





525
Azure Functions + PP365
Function App Secrets
Sensitive information required by Azure Functions, such as API keys or connection strings. Python Azure Functions manage secrets through environment variables, Azure Key Vault integrations, or managed identities, ensuring that sensitive data is stored securely and accessed only by authorized functions.





526
Azure Functions + PP365
Client Credentials Grant
An OAuth 2.0 authentication flow where an application uses its own credentials (client ID and secret) to obtain an access token. This grant type is used for server-to-server interactions, allowing applications like Azure Functions to authenticate with Azure AD without user involvement.





527
Azure Functions + PP365
local.settings.json
A configuration file used during local development of Azure Functions. It stores environment variables, connection strings, and other settings required to run functions locally. This file is not deployed to Azure, ensuring that sensitive information remains secure during development.





528
Azure Functions + PP365
host.json
A global configuration file for Azure Functions that defines settings applicable to all functions within a Function App. For Python developers, host.json can be used to configure logging, extensions, and other runtime behaviors, enabling centralized control over function execution.





529
Azure Functions + PP365
API Gateway Integration
Connecting Azure Functions with an API gateway to manage and secure API traffic. Integrating with services like Azure API Management allows Python Azure Functions to benefit from features like rate limiting, authentication, and monitoring, enhancing the security and scalability of exposed APIs.





530
Azure Functions + PP365
Function Scale-Out
The ability of Azure Functions to automatically scale the number of function instances based on demand. Python functions benefit from scale-out to handle varying workloads efficiently, ensuring that applications remain responsive and performant under different usage patterns.





531
Azure Functions + PP365
Azure Functions Extensions
Additional modules or packages that extend the capabilities of Azure Functions. For Python developers, extensions can provide support for integrating with other Azure services, enhancing bindings, and adding new triggers, enabling more complex and feature-rich serverless applications.