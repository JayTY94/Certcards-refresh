





1
Open Source/GitHub
PEP 8

Python Enhancement Proposal 8, the style guide for writing clean and readable Python code, outlining conventions for code layout and formatting.





2
Open Source/GitHub
Contribution Guidelines

A set of rules and best practices outlined by a project to ensure consistent and quality contributions from all contributors, often found in CONTRIBUTING.md.





3
WSL + Kali Linux
Wireshark Capture Filter
A set of rules used to filter network traffic before it is captured in Wireshark. Capture filters can limit the types of traffic being collected, making it easier to focus on specific network issues.





4
WSL + Kali Linux
Xorg
The open-source implementation of the X Window System (X11). It provides the graphical server for Unix-like operating systems, handling input, output, and screen display for graphical applications.





5
WSL + Kali Linux
X11 (X Window System)
A graphical windowing system for Unix-like operating systems, providing the foundation for graphical user interfaces. X11 is typically used with Linux systems to handle display rendering and interaction.





6
WSL + Kali Linux
Xfwm4 (XFCE Window Manager)
The window manager for the XFCE desktop environment. It manages window placement, appearance, and focus within the XFCE session.





7
WSL + Kali Linux
D-Bus
A message bus system that allows applications and services to communicate with each other, particularly in Linux-based systems. D-Bus is essential for managing things like user authentication and device notifications in desktop environments.





8
WSL + Kali Linux
WSL Networking
Accessing Windows Network Services from WSL: WSL allows you to access Windows network services and vice versa. For example, you can access a Windows-hosted HTTP server in WSL at localhost:port.
wsl.exe Networking: When WSL 2 is in use, it runs a virtualized network adapter with a different IP address than the host machine, but WSL 2 allows seamless access to services running on the host.





9
Audit Report Tracker (Sharepoint List)
View (SharePoint View)
Definition: A pre-defined display of list data, which can filter, sort, and group information in a specific way.
Context: Views can be customized to show only specific columns, items, or data based on user needs.





10
Audit Report Tracker (Sharepoint List)
List Columns Endpoint (for getting column information in a SharePoint list):

Endpoint: GET https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/columns
Description: Retrieves information about the columns in a specified list.





11
Audit Report Tracker (Sharepoint List)
Create Column in List (for creating new columns in a SharePoint list):

Endpoint: POST https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/columns
Description: Creates a new column in the specified SharePoint list.





12
Audit Report Tracker (Sharepoint List)
Column (SharePoint Column)
Definition: A field in a SharePoint list that holds a specific type of data (e.g., text, number, date, choice).
Context: Columns define the structure of the data within a SharePoint list or library.





13
Audit Report Tracker (Sharepoint List)
List Items Endpoint (for retrieving items in a SharePoint list):

Endpoint: GET https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/items
Description: Retrieves items from a specified SharePoint list.





14
Audit Report Tracker (Sharepoint List)
Graph Explorer
Definition: A tool provided by Microsoft that allows developers to test and experiment with Microsoft Graph API queries directly in the browser.
Context: It helps you quickly interact with Microsoft Graph APIs to retrieve or manipulate SharePoint data without writing full applications.





15
Audit Report Tracker (Sharepoint List)
Content Type (SharePoint)
Definition: A reusable set of columns (fields) and settings in SharePoint that define a specific kind of content (e.g., document, task).
Context: A list can have multiple content types, each with different columns and settings depending on the type of data being tracked.





16
Audit Report Tracker (Sharepoint List)
Create List Item (for creating a new item in a SharePoint list):

Endpoint: POST https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/items
Description: Adds a new item to a specified SharePoint list.





17
Audit Report Tracker (Sharepoint List)
Content Type
Definition: A feature in SharePoint that defines a set of metadata (columns) and behaviors that apply to a certain type of content (e.g., a document, list item).
Context: Helps structure how data is stored and interacted with in SharePoint.





18
Audit Report Tracker (Sharepoint List)
List Views Endpoint (for getting views in a SharePoint list):

Endpoint: GET https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/views
Description: Retrieves the views available in a specified SharePoint list.





19
Audit Report Tracker (Sharepoint List)
List Administrator
Definition: A user with permissions to manage a specific SharePoint list, including adding columns, modifying views, and setting list-specific permissions.
Context: Has permissions to edit and configure a specific list within a site.





20
Email Auth and Security
p=none

A DMARC policy action.
Requests no specific action be taken on unauthenticated emails.
Used for monitoring and gathering data without affecting email delivery.





21
Email Auth and Security
Aggregate Reports

Summary reports sent periodically (usually daily) to domain owners detailing email authentication results.
Provide insights into SPF and DKIM alignment and the overall effectiveness of DMARC policies.
Typically formatted in XML, containing data on email sources, authentication outcomes, and policy actions.





22
Email Auth and Security
SPF (Sender Policy Framework)

A DNS-based email authentication method.
Specifies which mail servers are authorized to send emails on behalf of a domain.
Helps prevent email spoofing by verifying the sender's IP address against the domain's SPF record.





23
Email Auth and Security
DMARC (Domain-based Message Authentication, Reporting & Conformance)

Builds on SPF and DKIM to provide domain owners with policies for handling unauthenticated emails.
Enables reporting on email authentication status and issues.
Protects against unauthorized use of a domain in email communications.





24
Email Auth and Security
Email Authentication Alignment

Ensuring that SPF and DKIM align with the domain specified in the email's "From" header.
Critical for DMARC to function correctly.
Provides consistent authentication results and improves email deliverability.





25
Email Auth and Security
PGP (Pretty Good Privacy)

A data encryption and decryption program that provides cryptographic privacy and authentication.
Used for securing emails through encryption and digital signatures.
Combines symmetric and asymmetric encryption for robust security.





26
Email Auth and Security
Feedback Loops (FBL)

Mechanisms by which email service providers notify senders about spam complaints from recipients.
Allow senders to monitor and address spam-related issues, improving sender reputation and email deliverability.
Implemented through services like Return Path and Feedback Loop (FBL) agreements with ISPs.





27
Email Auth and Security
p=quarantine

A DMARC policy action.
Instructs receiving mail servers to treat unauthenticated emails with suspicion.
Typically places such emails in the spam or junk folder.





28
Email Auth and Security
MX Toolbox

An online suite of tools for diagnosing and analyzing DNS records.
Checks SPF, DKIM, and DMARC configurations.
Helps administrators verify the correctness of their email authentication setups.





29
Email Auth and Security
BIMI (Brand Indicators for Message Identification)

Allows organizations to display their brand logos alongside authenticated emails in recipients' inboxes.
Enhances brand recognition and trust.
Requires proper implementation of SPF, DKIM, and DMARC.





30
Email Auth and Security
MUA (Mail User Agent)

An email client used by end-users to send, receive, and manage their emails.
Provides the interface for users to interact with their email accounts.
Examples include Microsoft Outlook, Mozilla Thunderbird, and Gmail.





31
Email Auth and Security
SMTP (Simple Mail Transfer Protocol)

The standard protocol used for sending emails across the internet.
Facilitates the transmission of email messages from senders to recipients via mail servers.
Includes commands like HELO/EHLO, MAIL FROM, RCPT TO, DATA, and QUIT.





32
Azure AD Authentication
Built-In Roles
Predefined roles like Owner, Contributor, and Reader that grant specific permissions to manage Azure resources at various scopes.





33
Azure AD Authentication
Role Inheritance
Roles assigned at a higher scope (e.g., subscription) are inherited by resources at lower scopes (e.g., resource groups, resources).





34
Azure AD Authentication
Principal
An identity (user, group, service principal) that is granted access to Azure resources based on assigned roles.





35
Azure AD Authentication
Role Assignment
Links a principal (user, group, service principal) to a role at a defined scope, granting specific permissions to interact with Azure resources.





36
Azure AD Authentication
Scope
Defines the level at which a role is applied, such as management group, subscription, resource group, or individual resource. Higher scopes apply to all child resources.





37
Azure AD Authentication
Role Assignment Propagation
Role permissions may take time to propagate across Azure, so changes in role assignments might not be immediately reflected in access control.





38
Azure AD Authentication
Service Principal
A security identity for an app to authenticate and access Azure resources. Used for automated services and applications instead of using user credentials.





39
Azure AD Authentication
Service Principal Authentication Methods
Authentication for service principals can be done using Client Secret, Client Certificate, or Managed Identity, which provides secure, credential-free access to Azure services.





40
Azure AD Authentication
App Registration vs Enterprise Application
App Registration defines the app’s identity, while Enterprise Application represents the actual instance of the app within an Azure AD tenant.





41
Azure AD Authentication
Managed Identities
Azure-managed identities used by Azure resources (like VMs) to authenticate to other Azure services, removing the need to manage credentials.





42
Azure AD Authentication
App Registration
Registers an app in Azure AD, creating its identity to authenticate with Azure services. Allows the app to access resources and interact with Azure services.





43
Azure AD Authentication
Custom Roles
User-defined roles with specific permissions, used when built-in roles don’t provide the required access or for more granular control.





44
Azure AD Authentication
Azure AD Roles vs Azure Resource Roles
Azure AD Roles manage access to directory functions (e.g., Global Administrator), while Resource Roles control access to Azure resources (e.g., Contributor).





45
Azure Functions + Visual Studio
ASP.NET Web Forms is an older way to build web applications, focusing on drag-and-drop components and less code, while ASP.NET MVC offers greater flexibility, control, and a more maintainable approach to building web applications.





46
Azure Functions + Visual Studio
ASP.NET is a powerful framework for building dynamic web applications and services. It runs on the .NET platform, allowing developers to use multiple languages like C#, F#, and VB.NET to create modern web applications.





47
Azure Functions + Visual Studio
ASP.NET offers several state management techniques, including Session State, View State, and Cookies, to retain data across user requests and provide a better user experience on dynamic websites.





48
Azure Functions + Visual Studio
ASP.NET uses a flexible routing system to map URLs to controllers and actions in ASP.NET MVC or ASP.NET Web API applications. This routing system supports custom URL patterns and simplifies URL management.





49
Azure Functions + Visual Studio
ASP.NET Web API is a framework for building HTTP-based services that can be consumed by various clients, including browsers, mobile devices, and other web applications. It’s ideal for creating RESTful services in ASP.NET.





50
Azure Functions + Visual Studio
The ASP.NET MVC architecture is based on the Model-View-Controller pattern, which separates the application into three components: Models (data), Views (UI), and Controllers (logic), providing a clean separation of concerns for better maintainability.





51
Azure Functions + Visual Studio
ASP.NET Core provides built-in Dependency Injection (DI) support, enabling you to manage dependencies in your application. This makes your code more modular, testable, and easier to maintain.





52
Azure Functions + Visual Studio
ASP.NET supports caching to improve performance by reducing database calls and loading times. You can cache data at different levels, such as in-memory caching, distributed caching, or output caching, to increase the responsiveness of your application.





53
Azure Functions + Visual Studio
ASP.NET Razor syntax is a streamlined way to integrate C# code into HTML pages. Razor allows developers to write dynamic web pages by combining HTML and server-side logic seamlessly.





54
Azure Functions + Visual Studio
In all cases, a function is passed an ILogger parameter. The function can use this parameter to write log messages, which the function app writes to storage for later analysis.





55
Azure Functions + Visual Studio
ASP.NET supports asynchronous programming with async and await keywords, allowing non-blocking operations such as file and database access. This improves scalability and performance by freeing up threads during long-running tasks.





56
Azure Functions + Visual Studio
ASP.NET includes a variety of built-in security features such as request validation, input sanitization, SQL injection prevention, and protection against cross-site scripting (XSS) and cross-site request forgery (CSRF). HTTPS and encryption are also supported for secure communication.





57
Azure Functions + Visual Studio
An Azure Function is implemented as a static class (.NET). The class provides a static, asynchronous method named Run, which acts as the entry point for the class. The parameters passed to the Run method provide the context for the trigger. If it's an HTTP trigger, the function receives an HttpRequest object.





58
Logging in Python
Q: What is a common practice for naming loggers within Python modules?

A: Using logging.getLogger(__name__) to automatically name the logger based on the module's name.
This practice ensures that logger names reflect the module structure, aiding in organized logging configurations.





59
Logging in Python
Q: Why is it important to centralize logging configuration in large applications using Python's logging module?

A: Centralizing logging configuration ensures consistency, makes it easier to manage, and prevents scattered and conflicting logging setups across different modules.
This approach streamlines logging management and enhances maintainability.





60
Logging in Python
Q: How can you prevent log messages from bubbling up to parent loggers in Python's logging module?

A: By setting propagate=False on the child logger.
This stops the log messages from being handled by ancestor loggers, ensuring they are processed only by the child logger's handlers.





61
Logging in Python
Q: If a child logger has propagate set to False, what does this mean?

A: It will not pass log messages to the parent logger.
This isolates the logger, ensuring that messages are handled only by its own handlers.





62
Logging in Python
Q: What does the backupCount parameter do in RotatingFileHandler from the logging.handlers module?

A: It specifies the number of backup log files to keep after rotation, such as backupCount=5.
This limits the number of rotated files retained, managing disk space usage.





63
Logging in Python
Q: What is one advantage of using structured logging libraries like Structlog over Python's built-in logging module?

A: Structured logging facilitates easier parsing, querying, and analysis of log data, especially when integrating with log management systems.
This is particularly useful for applications that require detailed and machine-readable log formats.





64
Logging in Python
Q: Why might you choose to use Loguru over Python's built-in logging module?

A: For simpler syntax, reduced boilerplate, and additional features like colorized output and automatic exception logging.
Loguru offers a more user-friendly and modern interface compared to the standard logging module.





65
Logging in Python
Q: What is one advantage of using dictConfig over fileConfig for logging configuration in Python's logging module?

A: dictConfig allows for more complex and dynamic configurations, often being easier to manage programmatically.
This flexibility makes it suitable for applications that require runtime logging configuration changes.





66
Logging in Python
Q: What is the impact of setting a logger's level higher than its handler's level in Python's logging module?

A: Log messages must meet or exceed the logger's level to be processed by the handler, regardless of the handler's own level.
This means that even if a handler is set to a lower level, it won't handle messages below the logger's threshold.





67
Logging in Python
Q: What is the default formatter format string if none is specified in logging.basicConfig()?

A: '%(levelname)s:%(name)s:%(message)s'
This default format includes the log level, logger name, and the log message.





68
Logging in Python
Q: What is the significance of the level parameter when configuring a logger or handler in Python's logging module?

A: It sets the minimum severity of log messages that will be processed; messages below this level are ignored.
For example, setting level=logging.INFO means that DEBUG messages will be ignored.





69
Logging in Python
Q: What is a NullHandler used for in Python's logging module?

A: To discard log messages, preventing "No handler" warnings in library code.
This is useful for libraries to ensure they don't interfere with the application's logging configuration.





70
Logging in Python
Q: What is the purpose of a Formatter in Python's logging module?

A: To define the structure and content of log messages using formats like '%(asctime)s - %(levelname)s - %(message)s'.
This ensures that log messages are consistently formatted for readability and analysis.





71
Logging in Python
Q: What is the role of a Formatter in a logging handler within Python's logging module?

A: To specify the layout and content of the log messages, such as including timestamps, log levels, and message text.
Formatters ensure that log messages are consistently structured for readability and analysis.





72
RAG Project
test_client()
A method on a Quart app that gives you a fake browser-like interface to make test requests like client.get("/endpoint").





73
RAG Project
__init__.py
A special file that makes a directory a Python package (so it can be imported).





74
RAG Project
ASGI
Asynchronous Server Gateway Interface — allows async Python web apps to talk to servers. Quart apps are ASGI apps.





75
RAG Project
Quart
A Python web framework like Flask but with full support for async/await. Used to build async HTTP APIs.





76
RAG Project
pytest.mark.asyncio
A decorator that marks a test function as asynchronous so you can use await inside it. Required when testing Quart or anything async.





77
RAG Project
Factory Function (create_app)
A function that sets up and returns a fully configured app instance. Used to cleanly separate setup from execution and enable testing.





78
RAG Project
Config Object
A centralized dictionary or structure that stores runtime settings and credentials for your app.





79
RAG Project
Patch / Monkeypatch
Temporary override of code behavior during tests — often used to replace Azure calls with mocks.





80
RAG Project
Test Client
A simulated web client that sends fake HTTP requests to your app (e.g., client.post("/ask")).





81
RAG Project
Fixture
A reusable setup block in pytest that prepares resources (e.g., a test client or mock blob).





82
RAG Project
Access Control
Logic that determines who can access which resources or files.





83
RAG Project
Blueprint
A modular way to organize route handlers in Quart/Flask apps. Lets you split up your app by function (e.g., chat, upload).





84
RAG Project
async / await
Keywords in Python for writing non-blocking, asynchronous code.





85
RAG Project
Object ID (OID)
Unique identifier for a user in Azure AD, used to scope their files or actions.





86
RAG Project
auth_client
A special fixture often defined in conftest.py that returns a test client with fake authentication already set up.





87
RAG Project
OIDC / Entra ID
Authentication standards used by Azure for signing in users.





88
Debugging in VS Code
1. Debugger
A tool used to inspect, control, and modify the execution of a program in order to identify and fix bugs.
2. Breakpoint
A marker set in a program that causes the execution to pause so that the developer can inspect the program’s state.





89
Debugging in VS Code
Hot Reloading
A feature in some debuggers and IDEs that allows you to modify and reload parts of your code while the program is running, enabling you to see the changes in real time without restarting the application.





90
Debugging in VS Code
Call Stack
A data structure that stores the sequence of function calls made in a program, showing the order in which they were called.





91
Debugging in VS Code
Watchpoint
A debugging feature that pauses execution when the value of a specific variable changes, similar to a breakpoint but focused on value changes rather than specific lines of code.





92
Debugging in VS Code
Watch Expression
A tool in a debugger that allows you to monitor the value of a specific variable or expression during execution.





93
Debugging in VS Code
Step Out
A debugging feature that lets you exit the current function and return to the function that called it.





94
Debugging in VS Code
Live Debugging
A type of debugging where changes are made to the program and tested while it is running in a live environment, often used in web development and real-time applications.





95
Debugging in VS Code
Debug Console
A tool within a development environment used to evaluate expressions, view output, or interact with a running program during debugging.





96
Debugging in VS Code
Symbolic Debugging
A debugging technique that uses debug symbols (which provide additional information like variable names, function names, and line numbers) to make debugging more understandable and precise, often used in conjunction with compiled languages.





97
Debugging in VS Code
Step Into
A debugging feature that allows you to enter a function call to examine its internal execution line by line.





98
Debugging in VS Code
Exception Breakpoint
A breakpoint that pauses the program when a specific exception (error) is raised.





99
Debugging in VS Code
Step Over
A debugging feature that allows you to skip over a function call, running it entirely without entering it.





100
Debugging in VS Code
Stack Trace
A report that provides detailed information about the sequence of function calls and the state of the program at the point where an error occurred. It's often used to diagnose issues in the execution flow.





101
Debugging in VS Code
Conditional Breakpoint
A breakpoint that only pauses execution when a specific condition is met (e.g., when a variable reaches a certain value).





102
Debugging in VS Code
Reverse Debugging
A debugging technique where you can move backward through the program’s execution to examine the program's state before an issue occurred, often helpful for tracking down bugs that involve complex states.





103
Debugging in VS Code
Code Coverage
The process of determining which parts of your code have been executed during testing or debugging, helping to identify untested areas and ensure comprehensive testing.





104
Debugging in VS Code
Profiling
The process of analyzing the performance of a program, including memory usage, execution time, and function calls, to identify bottlenecks and optimize performance.





105
Azure Private DNS
Record Set
Definition: A collection of DNS records for a specific hostname within a DNS zone.
Feature: Azure allows you to create and manage various types of record sets, including A, AAAA, CNAME, MX, PTR, and SOA, within Private DNS Zones.





106
Azure Private DNS
CNAME Record (Canonical Name Record):
Definition: A DNS record that maps one domain name to another domain name (aliasing).
Feature: Azure supports CNAME records, which allow you to alias internal resources, like services, within a Private DNS Zone.





107
Azure Private DNS
Public DNS Zone
Definition: A DNS zone used for resolving publicly accessible resources on the internet.
Feature: While Azure Private DNS is for internal use, Public DNS Zones can be used in conjunction to handle external-facing resources.





108
Azure Private DNS
Hybrid DNS
Definition: A DNS architecture that combines Azure DNS (Private and Public) with on-premises DNS services.
Feature: Azure Private DNS allows integration with hybrid DNS setups, where DNS queries can be resolved both within Azure and on-premises, facilitating a seamless DNS experience across environments.





109
Azure Private DNS
Virtual Network Link
Definition: A configuration that links an Azure Virtual Network to a Private DNS Zone, enabling DNS resolution for resources within that VNet.
Feature: Virtual Network Links are a key feature that enables integration between Azure VNets and Private DNS Zones, allowing internal resources to resolve DNS names.





110
Azure Private DNS
DNS Proxy
Definition: A feature that allows DNS queries to be redirected from Azure resources to custom DNS servers.
Feature: DNS Proxy provides greater flexibility by enabling the use of your own DNS servers within your Azure environment.





111
Azure Private DNS
Private DNS Zone:
Definition: A container within Azure that holds DNS records for a private domain, resolvable only within the associated Azure Virtual Networks (VNets).
Feature: Azure Private DNS Zones allow automatic DNS resolution for internal resources within Azure, simplifying DNS management for internal services.





112
Azure Private DNS
DNS Conditional Forwarding
Definition: A feature that forwards DNS queries based on the domain being requested.
Feature: Azure supports DNS conditional forwarding to allow DNS queries for specific domains to be forwarded to a designated DNS server, often useful in hybrid cloud scenarios.





113
Azure Private DNS
Split-Horizon DNS
Definition: A DNS setup where different DNS records are provided based on the requester's location.
Feature: Azure Private DNS can be used to implement split-horizon DNS, where the same domain name resolves differently for internal (private) and external (public) users.





114
Azure Private DNS
Automatic DNS Record Management
Definition: A feature of Azure Private DNS that automatically manages DNS records for Azure resources.
Feature: Automatic DNS Record Management makes it easier to manage internal DNS records by automatically registering records for Azure resources such as VMs or load balancers in the Private DNS Zone.





115
Azure Private DNS
PTR Record (Pointer Record):
Definition: A DNS record that resolves an IP address to a domain name, typically used for reverse lookups.
Feature: Azure supports PTR records for reverse DNS lookups within a Private DNS Zone, which helps with troubleshooting and security.





116
Azure Private DNS
DNS Zones Delegation
Definition: The process of delegating authority for a DNS zone to another DNS server.
Feature: Delegation in Azure enables hybrid DNS setups and can be used to delegate the management of specific domains within your DNS infrastructure.





117
Azure Private DNS
SOA Record (Start of Authority Record):
Definition: A DNS record that defines the authoritative DNS server for a domain, along with other administrative data.
Feature: Azure automatically manages SOA records for each Private DNS Zone to define the authoritative source for that zone.





118
Azure Private DNS
Azure Network Security Groups (NSG)
Definition: A set of rules used to control network traffic to and from Azure resources.
Feature: While NSGs are not directly involved in DNS, they are often used to secure the traffic to DNS servers (whether private or custom) in Azure, including DNS queries.





119
Azure Private DNS
Dynamic DNS (DDNS)
Definition: A DNS service that automatically updates DNS records when an IP address changes.
Feature: Dynamic DNS in Azure Private DNS helps automatically update DNS records (e.g., when VM IP addresses change) without manual intervention.





120
Azure Private DNS
Azure DNS Resolver
Definition: The internal DNS resolver provided by Azure for resolving domain names within Azure services.
Feature: The Azure DNS Resolver resolves DNS queries for resources in the linked VNets and provides an efficient mechanism for internal DNS management.





121
Azure Private DNS
Registration-Enabled
Definition: A setting that allows Azure to automatically create DNS records (e.g., A records) for VMs in the linked Private DNS Zone.
Feature: Registration-Enabled enables automatic DNS record creation for VMs that are deployed within a linked VNet, making it easier to resolve VM hostnames without manual intervention.





122
Azure Private DNS
Custom DNS Server
Definition: A DNS server specified for use in the VNet settings instead of the default Azure DNS.
Feature: Custom DNS servers can be used in combination with Azure Private DNS if you need to resolve DNS queries using on-premises or third-party DNS infrastructure.





123
Azure Private DNS
MX Record (Mail Exchange Record):
Definition: A DNS record that specifies the mail servers responsible for receiving email on behalf of a domain.
Feature: You can use MX records in your Private DNS Zone to manage email services for internal applications.





124
Azure Functions + PP365
HTTP Triggers
A type of function trigger that activates an Azure Function in response to HTTP requests. Python Azure Functions with HTTP triggers can handle RESTful API calls, webhooks, and other HTTP-based interactions, making them suitable for building APIs and integrating with web services.





125
Azure Functions + PP365
Virtual Environment Activation
The process of activating a Python virtual environment to isolate project dependencies. When developing Python Azure Functions, activating the virtual environment ensures that the correct packages are used, preventing conflicts and maintaining a clean development setup.





126
Azure Functions + PP365
Function App Settings
Configuration settings for an Azure Function App that control its behavior and integration with other services. For Python Azure Functions, settings can include environment variables, connection strings, and runtime configurations, enabling customization and secure management of function properties.





127
Azure Functions + PP365
Power Platform CLI
A command-line interface tool for managing Power Platform resources, including Power Apps, Power Automate, and Dataverse. The Power Platform CLI facilitates automation, scripting, and advanced management tasks, enabling developers and administrators to interact with the platform efficiently.





128
Azure Functions + PP365
Async Programming (Asyncio)
A programming paradigm in Python that enables concurrent execution of code using asynchronous functions and event loops. In Azure Functions, leveraging asyncio can improve performance and scalability by allowing Python functions to handle multiple tasks simultaneously without blocking.





129
Azure Functions + PP365
Azure AD TokenRequestContext
A context object used in Azure AD token acquisition processes, specifying the scopes and resources for which an access token is requested. TokenRequestContext ensures that tokens are issued with the appropriate permissions and are valid for the intended resources, facilitating secure and targeted access in applications.





130
Azure Functions + PP365
Service Bus Triggers
Triggers that activate Azure Functions in response to messages in Azure Service Bus queues or topics. Python functions with Service Bus triggers can process asynchronous messages, enabling decoupled and scalable communication between different parts of an application or between services.





131
Azure Functions + PP365
Function Proxies
A feature in Azure Functions that allows developers to create a façade over one or more functions or APIs. Function Proxies can manage routing, transformation, and composition of requests to Python Azure Functions, simplifying API management and enhancing security by abstracting backend services.





132
Azure Functions + PP365
XMLHttpRequest vs. Fetch API
Both are JavaScript APIs for making HTTP requests from web pages. XMLHttpRequest is older and more verbose, while the Fetch API is modern, promise-based, and provides a more streamlined approach to handling asynchronous requests, making it preferable for integrating custom scripts in Dynamics 365.





133
Azure Functions + PP365
OAuth 2.0 Authentication Flow
A sequence of steps in the OAuth 2.0 protocol where an application obtains an access token from an authorization server. This flow involves redirecting users for consent, exchanging authorization codes for tokens, and securely accessing protected resources using the obtained tokens, enabling secure delegation of access.





134
Azure Functions + PP365
Azure AD Grant Admin Consent
The process of obtaining organizational approval for an application’s requested API permissions in Azure AD. Granting admin consent ensures that applications have the necessary permissions to operate within the organization's security policies, enabling seamless and authorized interactions with Azure services.





135
Azure Functions + PP365
API Gateway Integration
Connecting Azure Functions with an API gateway to manage and secure API traffic. Integrating with services like Azure API Management allows Python Azure Functions to benefit from features like rate limiting, authentication, and monitoring, enhancing the security and scalability of exposed APIs.





136
Azure Functions + PP365
Azure Service Principal
An identity created for use with applications, hosted services, and automated tools to access Azure resources. Service principals enable secure, programmatic access to Azure services, acting as non-human users with specific permissions, essential for authenticating applications like Power Automate and Azure Functions.





137
Azure Functions + PP365
Function App Secrets
Sensitive information required by Azure Functions, such as API keys or connection strings. Python Azure Functions manage secrets through environment variables, Azure Key Vault integrations, or managed identities, ensuring that sensitive data is stored securely and accessed only by authorized functions.





138
Azure Functions + PP365
Azure Functions Extensions
Additional modules or packages that extend the capabilities of Azure Functions. For Python developers, extensions can provide support for integrating with other Azure services, enhancing bindings, and adding new triggers, enabling more complex and feature-rich serverless applications.





139
Azure Functions + PP365
Local Debugging
Running and testing Azure Functions on a local machine to identify and fix issues before deployment. Python developers use tools like Azure Functions Core Tools and VS Code to debug functions locally, allowing for rapid development and troubleshooting in a controlled environment.





140
Azure Functions + PP365
Dependency Management
The practice of managing external libraries and packages that a Python application relies on. In Azure Functions, managing dependencies through requirements.txt ensures that all necessary packages are installed and versioned correctly, maintaining consistency between development and production environments.





141
Azure Functions + PP365
Environment Variables
Variables set in the operating environment that can be accessed by applications. In Python Azure Functions, environment variables are used to store configuration data, secrets, and connection strings securely, allowing functions to adapt to different environments without code changes.





142
Azure Functions + PP365
local.settings.json
A configuration file used during local development of Azure Functions. It stores environment variables, connection strings, and other settings required to run functions locally. This file is not deployed to Azure, ensuring that sensitive information remains secure during development.





143
Azure Functions + PP365
host.json
A global configuration file for Azure Functions that defines settings applicable to all functions within a Function App. For Python developers, host.json can be used to configure logging, extensions, and other runtime behaviors, enabling centralized control over function execution.





144
Azure Functions + PP365
Dynamic Content
Data dynamically pulled from triggers or previous actions in Power Automate flows. Dynamic content allows flows to be flexible and responsive to varying input data, enabling customized and context-aware operations when interacting with services like Azure Functions and Dataverse.





145
Terraform
Variable Declaration:
Use the variable block to declare variables. For example:

variable "env" {
  description = "The deployment environment"
  type        = string
}





146
Terraform
terraform validate:
A CLI command that checks the syntax and internal consistency of your Terraform files without connecting to remote services. Use it to catch errors before applying any changes.





147
Terraform
Terraform Console:
Definition: An interactive command-line tool that lets you experiment with expressions and inspect your current Terraform state.
Usage: Run terraform console to evaluate expressions, test functions, or debug variable values interactively.





148
Terraform
You can create and use Terraform modules that codify the standards for deploying and managing services in your organization, allowing teams to efficiently deploy services in compliance with your organization’s practices.





149
Terraform
Built-In Functions:
Definition: Terraform provides functions for manipulating data types like strings, lists, and maps.
Usage: Essential for transforming and preparing data for resource configurations.

Examples:
join(separator, list): Concatenates list elements.
h
Copy
"${join(",", var.instance_ids)}"
split(delimiter, string): Splits a string into a list.
lookup(map, key, default): Retrieves a value from a map.





150
Terraform
Dynamic Blocks:
Definition: Allow you to construct nested blocks dynamically based on complex data structures.
Usage: Ideal for when the number of nested blocks is not fixed and depends on variable data.

Example:

dynamic "ingress" {
  for_each = var.ingress_rules
  content {
    from_port = ingress.value.from
    to_port   = ingress.value.to
    protocol  = ingress.value.protocol
  }
}





151
Terraform
Double Quotes vs. Single Quotes:

Double Quotes (" "): Allow variable interpolation.
Single Quotes (' '): Do not interpolate variables; they treat the content as a literal string.





152
Terraform
Meta-Arguments:
Definition: Special arguments like count, depends_on, and lifecycle that control resource behavior and relationships.
Count: Enables creating multiple instances of a resource.

resource "aws_instance" "web" {
  count = var.instance_count
  # Other configuration...
}





153
Terraform
Variable References:
Refer to variables using the var. prefix within interpolation expressions. For example:

${var.env}





154
Terraform
At a large organization, your centralized operations team may get many repetitive infrastructure requests. You can use Terraform to build a "self-serve" infrastructure model that lets product teams manage their own infrastructure independently.





155
Terraform
Terraform allows you to manage the resources in each tier together, and automatically handles dependencies between tiers. For example, Terraform will deploy a database tier before provisioning the web servers that depend on it.





156
Terraform
Provisioning infrastructure across multiple clouds increases fault-tolerance, allowing for more graceful recovery from cloud provider outages. However, multi-cloud deployments add complexity because each provider has its own interfaces, tools, and workflows. Terraform lets you use the same workflow to manage multiple providers and handle cross-cloud dependencies.





157
Terraform
Debugging Tips:
Check Quotes: Ensure that you use double quotes for strings that require interpolation.
Use terraform validate: Run this command frequently to catch syntax issues early.
Review Variable References: Confirm that all variable references use the correct var. prefix.





158
Terraform
List and Map Indexing:
Access elements within lists or maps using square brackets.

List Example:
${var.instance_ids[0]}

Map Example:
${var.settings["key_name"]}





159
Terraform
Local Values:
Definition: Local values allow you to define computed variables within a configuration to simplify expressions or avoid repetition.
Usage: Useful for intermediate calculations or to centralize common values.

Example:

locals {
  app_name = "myapp"
  instance_count = length(var.instance_ids)
}





160
Terraform
For Expressions:

Definition: These are used to transform or filter collections (lists or maps) inline.
Usage: Useful for generating new lists or maps based on existing ones without using external loops.
Example:

[for instance in var.instances : instance.id]





161
Terraform
Ternary Operator (Conditional Expression):
A shorthand for conditional logic in interpolation.

Syntax:
${condition ? "true_value" : "false_value"}

Example:
${var.env == "prod" ? "Production" : "Non-production"}





162
Terraform
Ticket-based review processes are a bottleneck that can slow down development. Instead, you can use Sentinel, a policy-as-code framework, to automatically enforce compliance and governance policies before Terraform makes infrastructure changes. Sentinel policies are available in Terraform Enterprise and HCP Terraform.





163
Terraform
Remote Backends and Interpolation:
Definition: Terraform can store state remotely (e.g., in AWS S3, Azure Blob Storage). Variable interpolation may be used to configure these backends dynamically.
Example:

terraform {
  backend "s3" {
    bucket = var.state_bucket
    key    = "path/to/my/key"
    region = var.region
  }
}





164
Terraform
Debugging with TF_LOG:

Definition: Setting the TF_LOG environment variable enables detailed logging for troubleshooting.
Usage: Helps trace issues during plan or apply phases by providing verbose output.

Example:
export TF_LOG=DEBUG





165
Terraform
Network Infrastructure Automation (NIA) allows you to safely approve the changes that your applications require without having to manually translate tickets from developers into the changes you think their applications need.





166
Terraform
Configuration Blocks:
These are the building blocks of Terraform code, such as resource, module, provider, and output blocks.





167
Terraform
Splat Operator:
Definition: The splat operator (*) extracts attributes from every element in a list of resources.
Usage: Handy for working with multiple resource instances in a compact way.
Example:

"${aws_instance.web.*.id}"





168
Terraform
Expressions and Operators:
Definition: Terraform uses expressions to compute values. These support arithmetic operations, string concatenation, and comparisons.
Usage: Allows dynamic configuration based on variable values or conditions.

Example:


"${var.a + var.b}"
"${var.env == "prod" ? "Production" : "Staging"}"





169
Azure DevOps Pipelines
What does the jobs keyword in Azure DevOps YAML define?
Answer: It defines a set of jobs that run in the pipeline. Each job can contain steps, and jobs can be executed in parallel or sequentially based on dependencies.





170
Azure DevOps Pipelines
What is the purpose of the 'checkout' step in an Azure DevOps YAML pipeline?
Answer: It checks out the source code from the repository for use in the pipeline.





171
Azure DevOps Pipelines
How do you add a manual approval gate before a pipeline proceeds to the next stage?
Answer: Set a ApprovalRequired flag on the pipeline's stages.





172
Azure DevOps Pipelines
In Azure DevOps, what command is used to run a pipeline manually from the Azure DevOps portal?
Answer: "Run pipeline" button in the Azure DevOps portal.





173
Azure DevOps Pipelines
How do you use stages with dependencies in Azure DevOps YAML pipelines?
Answer: You can define dependsOn between stages to specify the execution order. Stages will run sequentially based on the dependencies defined, ensuring that one stage only runs after another has completed.





174
Azure DevOps Pipelines
What is the default trigger for a YAML-based pipeline in Azure DevOps?
Answer: A trigger based on code changes in a Git repository.





175
Azure DevOps Pipelines
What is the purpose of the dependsOn keyword in Azure DevOps YAML pipelines?
Answer: It specifies the order in which stages or jobs will execute.





176
Azure DevOps Pipelines
In Azure DevOps, what is the use of the strategy keyword in a pipeline matrix?
Answer: The strategy keyword allows you to define different combinations of variables or configurations for matrix jobs, enabling parallel execution with different environments or settings.





177
Azure DevOps Pipelines
What is the main purpose of a YAML file in Azure DevOps pipelines?
Answer: To define and configure pipeline processes, including steps, tasks, and environments.





178
Azure DevOps Pipelines
What is the purpose of the trigger: none keyword in an Azure DevOps YAML pipeline?
Answer: It disables automatic triggers, meaning the pipeline will not run automatically on code changes. This is useful for manual execution or scheduled runs.





179
Azure DevOps Pipelines
What does the trigger keyword do in an Azure DevOps YAML pipeline?
Answer: It defines the branches or events that will cause the pipeline to run, such as a commit to a specific branch.





180
Azure DevOps Pipelines
How can you pass secrets securely in Azure DevOps YAML pipelines?
Answer: You pass secrets using pipeline variables marked as secret in Azure DevOps. They are referenced in the YAML file as $(secret_variable) but are masked and not exposed in logs.





181
Azure DevOps Pipelines
How can you specify which agent pool should be used in a YAML pipeline file?
Answer: pool: <agent_pool_name>





182
Azure DevOps Pipelines
What is the default working directory for a pipeline job in Azure DevOps?
Answer: $(Build.SourcesDirectory)





183
Azure DevOps Pipelines
How do you cache dependencies in Azure DevOps pipelines to speed up builds?
Answer: Use the cache task in the YAML file to store and reuse files between pipeline runs. This can help speed up build times by caching dependencies.





184
Azure DevOps Pipelines
Which YAML element in an Azure DevOps pipeline defines the steps or tasks to be executed?
Answer: steps





185
Azure DevOps Pipelines
How do you specify a condition for a job or stage to run in an Azure DevOps YAML pipeline?
Answer: You use the condition keyword, such as condition: succeeded() to define when a job should run based on the status of previous jobs.





186
Azure DevOps Pipelines
What does the resources keyword define in a YAML pipeline?
Answer: The resources keyword allows you to define external resources such as repositories, containers, or pipelines that a pipeline will use or depend on.





187
Azure DevOps Pipelines
How do you run a pipeline on a self-hosted agent in Azure DevOps?
Answer: pool: self-hosted





188
Azure DevOps Pipelines
What does the 'trigger' keyword do in an Azure DevOps YAML pipeline?
Answer: Defines the branches or events that will cause the pipeline to run, such as a commit to a specific branch.





189
Azure DevOps Pipelines
How do you specify a deployment environment like 'staging' or 'production' in a YAML pipeline?
Answer: Use the environment keyword, e.g., environment: 'staging'.





190
Azure DevOps Pipelines
What keyword is used to define multiple steps that should run in parallel in Azure DevOps YAML pipelines?
Answer: matrix





191
Azure DevOps Pipelines
What does the 'variables' keyword do in a YAML pipeline?
Answer: It declares the variables that can be used throughout the pipeline.





192
Azure DevOps Pipelines
What is a Deployment Pool in Azure DevOps?
Answer: A Deployment Pool is a set of environments where deployments occur. You can configure and target specific deployment pools for releases to ensure the proper deployment environment is used.





193
Azure DevOps Pipelines
How can you trigger a pipeline based on a Git tag in Azure DevOps?
Answer: You use the trigger keyword with the tags sub-keyword to specify that the pipeline should trigger when a Git tag is pushed.

Example:
trigger:
  tags:
    include:
      - v*





194
Azure DevOps Pipelines
In an Azure DevOps pipeline, which YAML syntax would you use to reference a variable?
Answer: $(variable_name)





195
C# Basics
Inheritance allows one class to inherit members (fields, properties, methods) from another class.
Example:
public class Animal {
    public void Speak() {
        Console.WriteLine("Animal speaks");
    }
}





196
C# Basics
Events use delegates to provide a way for a class to notify other classes when something happens.
Example:
public delegate void EventHandler();

public class Publisher {
    public event EventHandler Notify;    
    public void RaiseEvent() {
        Notify?.Invoke();
    }
}
public class Subscriber {
    public void OnNotify() {
        Console.WriteLine("Event triggered!");
    }
}





197
C# Basics
What are the key access modifiers in C#?

public: Accessible anywhere.
private: Accessible only within the same class.
protected: Accessible within the same class and derived classes.
internal: Accessible within the same assembly.





198
C# Basics
Extension methods allow you to add functionality to existing types without modifying their source code.
Example:
public static class StringExtensions {
    public static bool IsNullOrEmpty(this string str) {
        return string.IsNullOrEmpty(str);
    }
}





199
C# Basics
What is the role of namespaces in C#?

C#: Namespaces organize classes, structs, and other types into logical groups.
Example:
using System;
using System.Linq;





200
C# Basics
How do basic data types work in C#?

C#: Statically typed, types must be explicitly declared.
Example:
int x = 10;  
string y = "Hello";





201
C# Basics
.NET uses a garbage collector that automatically manages memory. The GC.Collect() method can be called manually if needed, but generally not required.
This revised set focuses solely on C#/.NET concepts without the Python comparison, making it more focused on learning C# directly.





202
C# Basics
Tuples allow grouping multiple values into a single object without defining a class.
Example:
var person = (Name: "John", Age: 30);
Console.WriteLine(person.Name);  // Output: John





203
C# Basics
How do you handle exceptions in C#?

C#:
try {
    int x = 1 / 0;
}
catch (DivideByZeroException) {
    Console.WriteLine("Cannot divide by zero");
}





204
C# Basics
How is inheritance implemented in C#?

public class Dog : Animal {
    public void Bark() {
        Console.WriteLine("Dog barks");
    }
}





205
C# Basics
What is the basic syntax for declaring a variable in C#?

C#:
int x = 10;





206
C# Basics
An enum is a distinct value type that defines a set of named constants.
Example:
public enum Day { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday }

Day today = Day.Monday;





207
C# Basics
What are common libraries and frameworks in C#/.NET?

Web: ASP.NET, Blazor.
Data: LINQ, Entity Framework.
UI: Windows Forms, WPF.





208
C# Basics
How is a class defined in C#?

C#:
public class Dog {
    public string Name { get; set; }
    
    public Dog(string name) {
        Name = name;
    }
}





209
C# Basics
What is LINQ in C# and how is it used?

C#:
LINQ (Language Integrated Query) is used to query collections in a declarative way.
Example:
var squares = from x in Enumerable.Range(0, 5) select x * x;





210
C# Basics
Lambda expressions provide a concise way to represent anonymous methods.
Example:
Func<int, int, int> add = (x, y) => x + y;





211
C# Basics
How do you use LINQ methods like Select, Where, and OrderBy in C#?

C#: LINQ methods provide a concise way to query and manipulate collections.
Example:
var numbers = new List<int> { 1, 2, 3, 4, 5 };
var evenNumbers = numbers.Where(n => n % 2 == 0).OrderBy(n => n);





212
C# Basics
What’s the difference between delegates and events in C#?

C#: A delegate is a type that holds references to methods, while an event is a special type of delegate that can only be invoked by the class that declares it, enforcing encapsulation.
Example:
public delegate void MyEvent();
public event MyEvent EventTriggered;





213
C# Basics
A constructor is a special method used to initialize an object when it is created.
Example:
public class Car {
    public string Model { get; set; }
    
    public Car(string model) {
        Model = model;
    }
}





214
C# Basics
How do you write an if-statement in C#?

C#:
if (x > 10) {
    Console.WriteLine("x is greater than 10");
}





215
C# Basics
An interface defines a contract that classes must implement. It can contain methods, properties, and events.
Example:
public interface IAnimal {
    void Speak();
}

public class Dog : IAnimal {
    public void Speak() {
        Console.WriteLine("Dog barks");
    }
}





216
C# Basics
How does asynchronous programming work in C#?

C#: Asynchronous programming is implemented using async and await.
Example:
public async Task<string> FetchData() {
    await Task.Delay(1000);
    return "Data fetched";
}





217
C# Basics
Reflection allows you to inspect the metadata of types (classes, properties, methods, etc.) at runtime.
Example:
var type = typeof(String);
Console.WriteLine(type.FullName);  // Output: System.String





218
C# Basics
How do nullable types work in C#?

C#: Nullable types allow value types (like int) to represent null in addition to their normal range of values.
Example:
int? x = null;





219
C# Basics
Indexers allow objects to be indexed like arrays. They enable you to access elements in an object using the array-like syntax.
Example:
public class Student {
    private string[] grades = new string[3];

    public string this[int index] {
        get { return grades[index]; }
        set { grades[index] = value; }
    }
}





220
C# Basics
C#: Delegates are type-safe function pointers, allowing methods to be passed as parameters.
Example:
delegate void GreetDelegate();

GreetDelegate greet = () => Console.WriteLine("Hello!");
greet();





221
C# Basics
What are static classes and methods in C#?

C#: A static class cannot be instantiated. Static members belong to the type itself, not an instance.
Example:
public static class MathUtils {
    public static int Add(int x, int y) {
        return x + y;
    }
}





222
C# Basics
What is the concept of properties in C#?

C#: Properties allow getting/setting fields with control.
Example:
public class Person {
    private string _name;
    public string Name {
        get { return _name; }
        set { _name = value; }
    }
}





223
C# Basics
What is the syntax for a for loop in C#?

C#:
for (int i = 0; i < 5; i++) {
    Console.WriteLine(i);
}





224
C# Basics
Generics allow you to define classes, methods, or data structures with type parameters, enabling type safety and reusability.
Example:
public class Box<T> {
    public T Value { get; set; }
}

var intBox = new Box<int> { Value = 10 };





225
C# Basics
How do you define a function in C#?

C#:
public int Add(int x, int y) {
    return x + y;
}





226
FSLogix
Q: How does FSLogix improve Office 365 performance in Azure Virtual Desktop?
A: FSLogix isolates Office 365 data (such as Outlook, Teams, OneDrive) in a container (VHDX), reducing load times and ensuring that data is quickly accessible without syncing delays.





227
FSLogix
Cloud Cache uses storage providers based on the order of entries in CCDLocations.
Storage providers should be listed in order of proximity, then preference.
Only one (1) provider is used when data is hydrated from the storage provider.





228
FSLogix
Cloud Cache uses the concept of a proxy file, represented as Profile_%username%.vhd though it isn't a true VHD file. The proxy file is used as a means to collect and process all I/O writes destined for the local cache. The I/O writes are buffered in memory and tracked via the proxy file before they're written out as block-level cache objects in the cache directory.





229
FSLogix
Q: Which format does FSLogix use to store user profile data?
A: FSLogix uses the VHDX (Virtual Hard Disk) format to store user profile data in containers.





230
FSLogix
Q: What is the main difference between FSLogix Profile Containers and traditional roaming profiles?
A: FSLogix uses VHDX containers to store user profiles, ensuring portability and faster logons, while traditional roaming profiles can become fragmented and inconsistent across multiple virtual machines.





231
FSLogix
Cloud Cache uses the locally mounted container to provide periodic updates to the remote storage providers. Cloud Cache is designed to insulate users from short-term or intermittent local (inner-region, close proximity) storage issues.





232
FSLogix
Using Cloud Cache puts a performance and storage requirement on the virtual machine to accommodate the extra I/O operations and storage required by the local cache.





233
FSLogix
On a lazy asynchronous operation, Cloud Cache flushes the changes to all storage providers simultaneously as each provider is flushed on its own thread. FSLogix doesn't throttle this operation and utilizes as much throughput as the system will allow.





234
FSLogix
Q: Where are FSLogix Profile Containers typically stored in Azure Virtual Desktop environments?
A: FSLogix Profile Containers are typically stored in Azure Files or network shares (SMB share) to allow consistent access across different virtual desktop sessions.





235
FSLogix
Q: How does FSLogix Profile Container enhance multi-session environments like Azure Virtual Desktop?
A: In multi-session environments, FSLogix Profile Containers ensure that user profiles are loaded quickly and consistently, regardless of which session or virtual machine the user logs into, ensuring a persistent and smooth experience even when multiple users share the same infrastructure.





236
FSLogix
Q: What is the role of Profile Disk Differencing in FSLogix?
A: Profile Disk Differencing allows FSLogix to create differencing VHDX disks, where changes to the user profile are stored in separate files, reducing the load on the main profile disk. This improves performance by ensuring faster read/write operations and reducing storage overhead.





237
FSLogix
FSLogix Cloud Cache:
A caching mechanism within FSLogix that stores user profile data in the cloud. This improves redundancy and performance by ensuring that profiles remain available even if primary storage becomes inaccessible.





238
FSLogix
During a user's session when the connection to any storage provider becomes unhealthy, FSLogix queues up all the changes and then flushes them to the providers when they return to a healthy state.





239
FSLogix
Q: What does the FSLogix Profile Container do when a user is logging into multiple Azure Virtual Desktops (AVD)?
A: FSLogix mounts the same Profile Container (VHDX) to any virtual desktop the user logs into, ensuring that their profile settings, documents, and application preferences are consistent and immediately available across all virtual machines. This provides a unified experience regardless of which VM the user accesses.





240
FSLogix
During a first-time sign-in, FSLogix creates the container for the user in C:\ProgramData\FSLogix\Cache and mounts the container to the virtual machine. Next, FSLogix sets up all the necessary redirections for the user's profile. Then the User Profile Service creates the user's profile into the local cache.





241
FSLogix
When the local cache doesn't contain the data requested by the file system, Cloud Cache hydrates (reads and copies) the data from 1 of the remote storage providers to the local cache. This operation is also part of the sign in process when populating the local cache for the user's profile.





242
FSLogix
Q: What is FSLogix App Masking, and how does it relate to managing applications in virtual desktops?
A: FSLogix App Masking is a feature that allows administrators to control which applications are visible to which users in a virtual desktop environment. This "masks" applications based on user roles, ensuring that users only see the apps they have permissions for, without the need for separate application installations.





243
FSLogix
Outlook OST Files:
Offline Storage Table files used by Microsoft Outlook to store a synchronized copy of mailbox data locally. They enable offline access to email, calendar, and contact data. Managing these files in an Office Container prevents them from bloating the main user profile.





244
FSLogix
Storage Type (SMB vs. Local Disk):
The selection of storage options for hosting Profile Containers. In AVD, using an SMB share (such as Azure Files) is generally recommended over local disks, as it can provide better performance and reliability in a distributed cloud environment.





245
FSLogix
Data is written to all storage providers regardless of which provider is used during data hydration.
Performance (latency, utilization, bottlenecks) of a storage provider affects its sync status with the local copy.
Having one (1) or more provider that is behind in updates from local cache could be an indicator of an under performing storage provider.





246
FSLogix
All data written to the user's profile is temporarily stored as block-level cache objects in the same directory. Those block-level cache objects are then committed to the local cache. Before the block-level cache objects are created, the writes into the user's profile are processed in memory through a proxy file.





247
FSLogix
Q: How does FSLogix prevent user profile corruption in virtual desktop sessions?
A: FSLogix stores user profiles in isolated containers (VHDX), reducing the chances of corruption by ensuring the profile is handled in a controlled environment that can be mounted and saved properly.





248
FSLogix
FSLogix Agent Log:
A log file generated by the FSLogix agent that provides detailed diagnostic information. It is crucial for troubleshooting issues related to mounting Profile Containers and other FSLogix operations.





249
FSLogix
A full VHD(x) clone is performed when Cloud Cache determines, at sign in, that a storage provider isn't at the same sequence. During this operation, all pending writes are kept in the local cache until all storage providers are at the same sequence. Once complete, the flush operation begins sending new data to the storage providers.





250
FSLogix
FSLogix Application Masking:
A component of FSLogix used to control application visibility. It isolates and hides applications (and their dependencies) from users who should not access them, based on group policies, thereby simplifying desktop environments.





251
FSLogix
Remote Desktop Services (RDS):
A session-based technology where multiple users share a single server or a pool of servers. RDS provides centralized management and efficient resource sharing, although performance can vary with heavy concurrent usage.





252
FSLogix
Profile Container:
A core FSLogix component that encapsulates the entire user profile in a VHD/VHDX file. This approach improves logon/logoff times and reduces issues associated with traditional roaming profiles by loading a single container instead of numerous individual files.





253
FSLogix
Q: What happens to a FSLogix Profile Container when a user logs off?
A: When a user logs off, the changes made to the profile are saved back into the Profile Container (VHDX file), ensuring that all settings and data are retained for the next session.





254
FSLogix
Redirector Driver:
A mechanism within FSLogix that intercepts and reroutes file system I/O operations aimed at profile containers. It helps mitigate file locking issues—especially in multi-session environments—by ensuring controlled access to VHD/VHDX files.





255
FSLogix
VHD/VHDX:
Virtual hard disk file formats used by FSLogix Profile Containers to store user profiles. They are optimized for efficient I/O operations and are crucial for fast loading times in virtual environments.





256
FSLogix
Cloud Cache operates the user's profile from the local cache during the user's session and must be configured with one or more remote storage providers as specified in CCDLocations. These remote storage providers store copies of the local cache and are used during the current session and for subsequent sign ins.





257
FSLogix
Multi-Session Environment:
A setup where multiple users share the same operating system instance (typical of RDS and multi-session AVD deployments). This environment requires special considerations—such as the use of a Redirector Driver—to handle concurrent access and prevent file locking issues.





258
FSLogix
Antivirus Software Exclusions for FSLogix Container Files:
A best practice in FSLogix deployments. It involves configuring antivirus software to exclude FSLogix container files (both Profile and Office Containers stored in VHD/VHDX format) from scanning. This prevents potential performance degradation and issues during file access.





259
FSLogix
SMB Share (Server Message Block):
A network file-sharing protocol used in Windows environments. SMB shares, like those provided by Azure Files, are commonly used for storing FSLogix Profile Containers, ensuring centralized and efficient access.





260
PowerShell Modules
New-AzResourceGroup

Definition: Creates a new Azure Resource Group.
Example Usage: New-AzResourceGroup -Name "TestResourceGroup" -Location "EastUS".





261
PowerShell Modules
Module Manifest Properties

Definition: Specific attributes defined in a .psd1 file that describe module metadata.
Explanation: Includes properties like ModuleVersion, Author, RequiredModules, FunctionsToExport, etc.





262
PowerShell Modules
Get-Module

Definition: A cmdlet that retrieves information about modules.
Explanation: Can list currently loaded modules or all available modules using parameters like -ListAvailable. Example: Get-Module -ListAvailable.





263
PowerShell Modules
PowerShell Module

Definition: A package that contains PowerShell cmdlets, functions, scripts, and other resources.
Explanation: Extends PowerShell’s functionality and can be shared or reused across different environments and users.





264
PowerShell Modules
Module Scope Management

Definition: Controlling the installation and availability scope of modules.
Explanation: Deciding between CurrentUser and AllUsers scopes based on requirements and permissions.





265
PowerShell Modules
Connect-AzAccount

Definition: A cmdlet from the Az module that authenticates your session with Azure.
Example Usage: Connect-AzAccount prompts for Azure credentials to manage Azure resources.





266
PowerShell Modules
Get-InstalledModule

Definition: A cmdlet that retrieves modules installed on the system.
Explanation: Useful for managing and updating modules. Example: Get-InstalledModule | Update-Module updates all installed modules.





267
PowerShell Modules
Module Version Specification

Definition: The practice of specifying exact module versions when importing to ensure script compatibility.
Explanation: Done using parameters like -RequiredVersion in Import-Module. Example: Import-Module -Name Az -RequiredVersion 5.0.0.





268
PowerShell Modules
Get-Command -Module <ModuleName>

Definition: Lists all commands (cmdlets, functions) provided by a specific module.
Example Usage: Get-Command -Module Az lists all Az module cmdlets.





269
PowerShell Modules
Module Manifest (.psd1)

Definition: A PowerShell data file that describes the contents and metadata of a module.
Explanation: Includes information like the module version, author, exported functions, dependencies, and more. Essential for publishing and sharing modules.





270
PowerShell Modules
Module Conflicts

Definition: Situations where multiple modules have cmdlets or functions with the same name.
Explanation: Resolved by fully qualifying cmdlet names with the module name (e.g., Az\Get-AzVM).





271
PowerShell Modules
Import-Module

Definition: A cmdlet used to load a PowerShell module into the current session.
Explanation: Makes the module's cmdlets and functions available for use. Example: Import-Module -Name Az.





272
PowerShell Modules
AllUsers Scope

Definition: An installation scope that makes a PowerShell module available to all users on the system.
Explanation: When installing a module with -Scope AllUsers, it requires administrative privileges and places the module in a system-wide directory, typically C:\Program Files\PowerShell\Modules.





273
PowerShell Modules
Module.dll

Definition: A dynamic link library file that can be part of a PowerShell module.
Explanation: Contains compiled code (e.g., C#) that can be used by PowerShell modules for enhanced performance or functionality.





274
PowerShell Modules
Module Path

Definition: The directories where PowerShell looks for modules.
Explanation: Can be viewed using the $env:PSModulePath environment variable. PowerShell searches these paths when importing modules.





275
PowerShell Modules
Find-Module

Definition: Searches for modules in a repository like the PowerShell Gallery.
Example Usage: Find-Module -Name SQLServer searches for the "SQLServer" module.





276
PowerShell Modules
PSReadLine Module

Definition: A module that enhances the command-line editing experience in PowerShell.
Explanation: Provides features like syntax highlighting, auto-completion, and customizable key bindings.





277
PowerShell Modules
Install-Module

Definition: A cmdlet used to download and install a module from a repository like the PowerShell Gallery.
Explanation: Specifies the module name and installation scope. Example: Install-Module -Name Az -Scope CurrentUser.





278
PowerShell Modules
Az Module

Definition: A module for managing Azure resources.
Explanation: Provides cmdlets to interact with Azure services. Example cmdlet: Get-AzVM.





279
PowerShell Modules
Get-Module -ListAvailable

Definition: Lists all modules installed on the system that are available to be imported.
Explanation: Shows modules in all module paths, regardless of whether they are currently loaded.





280
PowerShell Modules
Auto-Import

Definition: A feature in PowerShell that automatically imports a module when a cmdlet from that module is invoked.
Explanation: Starting from PowerShell 3.0, modules can be auto-imported, eliminating the need to manually run Import-Module for each module you use.





281
PowerShell Modules
Scope (Installation)

Definition: Determines whether a module is installed for all users or just the current user.
Explanation: Controlled via the -Scope parameter in Install-Module. Options include CurrentUser and AllUsers.





282
PowerShell Modules
Ensure scripts use the correct module versions to maintain compatibility.
Example:
Import-Module -Name Az -RequiredVersion 5.0.0





283
PowerShell Modules
New-AzVM

Definition: Deploys a new Azure Virtual Machine.
Example Usage: New-AzVM -ResourceGroupName "TestResourceGroup" -Name "TestVM" -Location "EastUS" -Image "Win2019Datacenter".





284
PowerShell Modules
Uninstall-Module

Definition: A cmdlet used to remove a module from the system.
Explanation: Example: Uninstall-Module -Name ActiveDirectory removes the ActiveDirectory module.





285
PowerShell Modules
Cmdlet

Definition: A lightweight command used in the PowerShell environment.
Explanation: Cmdlets follow a Verb-Noun naming pattern (e.g., Get-Module, Import-Module) and perform specific functions within PowerShell.





286
PowerShell Modules
Listing All Available Modules:
Get-Module -ListAvailable | Select-Object Name, Version, Path

Updating All Installed Modules:
Get-InstalledModule | Update-Module





287
PowerShell Modules
Installing a Module:
Install-Module -Name Az -Scope CurrentUser

Importing a Module:
Import-Module -Name Az





288
PowerShell Modules
Module Auto-Import

Definition: See Auto-Import above.
Explanation: Allows modules to be imported automatically when their commands are used, streamlining workflow.





289
PowerShell Modules
Update-Module

Definition: A cmdlet used to update an installed module to its latest version from the repository.
Explanation: Example: Update-Module -Name Az updates the Az module. To update all modules: Get-InstalledModule | Update-Module.





290
PowerShell Modules
Select-Object

Definition: A cmdlet that selects specific properties of an object or set of objects.
Explanation: Often used to filter and display only the needed information. Example: Get-Module -ListAvailable | Select-Object Name, Version, Path.





291
PowerShell Modules
Exporting Functions and Cmdlets
Definition: The process of making functions and cmdlets available to users when a module is imported.
Explanation: Defined in the module's .psm1 file and specified in the module manifest (.psd1) under FunctionsToExport, CmdletsToExport, etc.





292
PowerShell Modules
Dependencies

Definition: Other modules or components that a PowerShell module requires to function correctly.
Explanation: Dependencies are specified in a module's manifest and must be present for the module to operate as intended. They can be viewed using properties like RequiredModules.





293
PowerShell Modules
ActiveDirectory Module

Definition: A module for managing Active Directory objects.
Explanation: Provides cmdlets to manage users, groups, and other AD components. Example cmdlet: Get-ADUser.





294
PowerShell Modules
Module.psm1

Definition: The primary script file for a PowerShell module.
Explanation: Contains the functions, cmdlets, and other code that define the module's functionality.





295
PowerShell Modules
Get-Help

Definition: A cmdlet that displays help information for other cmdlets and functions.
Explanation: Provides detailed documentation and examples. Example: Get-Help Get-AzVM -Detailed.





296
PowerShell Modules
Module Load Order

Definition: The sequence in which modules are loaded into a PowerShell session.
Explanation: Important when resolving cmdlet conflicts or ensuring dependencies are loaded first.





297
Python
Q:
Which keyword is used to define a generator function in Python?

A:
yield





298
Python
Q:
What happens if you try to call gen.next() on a generator gen in Python 3?

A:
It raises an AttributeError because the correct method to retrieve the next value is next(gen).





299
Python
Q:
What are the two essential methods that an iterator class must implement?

A:
__iter__() and __next__().





300
Python
Q:
How can you obtain command-line arguments in a Python script?

A:
Using sys.argv





301
Python
Q:
What does the pathlib.Path class represent in Python?

A:
Filesystem paths with methods and properties for path manipulations in an object-oriented manner.





302
Python
Q:
Which itertools function can be used to create an iterator that returns elements from the first iterable until it is exhausted, then proceeds to the next iterable?

A:
itertools.chain().





303
Python
Q:
What does itertools.islice() do?

A:
It creates an iterator that returns selected elements from the input iterable by specifying start, stop, and step indices.





304
Python
Q:
What is the main advantage of using generators over lists?

A:
Generators are memory-efficient as they generate items on-the-fly and don't store the entire sequence in memory, making them faster for large datasets.





305
Python
Q:
What does sys.exit(1) signify in a Python script?

A:
An error occurred during execution.





306
Python
Q:
Explain how itertools.combinations() differs from itertools.permutations().

A:
itertools.combinations(iterable, r) generates all possible combinations of r elements without regard to order, whereas itertools.permutations(iterable, r) generates all possible ordered arrangements of r elements.





307
Python
Q:
Name a built-in context manager in Python and its purpose.

A:
open() is a built-in context manager used for opening files. It ensures that the file is properly closed after its block of code is executed.





308
Python
Q:
What function from the os module is used to iterate through directories and files?

A:
os.walk()





309
Python
Q:
How can you create an infinite iterator cycling through a given iterable using itertools?

A:
Using itertools.cycle(iterable).





310
Python
Q:
What is the advantage of using yield from in a generator?

A:
yield from delegates part of the generator’s operations to another generator, simplifying code and allowing for the composition of generators.





311
Python
How do you resolve a relative path to an absolute path using pathlib?

from pathlib import Path
relative_path = Path('some/relative/path')
absolute_path = relative_path.resolve()





312
Python
Q:
How can you raise an exception inside a generator from outside?

A:
Using the .throw(type, value=None, traceback=None) method.





313
Python
Q:
What does an exit code of 0 typically signify in a Python script?

A:
Successful execution without errors.





314
Python
How can you compare two Path objects for equality regardless of their string representations? By resolving both paths and comparing them.

path1 = Path('/home/user/file.txt').resolve()
path2 = Path('./file.txt').resolve()
are_equal = path1 == path2





315
Python
Q:
What method is used to gracefully terminate a generator?

A:
The .close() method.





316
Python
Q:
What is the primary purpose of exit codes in Python scripts?

A:
To communicate the termination status of a script to the operating system or calling process.





317
Python
Q:
How do you make a custom object iterable?

A:
By implementing the __iter__() method that returns an iterator (which can be the object itself with a __next__() method).





318
Python
Q:
How does the iter() function work with iterables?

A:
The iter() function returns an iterator object from an iterable by calling its __iter__() method.





319
Python
Q:
What is a generator in Python?

A:
A function that allows iteration over a sequence of values one at a time, using the yield keyword.





320
Python
Q:
What method can be used to send a value into a generator, allowing it to receive data?

A:
The .send(value) method.





321
Python
Q:
Which Python module provides an object-oriented approach to handling filesystem paths?

A:
pathlib





322
Python
Q:
What is the default exit code if a Python script ends without calling sys.exit()?

A:
0 (indicating successful execution).





323
Python
Which pathlib method can be used to iterate recursively through all files matching a pattern?

for file in Path('/path/to/directory').rglob('*.txt'):
    print(file)





324
Python
Q:
How can you create a context manager using a generator function?

A:
By using the @contextmanager decorator from the contextlib module and yielding control within the function.





325
Python
Q:
What is the advantage of using context managers for resource management?

A:
They ensure that resources are properly acquired and released, even if errors occur, promoting cleaner and more reliable code.





326
Python
Q:
Explain the difference between except Exception as e and except (ValueError, TypeError) as e.

A:
except Exception as e catches all exceptions that inherit from Exception, while except (ValueError, TypeError) as e only catches ValueError and TypeError exceptions.





327
Python
Q:
How does the os.walk() function handle permission errors by default?

A:
It can be configured to print an error message and continue by using the onerror parameter.





328
Python
Q:
What are the two methods that a context manager class must implement?

A:
__enter__() and __exit__(exc_type, exc_value, traceback).





329
Python
import time
from contextlib import contextmanager

@contextmanager 
def timer():
    start = time.time()
    try: yield
    finally:
        end = time.time()
        print(f"Elapsed time: {end - start} seconds")

# Usage
with timer():
    # Code block to measure
    time.sleep(2)
# Output: Elapsed time: 2.002 seconds





330
Python
Q:
How can you define a custom exception in Python?

A:
By creating a new class that inherits from the built-in Exception class.
Example:
class MyCustomError(Exception):
    pass





331
Python
Q:
Explain the concept of generator pipelines.

A:
Generator pipelines involve chaining multiple generators together, where each generator processes data and passes it to the next, enabling efficient and modular data processing.





332
Python
Q:
Name a common use case for generators in Python.

A:
Reading large files one line at a time without loading the entire file into memory.





333
Python
Q:
Which Python module is commonly used to set exit codes?

A:
sys





334
Python
Q:
How do you retrieve the next value from a generator named gen?

A:
Using the built-in next(gen) function.





335
Azure Compute Gallery
Azure Compute Gallery (ACG) – A service that helps manage, share, and distribute VM images across multiple subscriptions and regions.





336
Azure Compute Gallery
Shared Image Gallery (SIG) – The previous name for Azure Compute Gallery (Microsoft rebranded it).





337
Azure Compute Gallery
OS Disk Image – An image containing only the operating system and configurations.
Data Disk Image – A separate image that includes application and data disks but does not contain an OS.





338
Azure Compute Gallery
Maximum Image Versions Per Definition – Each image definition can store up to 1,000 versions.





339
Azure Compute Gallery
Image Version – A specific iteration of an image (e.g., 1.0.0, 2.1.0), stored in one or more regions.





340
Azure Compute Gallery
ACG	Azure Compute Gallery
AIB	Azure Image Builder
RBAC	Role-Based Access Control
SAS	Shared Access Signature





341
Azure Compute Gallery
Replication Completion Check – Before deploying a VM, images must be fully replicated to the region where deployment is taking place.





342
Azure Compute Gallery
Image Retention Policy – A strategy for keeping or removing older image versions to manage storage costs and subscription quotas.





343
Azure Compute Gallery
Packer – An open-source tool that automates multi-cloud VM image building, often used with Terraform or Azure DevOps.
Terraform Compute Gallery Module – A way to define ACG image builds and deployments using Infrastructure as Code (IaC).





344
Azure Compute Gallery
VHD	Virtual Hard Disk
VM	Virtual Machine
IaC	Infrastructure as Code
CI/CD	Continuous Integration/Continuous Deployment
SemVer	Semantic Versioning





345
Azure Compute Gallery
Shared Image – An image in ACG that is accessible across multiple subscriptions with proper RBAC configuration.





346
Azure Compute Gallery
Storage Costs for ACG – Storage pricing depends on:
Number of versions retained
Number of replicas in different regions
Image size





347
Azure Compute Gallery
Image Version Deletion – Permanent action that cannot be undone.





348
Azure Compute Gallery
Specialized Image – A VM image that retains system-specific settings, including machine name, user accounts, and configurations—ideal for cloning.





349
Azure Compute Gallery
Azure Policy Enforcement – Some organizations restrict Compute Gallery usage via Azure Policies.





350
Azure Compute Gallery
Cross-Subscription Sharing – ACG images can be shared with multiple subscriptions, but not across Azure AD tenants.





351
Azure Compute Gallery
Azure Image Builder (AIB) – A managed service that automates image creation by defining customizations (e.g., software installations, updates, configurations).





352
Azure Compute Gallery
Capture from Existing VM – Creating an image by generalizing or specializing a VM and capturing it into ACG.





353
Azure Compute Gallery
Subscription Scope – ACG is tied to a single subscription, but images can be shared across multiple subscriptions under the same Azure AD tenant.





354
Azure Compute Gallery
Azure Marketplace Image as a Base – Using a pre-configured image from Azure Marketplace to deploy new VMs.





355
Azure Compute Gallery
Manual VHD Upload – A process where you create a VHD file, upload it to Azure Storage, and convert it into an image.





356
Azure Compute Gallery
Replication Region Limit – Each image version can be replicated to a maximum of 50 regions.





357
Azure Compute Gallery
Cross-Tenant Sharing – Not supported in ACG; images cannot be shared between different Azure Active Directory (Azure AD) tenants.





358
Azure Compute Gallery
Azure Compute Gallery Roles:
Reader – Can list and read images.
Contributor – Can create and manage images.
Owner – Full control over the gallery.
Shared Image Gallery Reader – Read-only access to images across subscriptions.





359
Azure Compute Gallery
Shared Image Gallery Reader Role – An RBAC role that allows users to access images for deployment but not modify them.





360
Azure Compute Gallery
Ephemeral OS Disk – A temporary VM disk that cannot be used with ACG images.





361
Azure Compute Gallery
VM Deployment from ACG – The process of creating VM instances using images stored in Azure Compute Gallery.





362
Azure Compute Gallery
Image Definition – A logical representation of an image, specifying OS type, publisher, and general metadata.





363
Azure Compute Gallery
License Considerations – Some images (e.g., RHEL, Windows Server) require Azure Hybrid Benefit or additional licensing.





364
Azure Compute Gallery
Image Gallery Replication – The process of copying an image version to multiple regions to optimize availability and speed.





365
Azure Compute Gallery
Subscription Quotas – Limits on the number of image versions, definitions, and replication regions.





366
Azure Compute Gallery
Azure DevOps Pipelines for Image Deployment – A CI/CD workflow that automatically builds, tests, and publishes images.





367
Azure Compute Gallery
Replication Time Constraints – Image replication is not instantaneous and can take several minutes to hours.





368
Azure Compute Gallery
SAS Token (Shared Access Signature) – A temporary, secure URL-based access method often used for sharing VHD files in Azure Storage.





369
Azure Compute Gallery
Managed Image – A single, region-bound image stored in Azure, lacking versioning and replication features found in ACG.





370
Azure Compute Gallery
One Compute Gallery Per Subscription – ACG is bound to a single Azure subscription.





371
Azure Compute Gallery
Region Availability – Not all Azure regions support Compute Gallery replication.
Azure Government & Sovereign Clouds – Some regions (e.g., China, US Gov) have restricted ACG availability.





372
Azure Compute Gallery
Generalized Image – A VM image that has been "cleaned" of system-specific data (using Sysprep for Windows or waagent -deprovision for Linux) to be reused across multiple VM deployments.





373
Azure Compute Gallery
Compute Gallery Resource – The top-level container that stores multiple image definitions and versions.





374
Azure Compute Gallery
Deployment Latency – The time required for a newly published image to become available for VM creation.





375
VMWare
vSphere Distributed Resource Scheduler (DRS) Affinity Rules

Rules that can be configured in DRS to control the placement of virtual machines on ESXi hosts in a vSphere Cluster. Affinity rules can force specific VMs to run on the same host or on separate hosts, ensuring better workload management.





376
VMWare
vSphere

VMware's suite of products for virtualization, including vCenter Server, ESXi, vMotion, and more, used to create and manage virtualized data centers.





377
VMWare
vMotion Compatibility

The requirement for shared storage and network configuration to allow seamless migration of virtual machines between hosts without downtime.





378
VMWare
Host Profiles Compliance

A feature that checks whether an ESXi host is in compliance with the host profile configurations. If an ESXi host deviates from the standard profile (e.g., security or networking settings), it can be flagged for correction.





379
VMWare
Distributed Resource Scheduler (DRS)

A feature of VMware vSphere that automatically balances workloads across ESXi hosts in a cluster, ensuring optimal resource usage.





380
VMWare
ESXi Host Profiles

A feature that allows administrators to configure, enforce, and standardize settings across multiple ESXi hosts in a cluster. Host profiles ensure consistency in configuration, such as networking, storage, and security settings, across all hosts in a given environment.





381
VMWare
ESXi Lockdown Mode

A security feature that restricts access to an ESXi host to only a few trusted sources, such as the vCenter Server or specific administrators. When Lockdown Mode is enabled, direct access to the ESXi host (such as via SSH or the vSphere Client) is disabled, except for users who have administrative privileges.





382
VMWare
vMotion Network

A dedicated network connection used for transferring virtual machine memory and CPU state during a vMotion migration. This network should be optimized for high throughput and low latency to ensure smooth VM migration without performance degradation.





383
VMWare
ESXi Logging and Troubleshooting

A set of logs and diagnostic tools built into VMware ESXi for monitoring system health, performance, and troubleshooting issues. Logs like vmkernel.log and hostd.log provide valuable information about system events, errors, and VM status for troubleshooting.





384
VMWare
Storage vMotion

The ability to migrate virtual machine disk files from one datastore to another without downtime, essential for managing storage resources across a cluster.





385
VMWare
VMFS (Virtual Machine File System)

A high-performance file system used by VMware ESXi to store virtual machine disk files (VMDKs) on shared storage. VMFS is optimized for virtual machine workloads and allows multiple ESXi hosts to access the same datastore simultaneously.





386
VMWare
Resource Pool

A logical grouping of CPU, memory, and storage resources in a VMware cluster, which can be allocated to virtual machines.





387
VMWare
vCenter Server

VMware's centralized management platform for multiple ESXi hosts and their associated virtual machines, used for configurations, monitoring, and management tasks.





388
VMWare
ESXi Host

A physical server that runs the VMware ESXi hypervisor to host virtual machines (VMs).





389
VMWare
Fault Tolerance (FT)

A VMware feature that provides continuous availability by creating a shadow VM on a different host that automatically takes over in case of a host failure, ensuring zero downtime.





390
VMWare
vSphere HA Agent

A software agent installed on each ESXi host in a vSphere Cluster to enable High Availability (HA). The HA agent monitors the health of the host and communicates with other hosts to restart VMs automatically in the event of a host failure.





391
VMWare
vSphere Cluster

A group of ESXi hosts that work together as a single entity, allowing for resource pooling and the management of VMs in a unified way.





392
VMWare
Host Failure

When a physical ESXi host becomes unavailable due to hardware failure, power loss, or other issues, potentially affecting the VMs running on it.





393
VMWare
vSphere Fault Tolerance (FT) Primary and Secondary VM

In Fault Tolerance (FT), there are two VMs: the primary VM (the active VM) and the secondary VM (the shadow VM). The primary VM runs on one ESXi host, while the secondary VM is running in real-time on another host. If the primary VM fails, the secondary VM takes over immediately without any downtime.





394
VMWare
High Availability (HA)

A VMware feature that automatically restarts virtual machines on another host if the original host fails. It ensures minimal downtime in case of host failure.





395
VMWare
Storage I/O Control (SIOC)

A feature in VMware vSphere that manages storage I/O requests to ensure that all virtual machines receive fair access to storage resources. It helps avoid I/O contention by controlling the bandwidth allocated to different VMs when accessing shared storage.





396
VMWare
ESXi Virtual Machine Monitor (VMM)

A component of VMware ESXi that manages virtual machine execution, including CPU, memory, and I/O operations. It ensures that VMs are isolated from each other and allows each VM to operate independently of the host.





397
VMWare
vSphere Distributed Switch (vDS)

A virtual switch that allows the central management of network configurations across multiple ESXi hosts. A vDS provides enhanced features like port mirroring, private VLANs, and traffic shaping for advanced network management in VMware environments.





398
VMWare
ESXi Console Access

The ability to access the ESXi host’s console directly via the physical server or over a network using remote tools like SSH or the vSphere Client. This allows administrators to troubleshoot and configure the host or to work around issues when vCenter Server is unavailable.





399
VMWare
Storage Policy-Based Management (SPBM)

A feature in VMware vSphere that enables administrators to manage storage resources using policies, such as performance, redundancy, and capacity. SPBM ensures that virtual machines and storage resources are compliant with business requirements and ensures that virtual machine storage is allocated to meet desired performance criteria.





400
VMWare
ESXi Shell

A command-line interface (CLI) used to manage and troubleshoot VMware ESXi hosts. The ESXi Shell allows administrators to run shell commands directly on the ESXi host for tasks like system configuration, troubleshooting, and diagnostics.





401
VMWare
DirectPath I/O

A feature in VMware ESXi that allows direct access to a physical device (e.g., a network adapter, GPU, or storage controller) by a virtual machine, bypassing the hypervisor for better performance. This is typically used for workloads requiring high performance, such as GPU acceleration or network-intensive applications.





402
VMWare
ESXi Free License (VMware ESXi Free)

A free version of VMware ESXi that provides basic virtualization capabilities without advanced features like vMotion, HA, or DRS. It's limited to 8 physical CPU cores and does not include access to vCenter Server for centralized management.





403
VMWare
Shared Storage

A storage system that is accessible by multiple ESXi hosts in a cluster, essential for vMotion, HA, and Storage vMotion.





404
VMWare
ESXi Datastore

A storage container used by ESXi hosts to store virtual machine disk files (VMDKs), ISO images, templates, and other data related to virtual machines. Datastores can be backed by shared storage solutions, such as SAN (Storage Area Network), NFS (Network File System), or vSAN.





405
VMWare
VMware ESXi

A Type 1 hypervisor that runs on physical servers to create and manage virtual machines in a VMware environment.





406
VMWare
Virtual Machine Snapshot

A point-in-time copy of the state, data, and configuration of a virtual machine. Snapshots allow for the restoration of the VM to a previous state, which is useful for testing, troubleshooting, or backup purposes.





407
VMWare
vSAN (Virtual SAN)

A VMware product that creates virtualized storage by aggregating local storage from ESXi hosts in a cluster, providing a shared storage solution without needing external storage hardware.





408
VMWare
Hypervisor

Software that allows the creation and management of virtual machines by abstracting the physical hardware. There are two types: Type 1 (bare-metal) and Type 2 (hosted).





409
VMWare
vSphere Client

A graphical user interface (GUI) tool used to manage and configure VMware ESXi hosts and virtual machines. The vSphere Client connects to vCenter Server to manage multiple ESXi hosts and provides an easy interface for monitoring, configuration, and troubleshooting tasks.





410
VMWare
Live Migration

The process of moving a running virtual machine from one physical host to another with no interruption in service, typically using vMotion.





411
VMWare
vCenter Server Appliance (VCSA)

A Linux-based virtual appliance version of vCenter Server, which is optimized for VMware environments. The VCSA is a lightweight, pre-configured appliance designed to simplify deployment and management of vCenter Server without needing a Windows server.





412
VMWare
Type 1 Hypervisor

A hypervisor that runs directly on physical hardware, without an underlying operating system. Examples: VMware ESXi, Microsoft Hyper-V.





413
VMWare
vMotion

A VMware feature that allows the live migration of virtual machines between ESXi hosts with no downtime.





414
VMWare
VMware Horizon

A VMware product used for Virtual Desktop Infrastructure (VDI), enabling the delivery of virtual desktops and applications.





415
VMWare
VMkernel

The core operating system that VMware ESXi uses to manage physical resources, such as CPU, memory, and storage. The VMkernel is responsible for creating and managing virtual machines, handling I/O operations, and providing resource management.





416
VMWare
Host Bus Adapter (HBA)

A hardware component in ESXi hosts that provides connectivity between the host and storage systems (e.g., SAN). HBAs are used to connect the ESXi host to the storage network, facilitating data transfers to and from virtual machines.





417
VMWare
Type 2 Hypervisor

A hypervisor that runs on top of an existing host operating system, using the OS for resource management. Examples: VMware Workstation, Oracle VirtualBox.





418
Asynchronous Python
Lock (Mutex)
A lock is a synchronization primitive used to control access to a shared resource, ensuring that only one thread can access a specific block of code at a time.





419
Asynchronous Python
asyncio.Semaphore
A concurrency control mechanism in Python’s asyncio used to limit how many coroutines run at once.





420
Asynchronous Python
asyncio.Lock
An asynchronous lock in Python used to prevent multiple coroutines from accessing a shared resource at the same time.





421
Asynchronous Python
async with (async context manager)
Manages asynchronous resources in Python like network sessions or database connections with proper cleanup.





422
Asynchronous Python
asyncio.Queue
An async-safe queue in Python used for communication between producer and consumer coroutines.





423
Asynchronous Python
Awaitable
Any object in Python that can be used with await, including coroutine objects, asyncio.Future, and some libraries’ types.





424
Asynchronous Python
await
A keyword that pauses an asynchronous Python function until the awaited coroutine or awaitable completes.





425
Asynchronous Python
Timeouts
Techniques like asyncio.wait_for() used in Python to limit how long a coroutine can run before it's cancelled.





426
Asynchronous Python
Non-blocking I/O
A key feature of async Python where I/O operations (e.g., file or network access) don’t block the event loop.





427
Asynchronous Python
Race Condition
An issue in async Python code where multiple coroutines access shared data without proper coordination, leading to bugs.





428
Asynchronous Python
return_exceptions=True (in gather)
A parameter in Python's asyncio.gather() that returns exceptions as part of the results instead of cancelling all tasks on error.





429
Asynchronous Python
async for (async iterator)
Used to iterate over async sequences in Python, such as streaming data or asynchronous file lines.





430
Asynchronous Python
asyncio.to_thread()
Runs a blocking function in a background thread from an async Python function, allowing mixing of sync and async code.





431
Asynchronous Python
asyncio.as_completed()
Runs multiple coroutines concurrently and yields their results in the order they complete, useful in Python for out-of-order processing.





432
Asynchronous Python
asyncio.wait_for()
Runs a coroutine with a timeout in Python; raises TimeoutError if the coroutine doesn’t finish in time.





433
Asynchronous Python
asyncio.create_task()
Schedules a coroutine to run concurrently as a Task in Python's event loop and starts it immediately.





434
Asynchronous Python
Cooperative Multitasking
The async model in Python where tasks yield control voluntarily (e.g., via await) instead of being preempted.





435
Asynchronous Python
asyncio.gather()
Runs multiple asynchronous Python tasks concurrently and waits for all to finish, optionally collecting exceptions.





436
Asynchronous Python
pytest-asyncio
A Python testing plugin that allows you to write and run tests for asynchronous code using async def and await.





437
Asynchronous Python
asyncio.shield()
Prevents a coroutine in Python from being cancelled even if the calling task is, ensuring it runs to completion.





438
Asynchronous Python
Coroutine
An async def function in Python that can pause at await expressions and resume later, enabling non-blocking asynchronous execution.





439
Asynchronous Python
Coroutine Object
The result of calling an async def function; it must be awaited or scheduled with the event loop to execute.





440
Asynchronous Python
Semaphore
A semaphore is a synchronization tool that limits the number of threads that can access a resource simultaneously, often used for managing a pool of resources.





441
Asynchronous Python
Thread Pool Executor
A thread pool executor, provided by the concurrent.futures module, is an abstraction that manages a pool of worker threads and simplifies scheduling and executing asynchronous tasks.





442
Asynchronous Python
Thread
A thread is an independent sequence of execution within a program. Multiple threads can run concurrently within the same process.





443
Asynchronous Python
Thread Safety
Thread safety means that code or data structures function correctly when accessed by multiple threads simultaneously, usually achieved with proper synchronization.





444
Asynchronous Python
Deadlock
Deadlock happens when two or more threads are waiting on each other to release locks, causing the program to become stuck with none of the threads progressing.





445
Asynchronous Python
asyncio.run()
A high-level function in Python to start the event loop, run an async function, and close the loop automatically.





446
Asynchronous Python
Race Condition
A race condition occurs when multiple threads access and modify shared data concurrently, leading to unpredictable or incorrect results if not managed properly.





447
Asynchronous Python
Task
A wrapper around a coroutine in Python’s asyncio that is managed by the event loop and can be cancelled, awaited, or monitored.





448
Asynchronous Python
async
A keyword used in Python to declare an asynchronous function (async def), enabling the use of await inside it.





449
Asynchronous Python
Deadlock
A state in async Python where tasks wait on each other indefinitely, halting progress—usually due to poor coordination.





450
Asynchronous Python
aiohttp
An asynchronous HTTP client/server library in Python used to make non-blocking web requests.





451
Asynchronous Python
Concurrency (Asyncio)
Running multiple asynchronous Python tasks in overlapping time, achieved cooperatively through the event loop.





452
Asynchronous Python
Daemon Thread
Daemon threads are background threads that do not prevent the program from exiting; they automatically close when all non-daemon threads have finished.





453
Asynchronous Python
Structured Concurrency
A design principle (used in Trio) ensuring all async Python tasks are scoped and cleaned up together, reducing leaks and bugs.





454
Asynchronous Python
Throttling
Limiting concurrency in Python async code (e.g., with a Semaphore) to avoid overwhelming servers or APIs.





455
Asynchronous Python
Backpressure
A condition in async Python where producers send data faster than consumers can process; addressed using queues or throttling.





456
Asynchronous Python
Parallelism
Running code in true simultaneous execution on multiple cores; not directly supported by asyncio, which is single-threaded.





457
Asynchronous Python
asyncio.CancelledError
An exception in Python that is raised inside a coroutine when it’s cancelled, allowing it to perform cleanup.





458
Asynchronous Python
asyncio.Future
A low-level object representing a pending result in Python's asyncio; used internally by Tasks.





459
Asynchronous Python
Idle Task
An asynchronous Python coroutine that’s currently waiting (e.g., on I/O or sleep), allowing others to run in the meantime.





460
Asynchronous Python
Context Switching
Context switching is the process of storing and restoring the state of a thread so that execution can resume later, which can introduce performance overhead.





461
Asynchronous Python
Event Loop
The core of Python’s asyncio system, which schedules and runs asynchronous tasks cooperatively on a single thread.





462
Asynchronous Python
Blocking Code
Code like time.sleep() that halts the event loop and prevents other asynchronous Python tasks from running—should be avoided.





463
Asynchronous Python
Global Interpreter Lock (GIL)
The GIL is a mutex in CPython that ensures only one thread executes Python bytecode at a time, affecting true parallel execution of threads.





464
Azure Developer Associate
In a multitenant Entra ID app, how many application objects and service principals exist?

One application object in the home tenant and multiple service principals—one per tenant where the app is used.





465
Azure Developer Associate
Where do Application Insights telemetry tables live when linked to an Azure Monitor Log Analytics workspace?

In tables named requests, dependencies, exceptions, traces, etc.





466
Azure Developer Associate
Why choose Azure Container Apps instead of Azure Functions for a containerized background task?

Container Apps supports event-driven scaling (KEDA), service discovery, and traffic splitting for container images; Functions can’t directly deploy container images.





467
Azure Developer Associate
Where do you associate a stored access policy for blobs?

On the container that hosts the blobs.





468
Azure Developer Associate
Which App Service deployment method enables CI/CD integration with GitHub or Azure Repos?
Continuous Deployment (CI/CD)





469
Azure Developer Associate
What are the two primary data types collected by Azure Monitor?

Metrics and logs.





470
Azure Developer Associate
Give one example of a custom Azure Monitor metric you might emit from an Azure Function.

Number of records replicated per run (e.g., RecordsReplicated).





471
Azure Developer Associate
Which Azure Monitor autoscale profile type allows different schedules with separate scale rules?

Recurrence profile.





472
Azure Developer Associate
Which Azure storage service supports a user delegation SAS?

The Blob service only.





473
Azure Developer Associate
What’s the maximum retention you can configure for an Azure Monitor Log Analytics workspace?

730 days (2 years).





474
Azure Developer Associate
How do you move Hot-tier blobs not modified for 90 days to the Cool tier?

Add "tierToCool": { "daysAfterModificationGreaterThan": 90 } under "actions" → "baseBlob" in the lifecycle policy JSON.





475
Azure Developer Associate
Which messaging solution supports 2 MB messages and automatic duplicate detection?

Azure Service Bus Premium tier with duplicate detection enabled.





476
Azure Developer Associate
Which persistence setting minimizes storage cost while keeping performance high for Azure Cache for Redis?

Enable RDB persistence with soft-delete disabled on the associated storage account.





477
Azure Developer Associate
What is a namespace in Azure Container Registry (ACR)?

A namespace is a forward-slash–delimited prefix grouping related repositories, enabling team isolation within a single registry.





478
Azure Developer Associate
Which role grants least privilege to allow a user to create a VM with a managed identity?

Virtual Machine Contributor.





479
Azure Developer Associate
Front: You run a cross-partition query over 8 partitions that each cost 3 RU. How many total RUs?
Back: 8 × 3 RU = 24 RU.





480
Azure Developer Associate
Q: What are Redis’s primary data structures?
A: Strings, Lists, Sets, Sorted Sets, Hashes, Bitmaps, HyperLogLogs, Streams.





481
Azure Developer Associate
How does the Always restart policy differ from OnFailure and Never in Azure Container Instances?

Always restarts containers regardless of exit code; OnFailure restarts only on non-zero exit; Never runs a container at most once (no restarts).





482
Azure Developer Associate
How do you ensure Event Grid events that fail due to 400/413 codes aren’t lost?

Enable dead-lettering on the event subscription.





483
Azure Developer Associate
What Azure Monitor feature routes platform logs and metrics from Azure resources to destinations like Storage, Event Hubs, or a Log Analytics workspace?

Diagnostic settings.





484
Azure Developer Associate
Front: What happens to Strong consistency reads during a regional failover in a multi-region account?
Back: Strong reads will only succeed in the current write region. If failover switches your write region, clients must target the new write region for linearizability.





485
Azure Developer Associate
What Azure CLI command allows CORS from https://myapps.com on a Web App?

csharp
az webapp cors add -g MyResourceGroup -n MyWebApp --allowed-origins https://myapps.com





486
Azure Developer Associate
Which role is required to generate a user delegation SAS for blobs?

A role that includes Microsoft.Storage/storageAccounts/blobServices/generateUserDelegationKey, such as Contributor.





487
Azure Developer Associate
Which CLI command rotates a key in Azure Key Vault?

az keyvault key rotate --vault-name <vaultName> --name <keyName>





488
Azure Developer Associate
How do you temporarily prevent modifications or deletions on blobs during an investigation?

Configure a legal hold on the container.





489
Azure Developer Associate
Which caching pattern loads data on demand into Azure Cache for Redis?

Data cache (Cache-Aside) pattern.





490
Azure Developer Associate
If you omit --restart-policy when creating an Azure Container Instance group, what restart policy applies?
The default is Always, so containers restart on any exit code unless you explicitly set OnFailure or Never.





491
Azure Developer Associate
Which two services guarantee FIFO delivery and once-only processing? (Choose two.)

• Azure Service Bus with duplicate detection
• Azure Service Bus with sessions enabled





492
Azure Developer Associate
What feature lets you validate a Linux Web App deployment and swap to production without downtime?

Deployment slots.





493
Azure Developer Associate
What allows Azure App Service to integrate with private networks (VNets)?
VNet Integration





494
Azure Developer Associate
How do you limit an Azure Functions consumption plan to 10 instances?

Set "functionAppScaleLimit": 10 in the function’s host.json file.





495
Azure Developer Associate
How do you correlate errors from Application Insights exceptions with Azure Monitor CPU usage in a KQL query?

Use join on time bins between the exceptions table and the AzureMetrics query.





496
Azure Developer Associate
Name two platform features that Azure Container Apps adds on top of raw containers.
• Built-in Dapr sidecars for service invocation and pub/sub.
• KEDA-powered event-driven scaling (e.g., scale from 0 on HTTP or KEDA triggers).





497
Azure Developer Associate
How can you group keys in Azure App Configuration?

Use key prefixes (e.g., Prod:Database:ConnString) and labels (e.g., "Production", "Staging").





498
Azure Developer Associate
What three steps secure and document partner APIs in Azure API Management?

  Create an APIM instance and import the existing API.
  Configure OAuth 2.0 in APIM for secure access.
  Implement APIM policies to enforce rate limits and quotas.





499
Azure Developer Associate
Which App Service log type contains the HTML for error pages when HTTP status codes exceed 400?

Detailed error logs.





500
Azure Developer Associate
Front: In Autoscale, if you set maxThroughput to 50 000 RU/s, what’s the billed minimum?
Back: 10% of 50 000 = 5 000 RU/s.





501
Azure Developer Associate
How can each developer use one key to access multiple APIs in API Management without publisher approval?

Define a product containing those APIs and issue a single subscription to that product.





502
Azure Developer Associate
Which Azure Cosmos DB consistency level maximizes write throughput at the cost of ordering guarantees?

Eventual consistency.





503
Azure Developer Associate
Which two parameters are mandatory for ReadItemAsync in the Azure Cosmos DB .NET SDK?

partitionKey and id.





504
Azure Developer Associate
How do you set a 10-second expiration on a Redis key in C#?

csharp
await db.StringSetAsync("test:key", "value", TimeSpan.FromSeconds(10));





505
Azure Developer Associate
How should you store up to 2,000 characters of location and weather info on a blob?

Use blob metadata via an HTTP PUT request (metadata size limit is 8 KB total).





506
Azure Developer Associate
How do you define triggers and bindings in a C# script Azure Function?

Create a function.json file for each function that specifies its triggers and bindings.





507
Azure Developer Associate
Which Application Insights metrics are unaffected by sampling?

Preaggregated standard metrics (used for dashboarding and real-time alerts).





508
Azure Developer Associate
How do you set a container group to restart on failure using the Azure CLI?

Include --restart-policy OnFailure in the az container create command.





509
Azure Developer Associate
Which APIM configuration limits API calls per source within a time interval?

A rate-limit policy (e.g., <rate-limit-by-key> in the inbound section).





510
Azure Developer Associate
What default retention period does Azure Monitor keep high-frequency metrics “hot” in its native metrics store?

93 days.





511
Azure Developer Associate
What Azure Monitor feature lets you build interactive reports combining metrics, logs, and text?

Workbooks.





512
Azure Developer Associate
To which storage locations can Event Hubs Capture deliver streaming data? (Choose three.)

• Azure Blob Storage
• Azure Data Lake Storage Gen1
• Azure Data Lake Storage Gen2





513
JavaScript Concepts
Hot Module Replacement (HMR): A feature in bundlers like Webpack and Vite that allows modules to be replaced without a full page reload during development.





514
JavaScript Concepts
Spread and Rest Operators (...): Operators that expand elements of arrays or objects (spread) and collect multiple elements into a single array parameter (rest).





515
JavaScript Concepts
Switch Statement
switch (expression) {
    case value1:
        // Code to execute if expression === value1
        break;
    case value2:
        // Code to execute if expression === value2
        break;
    // Add more cases as needed
    default:
        // Code to execute if none of the cases match
}





516
JavaScript Concepts
Async/Await: Syntax for handling asynchronous operations more readably, allowing async functions to pause execution with await until a Promise resolves.





517
JavaScript Concepts
Dependency Injection: A design pattern used in frameworks like Angular and NestJS to manage and inject dependencies, promoting modularity and testability.





518
JavaScript Concepts
DOM Manipulation: Using JavaScript to select and modify HTML elements, enabling dynamic and interactive web pages.





519
JavaScript Concepts
GraphQL: A query language for APIs that allows clients to request exactly the data they need, improving efficiency and flexibility over REST.





520
JavaScript Concepts
Parcel: A zero-configuration bundler that automatically handles various file types, offering faster builds with minimal setup.





521
JavaScript Concepts
Arrow Functions: Arrow functions provide a concise syntax for writing functions. They are especially useful for short functions and callbacks. For example:

const add = (a, b) => a + b;





522
JavaScript Concepts
Lazy Loading: Deferring the loading of non-critical resources until they are needed, improving initial load times and performance.





523
JavaScript Concepts
Heroku: A cloud platform for deploying, managing, and scaling Node.js applications with support for various add-ons and integrations.





524
JavaScript Concepts
Express.js: A minimalist web framework for Node.js, facilitating routing, middleware integration, and handling HTTP requests/responses.





525
JavaScript Concepts
TypeScript: A superset of JavaScript that adds static typing, enhancing code quality, maintainability, and developer tooling through type checking.





526
JavaScript Concepts
While Loop
while (condition) {
    // Code to execute as long as condition is true
}





527
JavaScript Concepts
Array reverse Function: The reverse method reverses the order of the elements in an array in place.
let array = [1, 2, 3, 4, 5];
array.reverse();
console.log(array); // Output: [5, 4, 3, 2, 1]





528
JavaScript Concepts
Jest: A JavaScript testing framework by Facebook, supporting unit, integration, and snapshot testing, particularly well-suited for React applications.





529
JavaScript Concepts
Angular: A comprehensive framework by Google for building large-scale applications, utilizing TypeScript, two-way data binding, and dependency injection.





530
JavaScript Concepts
Webpack: A powerful module bundler that compiles JavaScript modules into a single bundle, optimizing assets for production.





531
JavaScript Concepts
Chai: An assertion library that pairs with testing frameworks like Mocha, providing readable and expressive test assertions.





532
JavaScript Concepts
React Hooks: Functions like useState and useEffect that allow functional components to manage state and side effects in React.





533
JavaScript Concepts
MDN Web Docs: Comprehensive documentation for web technologies, including JavaScript, HTML, CSS, and various APIs.





534
JavaScript Concepts
In this example, sayGoodbye is passed as a callback to greet and is executed after the greeting message.

function greet(name, callback) {
    console.log('Hello ' + name);
    callback();
}
function sayGoodbye() {
    console.log('Goodbye!');
}
greet('Jay', sayGoodbye);





535
JavaScript Concepts
Destructuring: Syntax for unpacking values from arrays or properties from objects into distinct variables, improving code readability and conciseness.





536
JavaScript Concepts
Promises: Objects representing the eventual completion or failure of asynchronous operations, allowing chaining with .then() and .catch().





537
JavaScript Concepts
Security Practices: Implementing measures to protect applications from vulnerabilities like Cross-Site Scripting (XSS) and Cross-Site Request Forgery (CSRF).





538
JavaScript Concepts
Netlify: A platform for deploying static sites and serverless functions, providing continuous deployment and built-in CI/CD pipelines.





539
JavaScript Concepts
Responsive Design: Designing web applications to adapt seamlessly across various device sizes and screen resolutions for optimal user experience.





540
JavaScript Concepts
Logical AND (&&) and OR (||) Statements
if (condition1 && condition2) {
    // Code to execute if both condition1 and condition2 are true
}

if (condition1 || condition2) {
    // Code to execute if either condition1 or condition2 is true
}





541
JavaScript Concepts
Template Literals: Use template literals for string interpolation and multi-line strings. They are enclosed by backticks (`) and allow you to embed expressions using ${expression}. For example:

const name = 'Jay';
const greeting = `Hello, ${name}!`;





542
JavaScript Concepts
Variable Declarations (let, const, var): Keywords to declare variables with different scopes and mutability. let and const are block-scoped, while var is function-scoped.





543
JavaScript Concepts
Middleware: Functions in frameworks like Express.js that have access to request and response objects, used for tasks like authentication and logging.





544
JavaScript Concepts
Array slice Function: The slice method returns a shallow copy of a portion of an array into a new array object.
let array = [1, 2, 3, 4, 5];
let slicedArray = array.slice(1, 4); // Output: [2, 3, 4]





545
JavaScript Concepts
Yarn: An alternative package manager to npm, offering faster installs and more reliable dependency management through lock files.





546
JavaScript Concepts
Destructuring: Extracting values from arrays or objects into distinct variables using a concise syntax.





547
JavaScript Concepts
Component-Based Architecture: Building applications by encapsulating functionality into independent, reusable components, commonly used in frontend frameworks.





548
JavaScript Concepts
Array Length Property: Remember to use array.length to get the number of elements in an array. This is a common mistake, but it's crucial for iterating through arrays correctly.
(I had mistakenly used array.len instead)





549
JavaScript Concepts
Testing Library: A family of libraries that encourage testing best practices by focusing on user interactions rather than implementation details.





550
JavaScript Concepts
npm (Node Package Manager): The default package manager for Node.js, used to install, share, and manage JavaScript packages and dependencies.





551
JavaScript Concepts
Closures: Functions that retain access to their lexical scope even when executed outside their original context, enabling data privacy and function factories.





552
JavaScript Concepts
Virtual DOM: An in-memory representation of the real DOM used by libraries like React to optimize and batch DOM updates efficiently.





553
JavaScript Concepts
Dictionary (Object)
let dictionary = {
    key1: "value1",
    key2: "value2"
};

// Accessing values
console.log(dictionary.key1); // Output: value1
console.log(dictionary["key2"]); // Output: value2





554
JavaScript Concepts
Caching Strategies: Techniques like browser caching and service workers to store resources locally, decreasing load times and server requests.





555
JavaScript Concepts
Front: What are the benefits of using callback functions?

Back:
Flexibility: Allows functions to be more modular and reusable.
Asynchronous Handling: Enables handling of asynchronous operations like network requests and timers.
Improved Code Organization: Helps in organizing code by separating concerns and improving readability.





556
JavaScript Concepts
Next.js: A React framework for server-side rendering and static site generation, enhancing performance and SEO for React applications.





557
JavaScript Concepts
A callback function is a function that is passed as an argument to another function and is executed after some operation has been completed. This allows for more flexible and modular code, especially when dealing with asynchronous operations.





558
JavaScript Concepts
Server-Side Rendering (SSR): Rendering web pages on the server before sending them to the client, improving performance and SEO.





559
JavaScript Concepts
Vue.js: A progressive framework for building user interfaces, known for its simplicity and flexibility, with features like directives and single-file components.





560
JavaScript Concepts
Prototype-Based Inheritance: JavaScript's inheritance model where objects inherit properties and methods from a prototype object, enabling dynamic property sharing.





561
JavaScript Concepts
Prettier: A code formatter that enforces consistent styling across codebases, automatically formatting code on save or commit.





562
JavaScript Concepts
Context API: A React feature that provides a way to pass data through the component tree without prop drilling, useful for simple state management.





563
JavaScript Concepts
Template Literals: Enhanced string syntax using backticks, allowing embedded expressions and multi-line strings for better readability.





564
JavaScript Concepts
RESTful APIs: Architectural style for designing networked applications, using HTTP requests to access and manipulate data through standard endpoints.





565
PnP PowerShell
Secure Password Handling
Practices for managing passwords securely in scripts, such as using ConvertTo-SecureString and PSCredential objects, to prevent exposure of sensitive information.





566
PnP PowerShell
System.IO.Stream (System.IO)
Represents a sequence of bytes, such as a file. Used in PowerShell to handle file data streams for operations like uploading files to SharePoint.





567
PnP PowerShell
Get-PnPListItem (PnP.PowerShell)
Fetches items from a SharePoint list based on specified criteria. Enables data retrieval for reporting, analysis, or further processing within scripts.





568
PnP PowerShell
Set-PnPList (PnP.PowerShell)
Modifies properties of a SharePoint list, such as title or description. Enables automated updates and management of list configurations.





569
PnP PowerShell
CSOM (Client-Side Object Model)
An alternative to REST API for interacting with SharePoint from client applications. Provides a different set of libraries and methods for SharePoint operations.





570
PnP PowerShell
Delegated Permissions
Permissions granted to applications to act on behalf of a signed-in user. Requires user consent and is used in interactive authentication scenarios.





571
PnP PowerShell
New-PnPField (PnP.PowerShell)
Creates a new field in a SharePoint list or library. Supports defining field types, settings, and validations for structured data management.





572
PnP PowerShell
Add-PnPFile (PnP.PowerShell)
Uploads a file to a specified SharePoint document library or folder. Supports parameters like -Path for local files and -Stream for uploading via a data stream.





573
PnP PowerShell
Get-AzureADServicePrincipal (AzureAD)
Retrieves information about service principals in Azure Active Directory. Used to manage application identities and their associated permissions.





574
PnP PowerShell
Azure Key Vault Integration
Securely stores and manages secrets, keys, and certificates used by applications. Enhances security by preventing hardcoding of sensitive information in scripts.





575
PnP PowerShell
Client Secret (client_secret)
A confidential key associated with an Azure AD application, used alongside the client ID to authenticate the application in secure authentication flows.





576
PnP PowerShell
New-AzureADApplication (AzureAD)
Creates a new application registration in Azure Active Directory via PowerShell. Automates the process of setting up apps for authentication and API access.





577
PnP PowerShell
Grant-PnPAzureADAppPermission (PnP.PowerShell)
Grants specific API permissions to an Azure AD application directly from PowerShell. Streamlines the permission assignment process for SharePoint access.





578
PnP PowerShell
Set-PnPFileCheckedIn (PnP.PowerShell)
Checks in a previously uploaded file in SharePoint, optionally adding comments. Essential for managing document versions and maintaining collaboration workflows.





579
PnP PowerShell
Remove-PnPUserFromGroup (PnP.PowerShell)
Removes a user from a SharePoint group. Helps in maintaining accurate group memberships and enforcing access policies through scripts.





580
PnP PowerShell
OAuth 2.0 Client Credentials Flow
An authentication method where applications authenticate using a client ID and client secret, enabling server-to-server interactions without user involvement.





581
PnP PowerShell
Write-Verbose (Microsoft.PowerShell.Utility)
Outputs detailed information during script execution when the verbose preference is enabled. Aids in debugging and understanding script flow.





582
PnP PowerShell
SharePoint Site URL
The web address of a SharePoint site (e.g., https://accuityllp.sharepoint.com/sites/ASB), serving as the entry point for accessing site resources and APIs.





583
PnP PowerShell
ConvertFrom-SecureString (Microsoft.PowerShell.Security)
Transforms a secure string object back into plain text. Should be used cautiously to avoid exposing sensitive information.





584
PnP PowerShell
Import-Clixml (Microsoft.PowerShell.Utility)
Deserializes PowerShell objects from an XML format file. Allows retrieving previously exported objects, maintaining their original structure and properties.





585
PnP PowerShell
Export-PnPProvisioningTemplate (PnP.PowerShell)
Exports a SharePoint site's configuration into a provisioning template. Facilitates site replication, migration, and backup through PowerShell.





586
PnP PowerShell
Set-PnPWeb (PnP.PowerShell)
Configures properties of a SharePoint site, such as title, description, and logo. Enables automated site customization and configuration management.





587
PnP PowerShell
Get-PnPList (PnP.PowerShell)
Retrieves a SharePoint list from the connected site. Used to access list properties, items, and metadata for further manipulation or analysis.





588
PnP PowerShell
SharePoint Permissions Levels
Predefined or custom permission sets in SharePoint that determine user access rights, such as Read, Contribute, and Full Control, managing what actions users can perform.





589
PnP PowerShell
New-Object (Microsoft.PowerShell.Utility)
Creates an instance of a .NET Framework or COM object in PowerShell. Essential for handling complex data structures and interacting with .NET classes.





590
PnP PowerShell
Invoke-WebRequest Parameters (Microsoft.PowerShell.Utility)
Includes -Method, -Uri, -Headers, -Body, and others. Facilitates detailed HTTP request configurations for interacting with web services.





591
PnP PowerShell
Environment Variables
Variables that are set at the operating system level and accessible within PowerShell. Used to store configuration data and secrets securely without hardcoding.





592
PnP PowerShell
Remove-PnPFile (PnP.PowerShell)
Deletes a specified file from a SharePoint library or folder. Useful for automating cleanup tasks or managing outdated documents programmatically.





593
PnP PowerShell
PowerShell Remoting
A feature allowing commands to be executed on remote computers. Facilitates managing SharePoint servers and other remote systems through PowerShell scripts.





594
PnP PowerShell
Chained Cmdlets
Using multiple cmdlets in a sequence where each cmdlet processes data output from the previous one. Enhances script efficiency and readability.





595
PnP PowerShell
Retry Logic
A programming practice where failed operations are attempted again after a delay. Essential for handling transient errors like API throttling or network issues.





596
PnP PowerShell
JSON Payloads
Data formatted in JSON used in REST API requests and responses. PowerShell uses ConvertTo-Json and ConvertFrom-Json for handling JSON data structures.





597
PnP PowerShell
ConvertTo-SecureString (Microsoft.PowerShell.Security)
Transforms plain text into a secure string object in PowerShell. Essential for handling sensitive data like passwords and client secrets securely.





598
PnP PowerShell
Connect-PnPOnline (PnP.PowerShell)
Establishes a connection to a SharePoint site using various authentication methods like client credentials or device code flow, enabling subsequent PnP.PowerShell cmdlets to interact with SharePoint.





599
PnP PowerShell
Invoke-PnPRequest (PnP.PowerShell)
Sends custom HTTP requests to SharePoint APIs within PnP.PowerShell scripts. Allows for advanced interactions beyond standard cmdlet capabilities.





600
PnP PowerShell
Import-PnPProvisioningTemplate (PnP.PowerShell)
Imports a provisioning template into a SharePoint site, applying configurations and structures defined in the template. Enables automated site setup and customization.





601
PnP PowerShell
Throttling in SharePoint
Limits the number of API requests to prevent abuse and ensure service stability. Requires implementing retry logic and handling throttling responses in scripts.





602
PnP PowerShell
PowerShell Pipeline
A feature that allows the output of one cmdlet to be passed as input to another cmdlet. Enables chaining commands for efficient data processing.





603
PnP PowerShell
JSON Conversion
Transforms PowerShell objects to JSON format and vice versa using ConvertTo-Json and ConvertFrom-Json. Essential for handling REST API payloads and responses.





604
PnP PowerShell
SharePoint CSOM (Client-Side Object Model)
A programming model that allows interaction with SharePoint data from client applications. Provides an alternative to REST API for performing SharePoint operations.





605
PnP PowerShell
Token Caching
Stores OAuth tokens locally to reduce the need for repeated authentication requests. Enhances script performance and reduces latency in API interactions.





606
PnP PowerShell
SharePoint App Permissions
Defines the access rights granted to SharePoint apps via AppInv.aspx or Azure AD. Controls what resources and actions an app can perform within SharePoint.





607
PnP PowerShell
PSCredential Object (Microsoft.PowerShell.Security)
Stores and manages user credentials securely within PowerShell. Used for authenticating commands that require user-based permissions.





608
PnP PowerShell
API Rate Limits
Restrictions on the number of API calls an application can make within a specific timeframe. Requires managing request rates to avoid exceeding limits and facing throttling.





609
PnP PowerShell
Remove-PnPField (PnP.PowerShell)
Deletes a field from a SharePoint list or library. Useful for cleaning up unused or outdated columns programmatically.





610
PnP PowerShell
Export-Clixml (Microsoft.PowerShell.Utility)
Serializes PowerShell objects to an XML format file. Useful for securely storing complex objects, including credentials, for later retrieval.





611
PnP PowerShell
PSCredential (Microsoft.PowerShell.Security)
A PowerShell object that securely stores a username and password. Utilized for authentication purposes, ensuring sensitive information is handled safely.





612
PnP PowerShell
Add-PnPField (PnP.PowerShell)
Adds a new field (column) to a SharePoint list or library. Supports various field types and configurations for customized data structures.





613
PnP PowerShell
Invoke-RestMethod Parameters
Key parameters include -Method (HTTP method), -Uri (API endpoint), -Headers (authentication and content type), and -Body (data payload), crucial for API interactions.





614
PnP PowerShell
PowerShell Profiles
Scripts that run automatically when PowerShell starts. Used to customize the environment, load modules, and define functions for enhanced productivity.





615
PnP PowerShell
App-Only Authentication
A mode where applications authenticate without a user context, using client credentials to perform operations based on granted permissions. Suitable for automated scripts and services.





616
PnP PowerShell
Invoke-WebRequest (Microsoft.PowerShell.Utility)
Sends HTTP and HTTPS requests to web pages or web services. Similar to Invoke-RestMethod but provides more detailed response information.





617
PnP PowerShell
OAuth 2.0 Authorization Code Flow
An interactive authentication method involving user login and authorization, suitable for applications that can securely handle client secrets and require delegated permissions.





618
PnP PowerShell
SecureString (System.Security)
Represents text that should be kept confidential, such as passwords. Provides methods to encrypt and handle sensitive information securely in scripts.





619
PnP PowerShell
Get-PnPWeb (PnP.PowerShell)
Fetches details about the current SharePoint site, including properties like language, template, and navigation settings. Useful for site audits and management.





620
PnP PowerShell
REST API Endpoints
Specific URLs used to access SharePoint resources via REST API. Includes paths for sites, lists, libraries, and items, enabling targeted operations.





621
PnP PowerShell
Parameter Set Conflict
Occurs when incompatible or conflicting parameters are used together in a PowerShell cmdlet, leading to errors as PowerShell cannot determine the intended operation.





622
PnP PowerShell
Remove-PnPListItem (PnP.PowerShell)
Deletes an item from a SharePoint list. Useful for maintaining data integrity and automating data cleanup processes





623
PnP PowerShell
PowerShell Scopes
Defines the visibility and lifetime of variables and functions within PowerShell. Includes global, script, and local scopes, managing how data is accessed and modified.





624
PnP PowerShell
Token Expiry
The duration an OAuth 2.0 access token remains valid before needing renewal. Scripts must handle token refresh logic to maintain uninterrupted API access.





625
Vocab
Grapheme
noun
SPA: GRAP-heem
IPA: /ˈɡræfiːm/

The smallest unit of written language that carries meaning, such as a letter, a numeral, or a punctuation mark.
Example: The letter "a" in the alphabet is a grapheme that represents a specific phoneme in many languages.





626
Vocab
Jane Eyre
Palliate
(PAL-ee-ate) To alleviate pain or lessen the severity of something, especially symptoms or distress, without removing the cause; can also mean to downplay faults or mistakes.





627
Vocab
Well of Lost Plots, Fforde
Homburg hat
noun | HOM-berg hat
A formal felt hat with a single center dent and a curled brim.
Example: He tipped his homburg hat to the crowd as he arrived.





628
Vocab
Jane Eyre
Spoony
(SPOO-nee) Foolishly or overly sentimental, especially in matters of love or infatuation, often appearing naïve or overly romantic.





629
Vocab
Lost in a Good Book
Cornice: An architectural feature where a projecting, decorative molding crowns a building or structure, often found at the top of walls.





630
Vocab
Structured Credit Combines Debt Instruments:
Structured credit refers to complex financial products created by pooling and repackaging loans, bonds, or other debt obligations, then dividing them into distinct risk-and-return segments called tranches.





631
Vocab
Structured Credit Includes Products like CLOs and CDOs:
Structured credit encompasses instruments such as collateralized loan obligations (CLOs), collateralized debt obligations (CDOs), mortgage-backed securities (MBS), and asset-backed securities (ABS), all designed to repackage and redistribute risk and return.





632
Vocab
Do Androids Dream of Electric Sheep?
Thalamic (thuh-LAM-ik): Relating to the thalamus, a part of the brain that acts as a relay station for sensory and motor signals.





633
Vocab
Well of Lost Plots, Fforde
Reigate
noun | RYE-gate
A market town in Surrey, England.
Example: They enjoyed a day trip to Reigate, exploring its castle ruins.





634
Vocab
Jane Eyre
Piquant
(PEE-kahnt) Having a pleasantly sharp or spicy taste; can also describe something intellectually stimulating or excitingly provocative.





635
Vocab
Jane Eyre
Contumelious Epithet
(con-too-MEE-lee-uhs EP-uh-thet) An insult or scornful nickname intended to express contempt, often delivered with arrogance.





636
Vocab
Lost in a Good Book
Tunguska event: A massive explosion in Siberia (1908) caused by an airburst of a meteoroid or comet, flattening 800 square miles of forest.





637
Vocab
Red Side Story, FForde
Curtilage
Pronunciation: KUR-tuh-lij
Definition: The area immediately surrounding a house or dwelling, often considered part of its property for legal purposes.





638
Vocab
Well of Lost Plots, Fforde
Milliner
noun | MIL-ih-ner
A maker or seller of women’s hats.
Example: She apprenticed with a Parisian milliner to learn haute-couture hat design.





639
Vocab
Well of Lost Plots, Fforde
Panjandrum
noun | pan-JAN-drum
A person who has or claims to have great authority or influence.
Example: The visiting dignitary acted like a panjandrum throughout the ceremony.





640
Vocab
How to Sell a Haunted House
Gethsemane
Pronunciation: geth-SEM-uh-nee
Definition: A garden at the foot of the Mount of Olives in Jerusalem, significant in Christian tradition as the place where Jesus prayed before his arrest; symbolically, a place of intense suffering or spiritual trial.





641
Vocab
Do Androids Dream of Electric Sheep?
Cogitated (KOJ-i-teyt-ed): Past tense of "cogitate," meaning to think deeply or ponder about something.





642
Vocab
Lost in a Good Book
Compère (of a game show): A host or master of ceremonies, responsible for introducing participants and keeping the event flowing.





643
Vocab
Lost in a Good Book
Wisteria: A climbing flowering plant with fragrant, cascading purple or white blooms, often grown on pergolas or trellises.





644
Vocab
Jane Eyre
Salubrious
(suh-LOO-bree-uhs) Describing something beneficial to health or well-being, such as a pleasant climate, nutritious food, or healthy lifestyle.





645
Vocab
Well of Lost Plots, Fforde
Thrombosis
noun | throm-BOH-sis
The formation or presence of a blood clot within a blood vessel.
Example: She was hospitalized with deep-vein thrombosis in her leg.





646
Vocab
Well of Lost Plots, Fforde
Memsahib
noun | MEM-sah-ib
A term used in colonial India for a European woman of rank or authority.
Example: The memsahib surveyed the garden from her veranda, sipping tea.





647
Vocab
Jane Eyre
Fillip
(FIL-ip) A small but impactful boost or stimulus; also refers to a flicking motion made by snapping fingers.





648
Vocab
Well of Lost Plots, Fforde
Gerund
noun | JER-und
A verb form ending in -ing that functions as a noun.
Example: In the sentence “Swimming is fun,” swimming is a gerund.





649
Vocab
Red Side Story, FForde
Gimbal
Pronunciation: GIM-buhl
Definition: A pivoted support that allows the rotation of an object about a single axis, often used in photography and aerospace for stabilization.





650
Vocab
Well of Lost Plots, Fforde
(naval) Pinnance
noun | PIN-ans
A small boat carried aboard a larger ship, used for transporting personnel or light cargo.
Example: The admiral boarded the pinnance for his trip ashore.





651
Vocab
How to Sell a Haunted House
Debride a Wound
Pronunciation: dih-BREED uh woond
Definition: The medical removal of dead, damaged, or infected tissue from a wound to promote healing and reduce the risk of infection.





652
Vocab
Jane Eyre
Cachinnation (kak-ih-NAY-shun)
Loud, uncontrollable laughter, often with a connotation of being excessive, mocking, or even sinister. Derived from the Latin word cachinnare, it emphasizes the intensity of the laugh.





653
Vocab
Ecriture
noun
SPA: ay-KREE-toor
IPA: /ˈɛkrɪtʊr/

A French term for writing or script, often used in literary theory to describe the act or art of writing itself.
Example: The novel's use of écriture gives a distinct rhythm and depth to the narrative.





654
Vocab
Well of Lost Plots, Fforde
Tabula rasa
noun | TAB-yoo-luh RAY-suh
Literally “blank slate”; the philosophical idea that the mind starts without innate content.
Example: Locke argued that we are all born as a tabula rasa and learn through experience.





655
Vocab
Interval Funds May Provide Higher Yields and Diversification:
Interval funds often seek higher returns or income by investing in less liquid, alternative assets, potentially enhancing portfolio diversification beyond traditional stocks and bonds.





656
Vocab
Interval Funds Generally Have Higher Fees and Costs:
Interval funds usually have higher management fees and operational expenses compared to typical mutual funds or ETFs, due to their complexity, specialized asset classes, and active management strategies.





657
Vocab
Structured Credit Carries Complexity and Risk:
Structured credit products are often complex and require careful analysis due to risks related to credit quality, liquidity, underlying asset performance, and market conditions, making them suitable primarily for knowledgeable or institutional investors.





658
Vocab
Do Androids Dream of Electric Sheep?
Cephalic pattern (suh-FAL-ik PAT-ern): Refers to patterns or features related to the head or skull.





659
Vocab
Do Androids Dream of Electric Sheep?
Caterwauled (KAT-er-wawld): Past tense of "caterwaul," meaning to make a shrill, wailing noise like that of a cat in heat; to howl or screech.





660
Vocab
Lacunary
adjective
SPA: LACK-yoo-nary
IPA: /ˈlækjʊnəri/

Characterized by gaps or missing portions, particularly in texts or manuscripts.
Example: The ancient manuscript was lacunary, with several sections of the text lost to time.





661
Vocab
Jane Eyre
Hips and Haws
Fruits of wild roses (hips) and hawthorn trees (haws), commonly seen in hedgerows. These red or orange berries are associated with autumn and are used in herbal remedies and preserves.





662
Vocab
Structured Credit Offers Different Risk Levels:
Structured credit products are typically divided into multiple tranches, each offering varying degrees of risk, return, and priority in repayment, allowing investors to select the risk exposure that suits their investment profile.





663
Vocab
Well of Lost Plots, Fforde
Jetty
noun | JET-ee
A structure projecting into a body of water, used as a landing stage or to protect a harbor.
Example: We walked along the jetty to watch the fishing boats come in.





664
Vocab
Red Side Story, FForde
Proscenium
Pronunciation: pruh-SEE-nee-uhm
Definition: The part of a theater stage in front of the curtain, often framing the stage.





665
Vocab
How to Sell a Haunted House
Truckle
Pronunciation: TRUHK-uhl
Definition: To act in a subservient or groveling manner, often to gain favor or avoid punishment; can also refer to a small wheel of cheese.





666
Vocab
Well of Lost Plots, Fforde
The Decameron
noun | the deh-KAM-er-on
A 14th-century collection of 100 novellas by Giovanni Boccaccio, framed as stories told by ten people sheltering from the Black Death.
Example: The Decameron opens with its narrators deciding to entertain themselves with tales during the plague.





667
Vocab
Do Androids Dream of Electric Sheep?
Kipple (KIP-uhl): A term coined by author Philip K. Dick referring to useless, discarded, or trivial items that tend to accumulate, often leading to clutter.





668
Vocab
Red Side Story, FForde
Osculation
Pronunciation: oss-kyoo-LAY-shun
Definition: The act of kissing; in mathematics, it can also refer to the contact between curves or surfaces.





669
Vocab
Well of Lost Plots, Fforde
Split infinitive
noun | SPLIT in-FIN-uh-tiv
The separation of “to” and the verb in an infinitive (e.g., “to boldly go”).
Example: Despite objections from some grammarians, “to boldly go” remains a famous split infinitive.





670
Vocab
Red Side Story, FForde
Turpitude
Pronunciation: TUR-pi-tood
Definition: Depravity; moral corruption or wickedness.





671
Vocab
Anacoluthon
noun
SPA: an-uh-koh-LOO-thon
IPA: /ˌænəkəˈluːθɒn/

A grammatical construction in which a sentence begins in one way but ends in another, often disrupting the expected syntax or logical sequence.
Example: His speech was full of anacoluthons, making it difficult to follow his intended argument.





672
Vocab
Lost in a Good Book
Perfidious: Deceitful and untrustworthy, often describing betrayal or disloyalty.





673
Vocab
Structured Credit Provides Portfolio Diversification:
Investors utilize structured credit products to diversify portfolios beyond traditional bonds or equities, potentially accessing higher yields or returns not typically achievable through standard debt instruments.





674
Vocab
How to Sell a Haunted House
Trimalleolar Fracture
Pronunciation: try-mal-ee-OH-lar FRAK-chur
Definition: A severe ankle fracture involving all three malleoli—the medial, lateral, and posterior parts of the tibia and fibula—typically requiring surgical repair.





675
Vocab
Jane Eyre
Basin and Ewer
(BAY-sin and YOO-er) A bowl (basin) and jug (ewer) used together for hand or face washing, commonly found before the advent of modern plumbing.





676
Vocab
Well of Lost Plots, Fforde
Invigilating
verb | in-VIJ-ih-lay-ting
Supervising candidates during an examination to ensure proper conduct.
Example: The professor spent the morning invigilating the hall to prevent any cheating.





677
Vocab
Interval Funds Invest in Less Liquid Assets:
Interval funds typically invest in alternative, less liquid assets like real estate, private equity, private debt, and structured credit, granting investors access to opportunities not typically available through conventional investment vehicles.





678
Vocab
Well of Lost Plots, Fforde
Frontispiece
noun | FRUNT-ih-peess
An illustration or decorative page facing the title page of a book.
Example: The antique volume featured an engraved frontispiece of its author.





679
Vocab
How to Sell a Haunted House
Stollen (bread)
Pronunciation: SHTOH-luhn
Definition: A traditional German fruit bread containing dried fruits, nuts, and spices, often dusted with powdered sugar and associated with Christmas festivities.





680
Vocab
Well of Lost Plots, Fforde
Panoply
noun | PAN-uh-plee

A full suit of armor.

A complete or splendid array of something.
Example: The museum’s exhibit displayed a panoply of medieval weaponry.





681
Vocab
How to Sell a Haunted House
Camellia
Pronunciation: kuh-MEE-lee-uh
Definition: An evergreen shrub native to Asia, prized for its glossy leaves and showy, rose-like flowers. Commonly used in landscaping and known for varieties like Camellia japonica and Camellia sinensis (the tea plant).





682
Vocab
Pharmacogenetic Markers
Pronunciation: FAR-mah-koh-juh-NET-ik MAR-kurz
Definition: Genetic indicators that predict how an individual will respond to specific medications, guiding personalized treatment for better efficacy and reduced side effects.





683
Vocab
Well of Lost Plots, Fforde
Pinafore
noun | PIN-uh-for

A sleeveless garment worn over a dress, like an apron.

A light sleeveless dress.
Example: She wore a blue gingham pinafore while painting in the studio.





684
Vocab
Jane Eyre
Beldame
(BEL-dame) An old woman, sometimes used respectfully for a grandmother, or pejoratively to describe a hag or crone.





685
Vocab
Red Side Story, FForde
Semolina
Pronunciation: sem-uh-LEE-nuh
Definition: A coarse flour made from durum wheat, commonly used in making pasta and couscous.





686
Vocab
Well of Lost Plots, Fforde
Insouciance
noun | in-SOO-see-ance
Casual lack of concern; indifference.
Example: His insouciance about deadlines frustrated his teammates.





687
Vocab
Interval Funds Carry Redemption Risk:
Because interval funds permit redemptions only periodically—and often limit the total amount redeemable in each interval (commonly 5%-25% of assets)—investors may face difficulty liquidating positions quickly if the need arises.





688
Vocab
Well of Lost Plots, Fforde
Foolscap
noun | FOOL-skap
A large sheet of writing paper, traditionally about 13 × 17 inches.
Example: He wrote his thesis on foolscap before transferring it to the computer.





689
Vocab
How to Sell a Haunted House
Probate
Pronunciation: PROH-bayt
Definition: The legal process of validating a deceased person’s will and administering their estate according to that will or state law.





690
Vocab
Palimpsest
noun
SPA: PAL-imps-est
IPA: /ˈpælɪmpsɛst/

A manuscript or document that has been written on, scraped off, and reused, often revealing traces of previous writings beneath the surface.
Example: Archaeologists discovered an ancient palimpsest where earlier texts were still legible under the more recent writing.





691
Vocab
Lost in a Good Book
Pelmet(s): A decorative framework or fabric cover above a window, concealing curtain fittings or rods.





692
Vocab
Lost in a Good Book
Lerwick: The main town and port of the Shetland Islands, Scotland, known for its fishing and maritime history.





693
Vocab
Jingo, Pratchett
Fastidious
adjective | fa-STID-ee-us
Very attentive to detail; hard to please; concerned about cleanliness or precision.
Example: She was fastidious about keeping her workspace spotless.





694
Vocab
How to Sell a Haunted House
Codicil
Pronunciation: KOH-duh-sil
Definition: A legal document that modifies, explains, or adds to a previously executed will without replacing it entirely.





695
Vocab
How to Sell a Haunted House
Crewelwork
Pronunciation: KROO-uhl-wurk
Definition: A type of surface embroidery using wool yarn to create decorative floral or animal motifs on linen or cotton fabric.





696
Vocab
Well of Lost Plots, Fforde
Eminence grise
noun | EM-uh-nence GREEZ
A powerful advisor or decision-maker working behind the scenes.
Example: Although never elected, the minister’s chief of staff was the real eminence grise.





697
Vocab
Red Side Story, FForde
Probity
Pronunciation: PROB-ih-tee
Definition: Adherence to the highest principles and ideals; uprightness and integrity.





698
Vocab
How to Sell a Haunted House
Tulle
Pronunciation: tool
Definition: A lightweight, fine netting often used in veils, gowns, and tutus, typically made from silk, nylon, or rayon.





699
Vocab
Lost in a Good Book
Impresario: A manager or producer of theatrical, musical, or other artistic performances, often entrepreneurial in nature.





700
Vocab
Well of Lost Plots, Fforde
Inveigle
verb | in-VAY-guhl
To entice, lure, or persuade by flattery or deception.
Example: He tried to inveigle his way into the VIP lounge using a fake invitation.





701
Vocab
Lost in a Good Book
Antimacassar: A small cloth placed on furniture, especially chair backs, to protect against grease and wear, historically from hair oil ("macassar oil").





702
Vocab
Lost in a Good Book
Phaeton (bodied automobile): A type of early open-top car with no fixed roof, evoking the design of 19th-century horse-drawn carriages.





703
Vocab
Do Androids Dream of Electric Sheep?
Jug-eared (JUHG-eerd): Describing someone with large, protruding ears that resemble the handles of a jug.





704
Vocab
Jingo, Pratchett
Rotas
noun (plural) | ROH-tuhs
Schedules or lists showing when people are assigned to particular duties or tasks, especially in British English.
Example: The hospital staff checked the rotas to see who was on night duty.





705
Vocab
Jingo, Pratchett
Cruet
noun | KROO-it
A small container or bottle for holding liquids like oil or vinegar, often part of a dining set.
Example: The table was set with a cruet of balsamic vinegar and olive oil.





706
Vocab
Well of Lost Plots, Fforde
Spinney (of trees)
noun | SPIN-ee
A small thicket or grove of trees.
Example: The children hid in the spinney during their game of hide-and-seek.





707
Vocab
Something Rotten, Fforde
Salver
noun | SAL-ver
A flat tray, typically made of silver, used for serving food or drinks.
Example: The butler carried the tea on a polished salver.





708
Vocab
Something Rotten, Fforde
Barnaby Rudge
noun | BAR-nuh-bee RUHJ
A historical novel by Charles Dickens, set during the Gordon Riots of 1780, blending romance, mystery, and political unrest.
Example: “Barnaby Rudge” is one of Dickens’s lesser-known but richly atmospheric novels.





709
Vocab
Jingo, Pratchett
Dekko
noun | DEK-oh
A quick look or glance, chiefly British slang.
Example: He took a dekko at the engine before deciding it needed repairs.





710
Vocab
Well of Lost Plots, Fforde
Lych-gate
noun | LICH-gate
A roofed gateway at the entrance to a churchyard, often where a coffin rests before burial.
Example: The mourners paused under the ancient lych-gate before entering the churchyard.





711
Vocab
Something Rotten, Fforde
Paella
noun | pah-AY-yuh
A Spanish rice dish originally from Valencia, typically made with seafood, meat, and vegetables.
Example: We shared a large pan of seafood paella by the beach.





712
Vocab
Jingo, Pratchett
Cornice
noun | KOR-nis
A decorative molding that crowns a building or furniture element, often found where the wall meets the ceiling.
Example: The ornate cornice added elegance to the room’s architecture.





713
Vocab
Something Rotten, Fforde
Muslin (curtains)
noun | MUZ-lin
A lightweight cotton fabric, often used for curtains or clothing.
Example: The muslin curtains let in a soft, diffused light.





714
Vocab
Jingo, Pratchett
Crinoline
noun | KRIN-uh-lin
A stiffened or structured fabric or petticoat worn under a skirt to give it a full shape, popular in the 19th century.
Example: Her gown was supported by a wide crinoline that swayed as she walked.





715
Vocab
Something Rotten, Fforde
Florin
noun | FLOR-in
A former British coin worth two shillings, or one-tenth of a pound, used before decimalization.
Example: He found an old florin in the attic among his grandfather’s coins.





716
Vocab
Something Rotten, Fforde
Nacelle
noun | nuh-SELL
An enclosed housing on an aircraft or wind turbine, typically containing engines or equipment.
Example: The jet’s engine nacelle was inspected before takeoff.





717
Vocab
Something Rotten, Fforde
Rusk
noun | RUSK
A dry, hard biscuit or twice-baked bread, often used for teething babies or in soups.
Example: She dipped a rusk into her tea for a quick snack.





718
Vocab
Something Rotten, Fforde
Bête noire
noun | BET NWAHR
A person or thing that one particularly dislikes or avoids.
Example: Bureaucracy was his bête noire.





719
Vocab
Jingo, Pratchett
Windlass
noun | WIND-luhs
A mechanical device used for lifting or hauling, typically consisting of a horizontal cylinder turned by a crank or motor.
Example: The sailors used a windlass to raise the anchor.





720
Vocab
Something Rotten, Fforde
Brocade (dress)
noun | bro-KAYD
A rich fabric woven with a raised pattern, often in gold or silver thread, used in formal garments.
Example: Her brocade dress shimmered under the ballroom lights.





721
Vocab
Jingo, Pratchett
Effendi
noun | eh-FEN-dee
A title of respect or courtesy for a man, especially in Turkey or formerly in the Ottoman Empire.
Example: The effendi greeted us warmly as we entered his home.





722
Vocab
Jingo, Pratchett
Equerry
noun | EK-wuh-ree
An officer of a royal household who attends or assists members of the royal family.
Example: The equerry accompanied the prince during his official visit.





723
Vocab
Jingo, Pratchett
Vindaloo
noun | VIN-duh-loo
A spicy Indian curry dish, often made with meat, vinegar, and chili peppers, originally from Goa.
Example: He ordered a lamb vindaloo, knowing it would be fiery hot.





724
Vocab
Something Rotten, Fforde
Owen Wister

An American writer best known for his novel The Virginian (1902), considered the first true Western novel.
Example: Owen Wister’s work laid the foundation for cowboy fiction.





725
Vocab
Jingo, Pratchett
Pro tem
adverb/adjective | proh TEM
Short for pro tempore, meaning “for the time being” or temporary.
Example: He served as chairperson pro tem until a permanent replacement was elected.





726
Vocab
Jingo, Pratchett
Scull
noun/verb | SKUHL
A type of oar used in rowing, or the act of propelling a boat using such oars.
Example: She learned to scull on the calm waters of the lake.





727
Vocab
Something Rotten, Fforde
Nobble
verb | NOB-ul
British slang meaning to tamper with or bribe, especially in the context of cheating.
Example: The jockey was accused of trying to nobble the favorite.





728
Vocab
Something Rotten, Fforde
Cazique
noun | kuh-ZEEK
A native chief in parts of Latin America and the Caribbean during the colonial period.
Example: The Spanish chroniclers often referred to the local ruler as a cazique.





729
Vocab
Something Rotten, Fforde
Creosote
noun | KREE-uh-soht
A dark, oily liquid used to preserve wood, especially in railway ties and fences.
Example: The fence smelled strongly of creosote after being treated.





730
Vocab
Something Rotten, Fforde
Zane Grey

An American author known for popularizing the Western genre in the early 20th century. Best Known for Riders of the Purple Sage (1912).
Example: Zane Grey’s novels helped define the mythic American frontier.





731
Vocab
Something Rotten, Fforde
De rigueur
adjective | duh ree-GUR
Required by etiquette or current fashion; socially obligatory.
Example: Wearing black tie was de rigueur at the gala.





732
Vocab
Something Rotten, Fforde
Timpet
noun | TIM-pet
archaic term, possibly a variant of “timpet” meaning a small hill or mound (usage rare or regional).
Example: The sheep grazed peacefully on the grassy timpet.





733
Vocab
Something Rotten, Fforde
Thylacine
noun | THY-luh-seen
A now-extinct carnivorous marsupial native to Tasmania, also known as the Tasmanian tiger.
Example: The thylacine was declared extinct in the 20th century, though sightings are still reported.





734
Vocab
Something Rotten, Fforde
Coriolanus
noun | kor-ee-uh-LAY-nus
A tragedy by William Shakespeare about a Roman general whose pride leads to his downfall.
Example: “Coriolanus” explores themes of honor, loyalty, and political manipulation.





735
Vocab
Something Rotten, Fforde
Buddleia
noun | BUD-lee-uh
A flowering shrub, also known as the butterfly bush, popular for attracting pollinators.
Example: The garden was full of buddleia, drawing in bees and butterflies.





736
Vocab
Something Rotten, Fforde
Tannoy
noun | TAN-oy
A brand name often used generically in the UK for a public address system.
Example: The tannoy announced the train’s arrival at Platform 3.