





1
DNS
TSIG (Transaction SIGnature)
A security mechanism used to authenticate DNS messages, ensuring that zone transfers and other DNS communications are from trusted sources. TSIG uses shared secret keys and cryptographic signatures to verify the authenticity of DNS transactions.





2
DNS
Active Directory-Integrated Zones
DNS zones that store their data within the Active Directory database. This integration allows for secure dynamic updates and automatic replication of DNS data across all domain controllers, enhancing security and redundancy.





3
DNS
DNS Scavenging
An automated process in Windows DNS that removes stale or outdated DNS records. It helps maintain DNS integrity by deleting records no longer valid, such as those from devices removed from the network or with changed IP addresses.





4
DNS
No-Refresh Interval
In DNS scavenging, the period during which the timestamp on a DNS record cannot be updated. It prevents excessive DNS updates, helping determine when a record becomes stale and eligible for removal during scavenging.





5
SharePoint
How can you retrieve the metadata of a specific file, including its properties, using the SharePoint REST API?

GET /_api/web/GetFileByServerRelativeUrl('/Documents/Report.docx')?$expand=ListItemAllFields





6
SharePoint
Which REST API endpoint would you use to check if a file named "Report.docx" exists in the "Documents" library of a SharePoint site?

/_api/web/GetFolderByServerRelativeUrl('/Documents')/Files('Report.docx')





7
SharePoint
For more advanced scenarios or to leverage modern authentication libraries, you can use the Microsoft Authentication Library (MSAL) in PowerShell. This approach provides enhanced security features and easier token management.

a. Install MSAL.PS Module
powershell
> Install-Module -Name MSAL.PS -Scope CurrentUser





8
SharePoint
Application Permissions (App-Only)
Definition: Permissions granted directly to the application, without user context. The app operates independently of any user.
Use Case: Ideal for background services, daemons, or automated scripts that need to run without user interaction.
Authentication Flow: Utilizes the Client Credentials Flow with client ID and client secret or certificate.





9
Azure Functions + PP365
Client Credentials Grant
An OAuth 2.0 authentication flow where an application uses its own credentials (client ID and secret) to obtain an access token. This grant type is used for server-to-server interactions, allowing applications like Azure Functions to authenticate with Azure AD without user involvement.





10
Azure Functions + PP365
HTTP Triggers
A type of function trigger that activates an Azure Function in response to HTTP requests. Python Azure Functions with HTTP triggers can handle RESTful API calls, webhooks, and other HTTP-based interactions, making them suitable for building APIs and integrating with web services.





11
Azure Functions + PP365
Service Bus Triggers
Triggers that activate Azure Functions in response to messages in Azure Service Bus queues or topics. Python functions with Service Bus triggers can process asynchronous messages, enabling decoupled and scalable communication between different parts of an application or between services.





12
Azure Functions + PP365
XMLHttpRequest vs. Fetch API
Both are JavaScript APIs for making HTTP requests from web pages. XMLHttpRequest is older and more verbose, while the Fetch API is modern, promise-based, and provides a more streamlined approach to handling asynchronous requests, making it preferable for integrating custom scripts in Dynamics 365.





13
Azure Functions + PP365
Azure AD TokenRequestContext
A context object used in Azure AD token acquisition processes, specifying the scopes and resources for which an access token is requested. TokenRequestContext ensures that tokens are issued with the appropriate permissions and are valid for the intended resources, facilitating secure and targeted access in applications.





14
Azure Functions + PP365
Function App Secrets
Sensitive information required by Azure Functions, such as API keys or connection strings. Python Azure Functions manage secrets through environment variables, Azure Key Vault integrations, or managed identities, ensuring that sensitive data is stored securely and accessed only by authorized functions.





15
Azure Functions + PP365
Azure AD Grant Admin Consent
The process of obtaining organizational approval for an application’s requested API permissions in Azure AD. Granting admin consent ensures that applications have the necessary permissions to operate within the organization's security policies, enabling seamless and authorized interactions with Azure services.





16
Azure Functions + PP365
local.settings.json
A configuration file used during local development of Azure Functions. It stores environment variables, connection strings, and other settings required to run functions locally. This file is not deployed to Azure, ensuring that sensitive information remains secure during development.





17
PnP Powershell
Add-PnPListItem (PnP.PowerShell)
Adds a new item to a SharePoint list. Enables automated data entry and integration with other systems by programmatically populating list data.





18
PnP Powershell
Get-PnPFile (PnP.PowerShell)
Retrieves a file from a SharePoint document library. Allows downloading files to a local path or accessing file properties and content directly within PowerShell scripts.





19
PnP Powershell
API Permissions
Permissions granted to an application to access specific APIs like SharePoint or Microsoft Graph. Can be delegated (user-based) or application-level (app-only).





20
PnP Powershell
Add-PnPUserToGroup (PnP.PowerShell)
Adds a user to a specified SharePoint group. Facilitates automated user management and access control within SharePoint environments.





21
PnP Powershell
Get-PnPConnection (PnP.PowerShell)
Retrieves details about the current PnP.PowerShell connection, including authentication method, scopes, and connection type, aiding in troubleshooting and verification.





22
PnP Powershell
Scopes
Define the level of access an application has to resources. Examples include Files.ReadWrite.All and Sites.ReadWrite.All, determining what operations the app can perform.





23
PnP Powershell
System.IO.File (System.IO)
A PowerShell class providing methods for file manipulation, such as reading, writing, opening, and closing files, essential for handling file operations in scripts.





24
PnP Powershell
OAuth 2.0 Authorization Code Flow
An interactive authentication method involving user login and authorization, suitable for applications that can securely handle client secrets and require delegated permissions.





25
PnP Powershell
Azure AD App Registration
The process of registering an application in Azure Active Directory to obtain identifiers like client ID and tenant ID, enabling the app to authenticate and access Microsoft APIs.





26
PnP Powershell
Connect-PnPOnline (PnP.PowerShell)
Establishes a connection to a SharePoint site using various authentication methods like client credentials or device code flow, enabling subsequent PnP.PowerShell cmdlets to interact with SharePoint.





27
PnP Powershell
OAuth 2.0 Client Credentials Flow
An authentication method where applications authenticate using a client ID and client secret, enabling server-to-server interactions without user involvement.





28
PnP Powershell
Remove-PnPUserFromGroup (PnP.PowerShell)
Removes a user from a SharePoint group. Helps in maintaining accurate group memberships and enforcing access policies through scripts.





29
PnP Powershell
PSCredential (Microsoft.PowerShell.Security)
A PowerShell object that securely stores a username and password. Utilized for authentication purposes, ensuring sensitive information is handled safely.





30
Home Network Project
Front: What is Prometheus and what is its role in network monitoring?

Back: Prometheus is an open-source monitoring and alerting toolkit designed for reliability and scalability. It collects and stores metrics from various services and systems, allowing users to query and analyze performance data to monitor the health and performance of their network and applications.





31
Home Network Project
Front: What is Network Latency and how can it affect network performance?

Back: Network Latency refers to the time it takes for data to travel from the source to the destination across a network. High latency can result in delays, slow application performance, lag in real-time communications, and poor user experiences, especially in activities like gaming, video conferencing, and streaming.





32
Home Network Project
Front: What is a Docker Compose file and what is it used for?

Back: A Docker Compose file (docker-compose.yml) is a YAML file that defines and configures multi-container Docker applications. It specifies the services, networks, and volumes needed for the application, allowing users to start and manage all containers with a single command (docker-compose up).





33
Azure Functions + Visual Studio
ASP.NET provides comprehensive authentication and authorization mechanisms, such as ASP.NET Identity, for managing users and roles. It supports external authentication providers like Google and Facebook, allowing you to integrate them into your application seamlessly.





34
Azure Functions + Visual Studio
ASP.NET Razor syntax is a streamlined way to integrate C# code into HTML pages. Razor allows developers to write dynamic web pages by combining HTML and server-side logic seamlessly.





35
Azure Functions + Visual Studio
ASP.NET supports caching to improve performance by reducing database calls and loading times. You can cache data at different levels, such as in-memory caching, distributed caching, or output caching, to increase the responsiveness of your application.





36
Azure Functions + Visual Studio
An Azure Function is implemented as a static class (.NET). The class provides a static, asynchronous method named Run, which acts as the entry point for the class. The parameters passed to the Run method provide the context for the trigger. If it's an HTTP trigger, the function receives an HttpRequest object.





37
Azure Functions + Visual Studio
ASP.NET is a powerful framework for building dynamic web applications and services. It runs on the .NET platform, allowing developers to use multiple languages like C#, F#, and VB.NET to create modern web applications.





38
FSLogix
Q: What is the maximum supported size of a VHDX file in FSLogix?
A: VHDX files can support up to 64 TB, making them suitable for large-scale enterprise environments where user profiles may require substantial storage capacity.





39
FSLogix
During a first-time sign-in, FSLogix creates the container for the user in C:\ProgramData\FSLogix\Cache and mounts the container to the virtual machine. Next, FSLogix sets up all the necessary redirections for the user's profile. Then the User Profile Service creates the user's profile into the local cache.





40
FSLogix
Q: What is the main difference between FSLogix Profile Containers and traditional roaming profiles?
A: FSLogix uses VHDX containers to store user profiles, ensuring portability and faster logons, while traditional roaming profiles can become fragmented and inconsistent across multiple virtual machines.





41
FSLogix
Q: How does FSLogix Profile Container enhance multi-session environments like Azure Virtual Desktop?
A: In multi-session environments, FSLogix Profile Containers ensure that user profiles are loaded quickly and consistently, regardless of which session or virtual machine the user logs into, ensuring a persistent and smooth experience even when multiple users share the same infrastructure.





42
FSLogix
Q: What happens to a FSLogix Profile Container when a user logs off?
A: When a user logs off, the changes made to the profile are saved back into the Profile Container (VHDX file), ensuring that all settings and data are retained for the next session.





43
FSLogix
Using Cloud Cache puts a performance and storage requirement on the virtual machine to accommodate the extra I/O operations and storage required by the local cache.





44
FSLogix
Data is written to all storage providers regardless of which provider is used during data hydration.
Performance (latency, utilization, bottlenecks) of a storage provider affects its sync status with the local copy.
Having one (1) or more provider that is behind in updates from local cache could be an indicator of an under performing storage provider.





45
FSLogix
Q: How does FSLogix prevent user profile corruption in virtual desktop sessions?
A: FSLogix stores user profiles in isolated containers (VHDX), reducing the chances of corruption by ensuring the profile is handled in a controlled environment that can be mounted and saved properly.





46
Audit Report Tracker (Sharepoint List)
Permissions (SharePoint Permissions)
Definition: Settings that control what users can and cannot do in SharePoint (e.g., View, Edit, Delete).
Context: Permissions can be set at various levels such as the site, list, or item level.





47
Audit Report Tracker (Sharepoint List)
Column (SharePoint Column)
Definition: A field in a SharePoint list that holds a specific type of data (e.g., text, number, date, choice).
Context: Columns define the structure of the data within a SharePoint list or library.





48
Audit Report Tracker (Sharepoint List)
Create Column in List (for creating new columns in a SharePoint list):

Endpoint: POST https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/columns
Description: Creates a new column in the specified SharePoint list.





49
Audit Report Tracker (Sharepoint List)
Content Type (SharePoint)
Definition: A reusable set of columns (fields) and settings in SharePoint that define a specific kind of content (e.g., document, task).
Context: A list can have multiple content types, each with different columns and settings depending on the type of data being tracked.





50
Audit Report Tracker (Sharepoint List)
List Columns Endpoint (for getting column information in a SharePoint list):

Endpoint: GET https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/columns
Description: Retrieves information about the columns in a specified list.





51
IW Migration
SSMS Query Editor
A text-based interface in SQL Server Management Studio where you can write, run, and optimize SQL queries. It supports syntax highlighting, IntelliSense, and execution plans, helping users test logic, retrieve data, and troubleshoot issues efficiently.





52
IW Migration
Linked Server (SQL Server)
A configuration that allows SQL Server to run queries against remote data sources as if they were local tables. This enables federated queries, joining data across different servers and even different database platforms.





53
IW Migration
Forms (Access)
User-friendly interfaces for entering, displaying, and editing data in tables. They can incorporate buttons, dropdowns, and validation rules, making data input more efficient and consistent, and often serve as the primary user interaction layer.





54
IW Migration
SSIS (SQL Server Integration Services)
A platform for building enterprise-level data integration, transformation, and migration workflows. While not directly in SSMS, SSIS packages can orchestrate complex ETL operations, complementing Access-to-SQL-Server migrations and ongoing data maintenance.





55
IW Migration
Locking and Concurrency Control (SQL Server)
Techniques to manage simultaneous data access, preventing conflicts and ensuring consistency. Locks, isolation levels, and optimistic concurrency are tools that balance performance with data correctness when multiple users edit data simultaneously.





56
Todd Ideas
In Azure AI Document Intelligence, all customers in the same region share the temporary storage. The customer’s data is logically isolated from other customers with their Azure subscription and API credentials.





57
Todd Ideas
In Azure AI Document Intelligence, Custom models are trained using your labeled datasets to extract distinct data from forms and documents, specific to your use cases. Standalone custom models can be combined to create composed models.
Custom neural | Extract data from mixed-type documents.
Custom template | Extract data from static layouts.
Custom composed | Extract data using a collection of models.





58
Todd Ideas
In Azure AI Document Intelligence, prebuilt Document Intelligence seamlessly integrates with Azure Cognitive Search, enabling automated indexing and content extraction from processed documents, thereby enhancing search capabilities and data discoverability across enterprise repositories.





59
Todd Ideas
In Azure AI Document Intelligence, The results from prebuilt models come as JSON payloads with key-value pairs that include both the extracted data and confidence scores. Use confidence thresholds to filter out less reliable data, and design your application logic to accommodate any missing or unexpected fields.





60
Todd Ideas
In Azure AI Document Intelligence, Prebuilt models enable you to add intelligent document processing to your apps and flows without having to train and build your own models.
Unified US tax | Extract from any US tax forms supported.
US Tax W-2 | Extract taxable compensation details.
US Tax 1099 | Extract 1099 variation details.
US Tax 1040 | Extract 1040 variation details.





61
Open Source/GitHub
Contributor

An individual who contributes code, documentation, or other resources to an open source project, helping to improve and maintain the project’s quality.





62
Open Source/GitHub
Code Review

The process where project maintainers and contributors examine changes proposed in a pull request to ensure code quality, functionality, and adherence to guidelines.





63
Open Source/GitHub
Hotfix

An urgent fix applied to a project to resolve critical bugs or security vulnerabilities, typically merged quickly into the main codebase.





64
Open Source/GitHub
PEP 8

Python Enhancement Proposal 8, the style guide for writing clean and readable Python code, outlining conventions for code layout and formatting.





65
Open Source/GitHub
Pull Request (PR)

A request to merge changes from your fork or branch into the original repository, facilitating code review and collaboration with project maintainers.





66
Open Source/GitHub
GitHub Actions

A feature on GitHub that allows automation of workflows, such as running tests or deploying code, in response to events like pull requests.





67
JavaScript Concepts
Fetch API / Axios: Tools for making HTTP requests from the browser, allowing communication with backend services and APIs.





68
JavaScript Concepts
Prototype-Based Inheritance: JavaScript's inheritance model where objects inherit properties and methods from a prototype object, enabling dynamic property sharing.





69
JavaScript Concepts
Express.js: A minimalist web framework for Node.js, facilitating routing, middleware integration, and handling HTTP requests/responses.





70
JavaScript Concepts
TypeScript: A superset of JavaScript that adds static typing, enhancing code quality, maintainability, and developer tooling through type checking.





71
JavaScript Concepts
Parcel: A zero-configuration bundler that automatically handles various file types, offering faster builds with minimal setup.





72
JavaScript Concepts
Hot Module Replacement (HMR): A feature in bundlers like Webpack and Vite that allows modules to be replaced without a full page reload during development.





73
JavaScript Concepts
Variable Declarations (let, const, var): Keywords to declare variables with different scopes and mutability. let and const are block-scoped, while var is function-scoped.





74
JavaScript Concepts
Mocha: A flexible testing framework for Node.js, allowing developers to choose assertion libraries like Chai for writing tests.





75
JavaScript Concepts
Destructuring: Syntax for unpacking values from arrays or properties from objects into distinct variables, improving code readability and conciseness.





76
JavaScript Concepts
npm (Node Package Manager): The default package manager for Node.js, used to install, share, and manage JavaScript packages and dependencies.





77
JavaScript Concepts
Lazy Loading: Deferring the loading of non-critical resources until they are needed, improving initial load times and performance.





78
JavaScript Concepts
Promises: Objects representing the eventual completion or failure of asynchronous operations, allowing chaining with .then() and .catch().





79
JavaScript Concepts
MDN Web Docs: Comprehensive documentation for web technologies, including JavaScript, HTML, CSS, and various APIs.





80
JavaScript Concepts
Dictionary (Object)
let dictionary = {
    key1: "value1",
    key2: "value2"
};

// Accessing values
console.log(dictionary.key1); // Output: value1
console.log(dictionary["key2"]); // Output: value2





81
JavaScript Concepts
Switch Statement
switch (expression) {
    case value1:
        // Code to execute if expression === value1
        break;
    case value2:
        // Code to execute if expression === value2
        break;
    // Add more cases as needed
    default:
        // Code to execute if none of the cases match
}





82
JavaScript Concepts
RESTful APIs: Architectural style for designing networked applications, using HTTP requests to access and manipulate data through standard endpoints.





83
JavaScript Concepts
Array slice Function: The slice method returns a shallow copy of a portion of an array into a new array object.
let array = [1, 2, 3, 4, 5];
let slicedArray = array.slice(1, 4); // Output: [2, 3, 4]





84
JavaScript Concepts
Array Length Property: Remember to use array.length to get the number of elements in an array. This is a common mistake, but it's crucial for iterating through arrays correctly.
(I had mistakenly used array.len instead)





85
JavaScript Concepts
Context API: A React feature that provides a way to pass data through the component tree without prop drilling, useful for simple state management.





86
JavaScript Concepts
Yarn: An alternative package manager to npm, offering faster installs and more reliable dependency management through lock files.





87
JavaScript Concepts
Caching Strategies: Techniques like browser caching and service workers to store resources locally, decreasing load times and server requests.





88
Powershell Modules
Force Parameter (-Force)

Definition: A parameter used with Import-Module to reload a module even if it's already imported.
Explanation: Useful for ensuring the latest version of a module is loaded or to overwrite existing module imports.





89
Powershell Modules
Directory Path for Modules

Definition: The file system locations where PowerShell modules are stored.
Explanation: Common directories include C:\Program Files\PowerShell\Modules for all users and C:\Users\<Username>\Documents\PowerShell\Modules for individual users.





90
Powershell Modules
Module Auto-Import

Definition: See Auto-Import above.
Explanation: Allows modules to be imported automatically when their commands are used, streamlining workflow.





91
Powershell Modules
Dot Sourcing

Definition: A method to load functions and variables from a script into the current session.
Explanation: Not directly discussed, but related to loading scripts and modules. Typically done using a dot (.) before the script path.





92
Powershell Modules
AllUsers Scope

Definition: An installation scope that makes a PowerShell module available to all users on the system.
Explanation: When installing a module with -Scope AllUsers, it requires administrative privileges and places the module in a system-wide directory, typically C:\Program Files\PowerShell\Modules.





93
Powershell Modules
Cmdlet

Definition: A lightweight command used in the PowerShell environment.
Explanation: Cmdlets follow a Verb-Noun naming pattern (e.g., Get-Module, Import-Module) and perform specific functions within PowerShell.





94
Powershell Modules
Module Manifest

Definition: See Module Manifest (.psd1) above.
Explanation: Provides metadata and configuration for modules, ensuring they load correctly with specified dependencies and exported commands.





95
Powershell Modules
Import-Module

Definition: A cmdlet used to load a PowerShell module into the current session.
Explanation: Makes the module's cmdlets and functions available for use. Example: Import-Module -Name Az.





96
Powershell Modules
Uninstall-Module

Definition: A cmdlet used to remove a module from the system.
Explanation: Example: Uninstall-Module -Name ActiveDirectory removes the ActiveDirectory module.





97
Powershell Modules
PowerShell Module

Definition: A package that contains PowerShell cmdlets, functions, scripts, and other resources.
Explanation: Extends PowerShell’s functionality and can be shared or reused across different environments and users.





98
Powershell Modules
Ensure scripts use the correct module versions to maintain compatibility.
Example:
Import-Module -Name Az -RequiredVersion 5.0.0





99
Powershell Modules
Installing a Module:
Install-Module -Name Az -Scope CurrentUser

Importing a Module:
Import-Module -Name Az





100
Powershell Modules
Exporting Functions and Cmdlets
Definition: The process of making functions and cmdlets available to users when a module is imported.
Explanation: Defined in the module's .psm1 file and specified in the module manifest (.psd1) under FunctionsToExport, CmdletsToExport, etc.





101
Powershell Modules
New-AzVM

Definition: Deploys a new Azure Virtual Machine.
Example Usage: New-AzVM -ResourceGroupName "TestResourceGroup" -Name "TestVM" -Location "EastUS" -Image "Win2019Datacenter".





102
Powershell Modules
Module.dll

Definition: A dynamic link library file that can be part of a PowerShell module.
Explanation: Contains compiled code (e.g., C#) that can be used by PowerShell modules for enhanced performance or functionality.





103
Powershell Modules
Get-Help <CmdletName> -Detailed

Definition: Retrieves detailed help information for a specific cmdlet.
Example Usage: Get-Help Get-AzVM -Detailed provides comprehensive information about the Get-AzVM cmdlet.





104
Powershell Modules
Get-Module -ListAvailable

Definition: Lists all modules installed on the system that are available to be imported.
Explanation: Shows modules in all module paths, regardless of whether they are currently loaded.





105
WSL + Kali Linux
/etc/wsl.conf
A configuration file in Linux distributions that allows you to control WSL behavior at the system level, such as automating the mount points for drives, configuring interop with Windows tools, and controlling networking options.





106
WSL + Kali Linux
wsl with Docker
Docker can run on WSL 2, which enables you to run Linux containers directly on Windows. Docker Desktop for Windows integrates with WSL 2 to provide a seamless environment for both Docker and WSL.





107
WSL + Kali Linux
Xorg
The open-source implementation of the X Window System (X11). It provides the graphical server for Unix-like operating systems, handling input, output, and screen display for graphical applications.





108
WSL + Kali Linux
wsl --update
Updates the WSL 2 Linux kernel, ensuring you are running the latest version with improved features, security fixes, and bug resolutions.





109
WSL + Kali Linux
Wireshark Capture Filter
A set of rules used to filter network traffic before it is captured in Wireshark. Capture filters can limit the types of traffic being collected, making it easier to focus on specific network issues.





110
Azure Developer Associate
Q: What Azure Redis tier offers a single-node setup with no SLA?
A: Basic tier.





111
Azure Developer Associate
Q: Does the Basic tier of Azure Cache for Redis support data persistence or high availability?
A: No — it uses a single node with no persistence or HA.





112
Azure Developer Associate
Q: Which Azure Cache for Redis tier is the first to support data persistence?
A: The Premium tier.





113
Azure Developer Associate
Q: What happens to cached data in the Basic or Standard tiers of Azure Cache for Redis if the node restarts?
A: The data is lost — these tiers do not support persistence.





114
Azure Developer Associate
Q: What is the maximum cache size per node available in the Premium tier of Azure Cache for Redis?
A: Over 1.2 TB.





115
Azure Developer Associate
Q: What is the typical Redis command to set a key with expiration?
A: SET key value EX seconds – stores value with a TTL.





116
Azure Developer Associate
Q: Which tier of Azure Cache for Redis introduces clustering for horizontal scaling?
A: The Premium tier.





117
Azure Developer Associate
What must be configured on Application Gateway to work properly with App Service behind WAF?
Custom health probes





118
Azure Developer Associate
Which App Service tiers support auto-scaling?
Standard, Premium, and Isolated tiers





119
Azure Developer Associate
In Azure App Service, what should you configure on an Application Gateway to ensure health checks work correctly with WAF enabled?
A custom probe





120
Azure Developer Associate
Q: What are key benefits of using Redis?
A: Ultra-fast performance, low latency, reduced database load, and real-time data access.





121
Azure Developer Associate
What unique benefit does App Service Environment (ASE) offer over standard App Service plans?
A dedicated, isolated network environment with high-scale capabilities





122
Azure Developer Associate
How does horizontal scaling in App Service work?
By increasing the number of instances running your app, either manually or automatically





123
Azure Developer Associate
Q: Can Redis be used as a primary database?
A: Not recommended — Redis is best used as a cache, not a durable data store.





124
Azure Developer Associate
What allows Azure App Service to integrate with private networks (VNets)?
VNet Integration





125
Azure Developer Associate
There are two options for rehydrating a blob that is stored in the archive tier:

Change a blob's access tier to an online tier: You can rehydrate an archived blob to hot or cool by changing its tier using the Set Blob Tier operation.





126
Azure Developer Associate
To add a lifecycle management policy with Azure CLI, write the policy to a JSON file, then call the az storage account management-policy create command to create the policy.

az storage account management-policy create \
  --account-name <storage-account> \
  --policy @policy.json \
  --resource-group <resource-group>





127
Azure Developer Associate
Which SDK allows you to log custom events in your App Service app for performance and error tracking?
Application Insights SDK





128
Logging in Python
Q: How can you configure multiple file handlers with different log levels for the same logger in Python's logging module?

A: Add multiple handlers to the logger, each with its own level and target file, such as one handler with level=INFO writing to 'info.log' and another with level=ERROR writing to 'error.log'.
This setup allows segregation of log messages based on severity levels across different files.





129
Logging in Python
Q: Why is it recommended to use named loggers (e.g., logging.getLogger(__name__)) instead of the root logger?

A: It allows for more granular control over logging behavior in different parts of an application.
Named loggers enable targeted configurations, such as setting different log levels or handlers for specific modules.





130
Logging in Python
Q: What does setting propagate=True on a logger in Python's logging module do?

A: It allows log messages to be passed to ancestor loggers in the hierarchy.
This enables messages to be handled by both the logger's own handlers and those of its parents.





131
Logging in Python
Q: What is a potential issue with excessive logging, especially at the DEBUG level, in Python's logging module?

A: It can lead to large log files that consume disk space and make it harder to find relevant information.
Excessive logging may also impact application performance due to the overhead of writing numerous log entries.





132
Logging in Python
Q: If a child logger has propagate set to False, what does this mean?

A: It will not pass log messages to the parent logger.
This isolates the logger, ensuring that messages are handled only by its own handlers.





133
Logging in Python
Q: What is one of the main disadvantages of using Python's built-in logging module?

A: It can be overly complex and verbose for simple applications or scripts.
The extensive configurability may introduce unnecessary complexity when basic logging suffices.





134
Logging in Python
Q: How can you include exception tracebacks in your log messages using Python's logging module?

A: By setting exc_info=True in logging methods like logger.error().
This adds the exception traceback to the log message, providing detailed context for errors.





135
Logging in Python
Q: Why is it important to centralize logging configuration in large applications using Python's logging module?

A: Centralizing logging configuration ensures consistency, makes it easier to manage, and prevents scattered and conflicting logging setups across different modules.
This approach streamlines logging management and enhances maintainability.





136
Logging in Python
Q: What is one of the main disadvantages of using Python's built-in logging module?

A: It can be overly complex and verbose for simple applications or scripts.
The extensive features may introduce unnecessary complexity when basic logging needs are sufficient.





137
Logging in Python
Q: What is a practical example of using a custom filter in Python's logging module?

A: Logging only messages that contain specific keywords, such as "database", to a separate log file using a custom filter class.
This allows selective logging based on content, enhancing log organization.





138
Logging in Python
Q: How can you prevent log messages from bubbling up to parent loggers in Python's logging module?

A: By setting propagate=False on the child logger.
This stops the log messages from being handled by ancestor loggers, ensuring they are processed only by the child logger's handlers.





139
Logging in Python
Q: What is the purpose of using hierarchical, dot-separated logger names in a Python application?

A: To organize loggers in a hierarchy that reflects the application's module structure, allowing for inheritance of configurations and more granular control over logging behavior.
This organization simplifies managing logging settings across different parts of the application.





140
Logging in Python
Q: How does TimedRotatingFileHandler from the logging.handlers module differ from RotatingFileHandler?

A: TimedRotatingFileHandler rotates log files based on time intervals (e.g., daily at midnight), whereas RotatingFileHandler rotates based on file size (maxBytes).
This difference allows for log management tailored to time-based or size-based rotation needs.





141
Logging in Python
Q: What should you do to ensure that logging.basicConfig() has an effect in Python's logging module?

A: Call it before adding any custom handlers or performing other logging configurations, and ensure that the root logger doesn't already have handlers attached.
This ensures that basicConfig properly initializes the logging system without being overridden.





142
Logging in Python
Q: What is the role of a Formatter in a logging handler within Python's logging module?

A: To specify the layout and content of the log messages, such as including timestamps, log levels, and message text.
Formatters ensure that log messages are consistently structured for readability and analysis.





143
Logging in Python
Q: What is the purpose of logging.basicConfig() in Python's logging module?

A: It provides a simple way to configure the root logger with basic settings like level, format, and filename.
This function is useful for quick setups without the need for multiple handlers or complex configurations.





144
Debugging in VS Code
Debugger API
An application programming interface (API) that allows developers to extend or automate debugging tools, often used to integrate debugging features into custom workflows or external tools.





145
Debugging in VS Code
Watchpoint
A debugging feature that pauses execution when the value of a specific variable changes, similar to a breakpoint but focused on value changes rather than specific lines of code.





146
Debugging in VS Code
1. Debugger
A tool used to inspect, control, and modify the execution of a program in order to identify and fix bugs.
2. Breakpoint
A marker set in a program that causes the execution to pause so that the developer can inspect the program’s state.





147
Debugging in VS Code
Symbolic Debugging
A debugging technique that uses debug symbols (which provide additional information like variable names, function names, and line numbers) to make debugging more understandable and precise, often used in conjunction with compiled languages.





148
Debugging in VS Code
Stack Trace
A report that provides detailed information about the sequence of function calls and the state of the program at the point where an error occurred. It's often used to diagnose issues in the execution flow.





149
Debugging in VS Code
Live Debugging
A type of debugging where changes are made to the program and tested while it is running in a live environment, often used in web development and real-time applications.





150
Debugging in VS Code
Debug Console
A tool within a development environment used to evaluate expressions, view output, or interact with a running program during debugging.





151
Vocab
Lost in a Good Book
Blagged (a ride): British slang meaning to obtain a ride, often by persuading or deceiving someone.





152
Vocab
Lost in a Good Book
(Chicken) vol-au-vent: A small, round, puff pastry case filled with a savory chicken mixture, often served as an appetizer.





153
Vocab
Interval Funds Offer Limited Liquidity:
Interval funds are closed-end investment vehicles that allow investors to redeem shares only at specific, predetermined intervals, such as quarterly or annually, providing limited liquidity compared to traditional mutual funds.





154
Vocab
Lost in a Good Book
Proleptic: Relating to anticipation, particularly in literature or rhetoric, where future events are referred to as though they have already happened.





155
Vocab
Jane Eyre
Cachinnation (kak-ih-NAY-shun)
Loud, uncontrollable laughter, often with a connotation of being excessive, mocking, or even sinister. Derived from the Latin word cachinnare, it emphasizes the intensity of the laugh.





156
Vocab
Grapheme
noun
SPA: GRAP-heem
IPA: /ˈɡræfiːm/

The smallest unit of written language that carries meaning, such as a letter, a numeral, or a punctuation mark.
Example: The letter "a" in the alphabet is a grapheme that represents a specific phoneme in many languages.





157
Vocab
Lost in a Good Book
Impresario: A manager or producer of theatrical, musical, or other artistic performances, often entrepreneurial in nature.





158
Vocab
Do Androids Dream of Electric Sheep?
Cephalic pattern (suh-FAL-ik PAT-ern): Refers to patterns or features related to the head or skull.





159
Vocab
Structured Credit Carries Complexity and Risk:
Structured credit products are often complex and require careful analysis due to risks related to credit quality, liquidity, underlying asset performance, and market conditions, making them suitable primarily for knowledgeable or institutional investors.





160
Vocab
Do Androids Dream of Electric Sheep?
Inguinal region (ING-gwuh-nuhl REE-juhn): The area of the lower abdomen on either side of the pubic bone, also known as the groin, where the thigh meets the trunk.





161
Vocab
Structured Credit Includes Products like CLOs and CDOs:
Structured credit encompasses instruments such as collateralized loan obligations (CLOs), collateralized debt obligations (CDOs), mortgage-backed securities (MBS), and asset-backed securities (ABS), all designed to repackage and redistribute risk and return.





162
Vocab
Lost in a Good Book
Cornice: An architectural feature where a projecting, decorative molding crowns a building or structure, often found at the top of walls.





163
Vocab
Do Androids Dream of Electric Sheep?
Kipple (KIP-uhl): A term coined by author Philip K. Dick referring to useless, discarded, or trivial items that tend to accumulate, often leading to clutter.





164
Vocab
Lost in a Good Book
Antimacassar: A small cloth placed on furniture, especially chair backs, to protect against grease and wear, historically from hair oil ("macassar oil").





165
Vocab
Structured Credit Offers Different Risk Levels:
Structured credit products are typically divided into multiple tranches, each offering varying degrees of risk, return, and priority in repayment, allowing investors to select the risk exposure that suits their investment profile.





166
Vocab
Jane Eyre
Salubrious
(suh-LOO-bree-uhs) Describing something beneficial to health or well-being, such as a pleasant climate, nutritious food, or healthy lifestyle.





167
Vocab
Do Androids Dream of Electric Sheep?
Caterwauled (KAT-er-wawld): Past tense of "caterwaul," meaning to make a shrill, wailing noise like that of a cat in heat; to howl or screech.





168
Vocab
Red Side Story, FForde
Probity
Pronunciation: PROB-ih-tee
Definition: Adherence to the highest principles and ideals; uprightness and integrity.





169
Vocab
Do Androids Dream of Electric Sheep?
Jug-eared (JUHG-eerd): Describing someone with large, protruding ears that resemble the handles of a jug.





170
Vocab
Interval Funds May Provide Higher Yields and Diversification:
Interval funds often seek higher returns or income by investing in less liquid, alternative assets, potentially enhancing portfolio diversification beyond traditional stocks and bonds.





171
Vocab
Do Androids Dream of Electric Sheep?
Cogitated (KOJ-i-teyt-ed): Past tense of "cogitate," meaning to think deeply or ponder about something.





172
Email Auth and Security
p=quarantine

A DMARC policy action.
Instructs receiving mail servers to treat unauthenticated emails with suspicion.
Typically places such emails in the spam or junk folder.





173
Email Auth and Security
Aggregate Reports

Summary reports sent periodically (usually daily) to domain owners detailing email authentication results.
Provide insights into SPF and DKIM alignment and the overall effectiveness of DMARC policies.
Typically formatted in XML, containing data on email sources, authentication outcomes, and policy actions.





174
Email Auth and Security
Feedback Loops (FBL)

Mechanisms by which email service providers notify senders about spam complaints from recipients.
Allow senders to monitor and address spam-related issues, improving sender reputation and email deliverability.
Implemented through services like Return Path and Feedback Loop (FBL) agreements with ISPs.





175
Email Auth and Security
p=none

A DMARC policy action.
Requests no specific action be taken on unauthenticated emails.
Used for monitoring and gathering data without affecting email delivery.





176
Terraform
Debugging Tips:
Check Quotes: Ensure that you use double quotes for strings that require interpolation.
Use terraform validate: Run this command frequently to catch syntax issues early.
Review Variable References: Confirm that all variable references use the correct var. prefix.





177
Terraform
Variable Interpolation:
The process of embedding variable values into strings. This is done using the ${} syntax inside double quotes.
Example:
"The environment is ${var.env}"





178
Terraform
Configuration Blocks:
These are the building blocks of Terraform code, such as resource, module, provider, and output blocks.





179
Terraform
Debugging with TF_LOG:

Definition: Setting the TF_LOG environment variable enables detailed logging for troubleshooting.
Usage: Helps trace issues during plan or apply phases by providing verbose output.

Example:
export TF_LOG=DEBUG





180
Terraform
At a large organization, your centralized operations team may get many repetitive infrastructure requests. You can use Terraform to build a "self-serve" infrastructure model that lets product teams manage their own infrastructure independently.





181
Terraform
Splat Operator:
Definition: The splat operator (*) extracts attributes from every element in a list of resources.
Usage: Handy for working with multiple resource instances in a compact way.
Example:

"${aws_instance.web.*.id}"





182
Terraform
Terraform Console:
Definition: An interactive command-line tool that lets you experiment with expressions and inspect your current Terraform state.
Usage: Run terraform console to evaluate expressions, test functions, or debug variable values interactively.





183
Terraform
Local Values:
Definition: Local values allow you to define computed variables within a configuration to simplify expressions or avoid repetition.
Usage: Useful for intermediate calculations or to centralize common values.

Example:

locals {
  app_name = "myapp"
  instance_count = length(var.instance_ids)
}





184
Terraform
Variable Declaration:
Use the variable block to declare variables. For example:

variable "env" {
  description = "The deployment environment"
  type        = string
}





185
Python
Q:
What is a generator in Python?

A:
A function that allows iteration over a sequence of values one at a time, using the yield keyword.





186
Python
Q:
Which itertools function can be used to create an iterator that returns elements from the first iterable until it is exhausted, then proceeds to the next iterable?

A:
itertools.chain().





187
Python
Q:
Explain how itertools.combinations() differs from itertools.permutations().

A:
itertools.combinations(iterable, r) generates all possible combinations of r elements without regard to order, whereas itertools.permutations(iterable, r) generates all possible ordered arrangements of r elements.





188
Python
Q:
How does the iter() function work with iterables?

A:
The iter() function returns an iterator object from an iterable by calling its __iter__() method.





189
Python
Q:
How do you retrieve the next value from a generator named gen?

A:
Using the built-in next(gen) function.





190
Python
Q:
What does the with open(...) statement ensure when working with files in Python?

A:
It ensures that the file is properly closed after its block of code is executed, even if an error occurs.





191
Python
Q:
What does itertools.islice() do?

A:
It creates an iterator that returns selected elements from the input iterable by specifying start, stop, and step indices.





192
Python
import time
from contextlib import contextmanager

@contextmanager 
def timer():
    start = time.time()
    try: yield
    finally:
        end = time.time()
        print(f"Elapsed time: {end - start} seconds")

# Usage
with timer():
    # Code block to measure
    time.sleep(2)
# Output: Elapsed time: 2.002 seconds





193
Python
Q:
What are the two essential methods that an iterator class must implement?

A:
__iter__() and __next__().





194
Python
Q:
What function from the os module is used to iterate through directories and files?

A:
os.walk()





195
Python
Q:
Explain the concept of generator pipelines.

A:
Generator pipelines involve chaining multiple generators together, where each generator processes data and passes it to the next, enabling efficient and modular data processing.





196
Python
Q:
How does the os.walk() function handle permission errors by default?

A:
It can be configured to print an error message and continue by using the onerror parameter.





197
Python
Q:
Explain the difference between except Exception as e and except (ValueError, TypeError) as e.

A:
except Exception as e catches all exceptions that inherit from Exception, while except (ValueError, TypeError) as e only catches ValueError and TypeError exceptions.





198
Python
How can you create all parent directories for a given path using pathlib?
Using the .mkdir(parents=True, exist_ok=True) method.

path = Path('/path/to/new/directory')
path.mkdir(parents=True, exist_ok=True)





199
Python
Q:
What method is used to gracefully terminate a generator?

A:
The .close() method.





200
Python
Q:
What method can be used to send a value into a generator, allowing it to receive data?

A:
The .send(value) method.





201
RAG Project
Mock
A fake object or function that replaces real dependencies during testing.





202
RAG Project
Access Control
Logic that determines who can access which resources or files.





203
RAG Project
io.BytesIO()
In-memory file-like object — often used to hold a file before sending it via HTTP.





204
RAG Project
Object ID (OID)
Unique identifier for a user in Azure AD, used to scope their files or actions.





205
RAG Project
Fixture
A reusable setup block in pytest that prepares resources (e.g., a test client or mock blob).





206
RAG Project
Blueprint
A modular way to organize route handlers in Quart/Flask apps. Lets you split up your app by function (e.g., chat, upload).





207
RAG Project
Route
A URL endpoint in your app (e.g., /upload, /ask) that maps to a function.





208
RAG Project
@authenticated / @authenticated_path
Route decorators that ensure users are signed in and attach their user info to the request.





209
Azure AD Authentication
Service Principal Authentication Methods
Authentication for service principals can be done using Client Secret, Client Certificate, or Managed Identity, which provides secure, credential-free access to Azure services.





210
Azure AD Authentication
Role Assignment Propagation
Role permissions may take time to propagate across Azure, so changes in role assignments might not be immediately reflected in access control.





211
Azure AD Authentication
Built-In Roles
Predefined roles like Owner, Contributor, and Reader that grant specific permissions to manage Azure resources at various scopes.





212
Azure AD Authentication
Scope
Defines the level at which a role is applied, such as management group, subscription, resource group, or individual resource. Higher scopes apply to all child resources.





213
Azure AD Authentication
Principal
An identity (user, group, service principal) that is granted access to Azure resources based on assigned roles.





214
Azure DevOps Pipelines
How do you run a pipeline on a self-hosted agent in Azure DevOps?
Answer: pool: self-hosted





215
Azure DevOps Pipelines
What does the resources keyword define in a YAML pipeline?
Answer: The resources keyword allows you to define external resources such as repositories, containers, or pipelines that a pipeline will use or depend on.





216
Azure DevOps Pipelines
What is the purpose of the dependsOn keyword in Azure DevOps YAML pipelines?
Answer: It specifies the order in which stages or jobs will execute.





217
Azure DevOps Pipelines
What does the trigger keyword do in an Azure DevOps YAML pipeline?
Answer: It defines the branches or events that will cause the pipeline to run, such as a commit to a specific branch.





218
Azure DevOps Pipelines
How do you cache dependencies in Azure DevOps pipelines to speed up builds?
Answer: Use the cache task in the YAML file to store and reuse files between pipeline runs. This can help speed up build times by caching dependencies.





219
Azure DevOps Pipelines
What does the 'trigger' keyword do in an Azure DevOps YAML pipeline?
Answer: Defines the branches or events that will cause the pipeline to run, such as a commit to a specific branch.





220
Azure DevOps Pipelines
In an Azure DevOps pipeline, which YAML syntax would you use to reference a variable?
Answer: $(variable_name)





221
Azure DevOps Pipelines
How can you pass secrets securely in Azure DevOps YAML pipelines?
Answer: You pass secrets using pipeline variables marked as secret in Azure DevOps. They are referenced in the YAML file as $(secret_variable) but are masked and not exposed in logs.





222
Azure DevOps Pipelines
How do you add a manual approval gate before a pipeline proceeds to the next stage?
Answer: Set a ApprovalRequired flag on the pipeline's stages.





223
DNS
Remove-DnsServerZone (PowerShell Cmdlet)
A PowerShell command used to delete an existing DNS zone from a Windows DNS Server. It allows administrators to remove obsolete or unnecessary zones efficiently through scripts or command-line operations.





224
DNS
Refresh Interval
The period following the No-Refresh Interval during which the timestamp on a DNS record can be updated. If a record is refreshed within this interval, it remains active; otherwise, it becomes eligible for scavenging.





225
DNS
Zone Transfers
The process of copying DNS zone data from a primary DNS server to secondary DNS servers. Zone transfers ensure DNS data consistency and redundancy across multiple DNS servers, enhancing reliability and load distribution.





226
SharePoint
The PUT method is used to update the entire content of an existing file. If you need to modify only specific properties or metadata, you might use MERGE with the PATCH method instead. However, for updating file content specifically, PUT is appropriate.





227
SharePoint
The __metadata property specifies the type information of the item being created or updated. This helps SharePoint understand the schema of the item, ensuring that the correct fields and data types are used.





228
SharePoint
Uploading large files (typically over 4MB) requires a chunked upload approach. SharePoint REST API provides methods to upload files in slices or chunks, which helps manage large file sizes efficiently and avoids timeouts or memory issues.





229
SharePoint
To access SharePoint resources using REST, construct a RESTful HTTP request by using the OData standard, which corresponds to the desired client object model API. For example:


GET https://{site_url}/_api/lists/getbytitle('{list_name}')/items
Authorization: "Bearer " + accessToken
Accept: "application/json;odata=verbose"





230
Azure Functions + PP365
Function App Plan
The hosting plan for Azure Functions that determines compute resources, scaling behavior, and pricing. Python Azure Functions can be hosted on different plans, such as Consumption Plans for automatic scaling or Premium Plans for enhanced performance and features, allowing developers to choose based on application needs.





231
Azure Functions + PP365
host.json
A global configuration file for Azure Functions that defines settings applicable to all functions within a Function App. For Python developers, host.json can be used to configure logging, extensions, and other runtime behaviors, enabling centralized control over function execution.





232
Azure Functions + PP365
Function App Settings
Configuration settings for an Azure Function App that control its behavior and integration with other services. For Python Azure Functions, settings can include environment variables, connection strings, and runtime configurations, enabling customization and secure management of function properties.





233
Azure Functions + PP365
OAuth 2.0 Authentication Flow
A sequence of steps in the OAuth 2.0 protocol where an application obtains an access token from an authorization server. This flow involves redirecting users for consent, exchanging authorization codes for tokens, and securely accessing protected resources using the obtained tokens, enabling secure delegation of access.





234
Azure Functions + PP365
Dependency Management
The practice of managing external libraries and packages that a Python application relies on. In Azure Functions, managing dependencies through requirements.txt ensures that all necessary packages are installed and versioned correctly, maintaining consistency between development and production environments.





235
Azure Functions + PP365
Async Programming (Asyncio)
A programming paradigm in Python that enables concurrent execution of code using asynchronous functions and event loops. In Azure Functions, leveraging asyncio can improve performance and scalability by allowing Python functions to handle multiple tasks simultaneously without blocking.





236
Azure Functions + PP365
Dynamic Content
Data dynamically pulled from triggers or previous actions in Power Automate flows. Dynamic content allows flows to be flexible and responsive to varying input data, enabling customized and context-aware operations when interacting with services like Azure Functions and Dataverse.





237
Azure Functions + PP365
Virtual Environment Activation
The process of activating a Python virtual environment to isolate project dependencies. When developing Python Azure Functions, activating the virtual environment ensures that the correct packages are used, preventing conflicts and maintaining a clean development setup.





238
PnP Powershell
Get-PnPWeb (PnP.PowerShell)
Fetches details about the current SharePoint site, including properties like language, template, and navigation settings. Useful for site audits and management.





239
PnP Powershell
Invoke-RestMethod (Microsoft.PowerShell.Utility)
Sends HTTP and HTTPS requests to RESTful APIs and processes the responses. Commonly used for interacting directly with SharePoint REST API in PowerShell scripts.





240
PnP Powershell
Parameter Set Conflict
Occurs when incompatible or conflicting parameters are used together in a PowerShell cmdlet, leading to errors as PowerShell cannot determine the intended operation.





241
PnP Powershell
SharePoint Site URL
The web address of a SharePoint site (e.g., https://accuityllp.sharepoint.com/sites/ASB), serving as the entry point for accessing site resources and APIs.





242
PnP Powershell
Set-PnPFileCheckedIn (PnP.PowerShell)
Checks in a previously uploaded file in SharePoint, optionally adding comments. Essential for managing document versions and maintaining collaboration workflows.





243
PnP Powershell
Invoke-RestMethod Parameters
Key parameters include -Method (HTTP method), -Uri (API endpoint), -Headers (authentication and content type), and -Body (data payload), crucial for API interactions.





244
PnP Powershell
Remove-PnPListItem (PnP.PowerShell)
Deletes an item from a SharePoint list. Useful for maintaining data integrity and automating data cleanup processes





245
PnP Powershell
Client ID (client_id)
A unique identifier assigned to an Azure AD application upon registration. Used to identify the application during authentication processes.





246
PnP Powershell
Throttling in SharePoint
Limits the number of API requests to prevent abuse and ensure service stability. Requires implementing retry logic and handling throttling responses in scripts.





247
PnP Powershell
Document Library
A SharePoint component where documents are stored, managed, and shared. Examples include "Shared Documents" or custom libraries within a site.





248
PnP Powershell
Add-PnPFile (PnP.PowerShell)
Uploads a file to a specified SharePoint document library or folder. Supports parameters like -Path for local files and -Stream for uploading via a data stream.





249
PnP Powershell
Admin Consent
Approval granted by an Azure AD administrator for an application to access certain resources or perform specific actions, essential for elevated API permissions.





250
Home Network Project
Front: What is Snort and how is it used in network security?

Back: Snort is an open-source network intrusion detection and prevention system (IDS/IPS). It analyzes network traffic in real-time, using predefined rules to detect malicious activities such as exploits, port scans, and unauthorized access attempts. Snort can be integrated into pfSense to enhance network security by identifying and responding to potential threats.





251
Home Network Project
Front: What are Service Discovery and its importance in containerized environments?

Back: Service Discovery is the process of automatically detecting and locating services within a network, particularly in dynamic environments like container orchestration platforms. It enables containers to find and communicate with each other without manual configuration, facilitating scalability and efficient resource management.





252
Home Network Project
Front: What is Service Mesh and how does it enhance microservices architecture?

Back: A Service Mesh is a dedicated infrastructure layer that manages service-to-service communication within a microservices architecture. It provides features like load balancing, service discovery, traffic management, security (encryption and authentication), and observability (monitoring and tracing), enhancing the reliability and efficiency of microservices interactions.





253
Azure Functions + Visual Studio
ASP.NET offers several state management techniques, including Session State, View State, and Cookies, to retain data across user requests and provide a better user experience on dynamic websites.





254
Azure Functions + Visual Studio
ASP.NET Web API is a framework for building HTTP-based services that can be consumed by various clients, including browsers, mobile devices, and other web applications. It’s ideal for creating RESTful services in ASP.NET.





255
Azure Functions + Visual Studio
ASP.NET Web Forms is an older way to build web applications, focusing on drag-and-drop components and less code, while ASP.NET MVC offers greater flexibility, control, and a more maintainable approach to building web applications.





256
Azure Functions + Visual Studio
ASP.NET includes a variety of built-in security features such as request validation, input sanitization, SQL injection prevention, and protection against cross-site scripting (XSS) and cross-site request forgery (CSRF). HTTPS and encryption are also supported for secure communication.





257
Azure Functions + Visual Studio
ASP.NET supports asynchronous programming with async and await keywords, allowing non-blocking operations such as file and database access. This improves scalability and performance by freeing up threads during long-running tasks.





258
FSLogix
Q: What is the purpose of the Office 365 Container in FSLogix?
A: The Office 365 Container isolates and stores Office-specific data (like Outlook cache, OneDrive files, and Teams settings), improving performance and reducing load times for Office apps in virtual desktop environments.





259
FSLogix
Q: Where are FSLogix Profile Containers typically stored in Azure Virtual Desktop environments?
A: FSLogix Profile Containers are typically stored in Azure Files or network shares (SMB share) to allow consistent access across different virtual desktop sessions.





260
FSLogix
On a lazy asynchronous operation, Cloud Cache flushes the changes to all storage providers simultaneously as each provider is flushed on its own thread. FSLogix doesn't throttle this operation and utilizes as much throughput as the system will allow.





261
FSLogix
Q: What is FSLogix App Masking, and how does it relate to managing applications in virtual desktops?
A: FSLogix App Masking is a feature that allows administrators to control which applications are visible to which users in a virtual desktop environment. This "masks" applications based on user roles, ensuring that users only see the apps they have permissions for, without the need for separate application installations.





262
FSLogix
Q: How does FSLogix improve Office 365 performance in Azure Virtual Desktop?
A: FSLogix isolates Office 365 data (such as Outlook, Teams, OneDrive) in a container (VHDX), reducing load times and ensuring that data is quickly accessible without syncing delays.





263
FSLogix
During a user's session when the connection to any storage provider becomes unhealthy, FSLogix queues up all the changes and then flushes them to the providers when they return to a healthy state.





264
FSLogix
Q: What is the role of Profile Disk Differencing in FSLogix?
A: Profile Disk Differencing allows FSLogix to create differencing VHDX disks, where changes to the user profile are stored in separate files, reducing the load on the main profile disk. This improves performance by ensuring faster read/write operations and reducing storage overhead.





265
FSLogix
When the local cache doesn't contain the data requested by the file system, Cloud Cache hydrates (reads and copies) the data from 1 of the remote storage providers to the local cache. This operation is also part of the sign in process when populating the local cache for the user's profile.





266
Audit Report Tracker (Sharepoint List)
Item (SharePoint List Item)
Definition: A single entry in a SharePoint list, containing values for each of the list’s columns.
Context: Each item typically represents a single entity, such as a task or document.





267
Audit Report Tracker (Sharepoint List)
Content Type
Definition: A feature in SharePoint that defines a set of metadata (columns) and behaviors that apply to a certain type of content (e.g., a document, list item).
Context: Helps structure how data is stored and interacted with in SharePoint.





268
Audit Report Tracker (Sharepoint List)
List Items Endpoint (for retrieving items in a SharePoint list):

Endpoint: GET https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/items
Description: Retrieves items from a specified SharePoint list.





269
Audit Report Tracker (Sharepoint List)
Graph Explorer
Definition: A tool provided by Microsoft that allows developers to test and experiment with Microsoft Graph API queries directly in the browser.
Context: It helps you quickly interact with Microsoft Graph APIs to retrieve or manipulate SharePoint data without writing full applications.





270
IW Migration
Check Constraints and Computed Columns (SQL Server)
Check constraints enforce custom rules on column values, ensuring data integrity at the database level. Computed columns derive their values from an expression referencing other columns, reducing redundant storage and improving data consistency.





271
IW Migration
Transaction Handling (SQL Server)
A mechanism to ensure that a series of database operations either all succeed or all fail, maintaining data integrity. Using commands like BEGIN TRAN, COMMIT, and ROLLBACK, developers control atomic operations and safeguard against partial updates.





272
IW Migration
Indexing (Access/SQL Server)
A strategy for improving data retrieval speeds by creating data structures (indexes) on certain fields. Proper indexing balances query performance gains against the overhead of maintaining those indexes during inserts, updates, and deletions.





273
IW Migration
Refactoring and Normalization (Access/SQL Server)
The process of reorganizing tables and fields to reduce redundancy and improve data integrity. Higher normalization forms minimize duplicate data and anomalies. This often improves long-term maintainability and eases migration to other systems.





274
IW Migration
Linked Table Manager (Access)
A utility in Access to manage external data connections. It allows refreshing, updating, or changing the source of linked tables, ensuring that front-end objects always correctly reference tables in the back-end or external databases.





275
Todd Ideas
Connect Document Intelligence via REST APIs with external systems like CRM, ERP, or custom applications, facilitating real-time data exchange and business insights across diverse platforms in your technology ecosystem.





276
Todd Ideas
In Azure AI Document Intelligence, Prebuilt models enable you to add intelligent document processing to your apps and flows without having to train and build your own models.
Check | Extract relevant information from checks.
Credit card | Extract payment card information.
Invoice | Extract customer and vendor details.
Receipt | Extract sales transaction details.





277
Todd Ideas
In Azure AI Document Intelligence, the service’s performance depends heavily on the quality of input documents. Ensure your documents are high resolution, correctly oriented, and preprocessed (e.g., noise reduction, skew correction) to enhance data extraction accuracy.





278
Todd Ideas
In Azure AI Document Intelligence, document analysis (general extraction) models enable text extraction from forms and documents and return structured business-ready content ready for your organization's action, use, or development.

Read | Extract printed and handwritten text.
Layout | Extract text, tables, and document structure.





279
Todd Ideas
The most common way to authenticate access to Document Intelligence is by using the customer's Document Intelligence API key. Each request to the service URL must include an authentication header. This header passes along an API key (or token if applicable), which is used to validate your subscription for a service or group of services.





280
Open Source/GitHub
README.md

A markdown file at the root of a repository that provides an overview of the project, including its purpose, setup instructions, and usage information.





281
Open Source/GitHub
Changelog

A document that records all notable changes made to a project, including new features, bug fixes, and updates, providing transparency and history for users and contributors.





282
Open Source/GitHub
Code of Conduct

Guidelines that outline expected behavior and interactions within a project’s community, promoting a respectful and inclusive environment.





283
Open Source/GitHub
Issue Assignee

A person designated to work on a specific issue, indicating responsibility and ownership for resolving the task or bug.





284
Open Source/GitHub
Label

Tags assigned to issues or pull requests to categorize them, such as “good first issue,” “bug,” or “enhancement,” facilitating easier navigation and filtering.





285
JavaScript Concepts
Vuex: A state management pattern and library for Vue.js applications, centralizing state and enabling predictable state mutations.





286
JavaScript Concepts
Vite: A modern build tool optimized for speed and performance, providing instant server start and efficient hot module replacement.





287
JavaScript Concepts
Browser Storage (localStorage, sessionStorage, IndexedDB`): Mechanisms for storing data on the client side, enabling persistent and session-based data management.





288
JavaScript Concepts
Prettier: A code formatter that enforces consistent styling across codebases, automatically formatting code on save or commit.





289
JavaScript Concepts
ESLint: A linter tool for identifying and fixing problematic patterns in JavaScript code, enforcing coding standards and best practices.





290
JavaScript Concepts
Variable Declaration: Use let and const for variable declarations instead of var. let allows you to declare variables that are limited to the scope of a block statement, while const is used for variables that should not be reassigned.





291
JavaScript Concepts
Angular: A comprehensive framework by Google for building large-scale applications, utilizing TypeScript, two-way data binding, and dependency injection.





292
JavaScript Concepts
Next.js: A React framework for server-side rendering and static site generation, enhancing performance and SEO for React applications.





293
JavaScript Concepts
Event Loop: The mechanism that handles asynchronous callbacks in JavaScript, ensuring non-blocking execution by managing the call stack and callback queue.





294
JavaScript Concepts
Single-Page Application (SPA): A web application that loads a single HTML page and dynamically updates content without full page reloads.





295
JavaScript Concepts
Heroku: A cloud platform for deploying, managing, and scaling Node.js applications with support for various add-ons and integrations.





296
JavaScript Concepts
Webpack: A powerful module bundler that compiles JavaScript modules into a single bundle, optimizing assets for production.





297
JavaScript Concepts
Async/Await: Syntax for handling asynchronous operations more readably, allowing async functions to pause execution with await until a Promise resolves.





298
JavaScript Concepts
Closures: Functions that retain access to their lexical scope even when executed outside their original context, enabling data privacy and function factories.





299
JavaScript Concepts
Responsive Design: Designing web applications to adapt seamlessly across various device sizes and screen resolutions for optimal user experience.





300
JavaScript Concepts
DOM Manipulation: Using JavaScript to select and modify HTML elements, enabling dynamic and interactive web pages.





301
JavaScript Concepts
Array reverse Function: The reverse method reverses the order of the elements in an array in place.
let array = [1, 2, 3, 4, 5];
array.reverse();
console.log(array); // Output: [5, 4, 3, 2, 1]





302
JavaScript Concepts
Template Literals: Use template literals for string interpolation and multi-line strings. They are enclosed by backticks (`) and allow you to embed expressions using ${expression}. For example:

const name = 'Jay';
const greeting = `Hello, ${name}!`;





303
JavaScript Concepts
Destructuring: Extracting values from arrays or objects into distinct variables using a concise syntax.





304
JavaScript Concepts
Security Practices: Implementing measures to protect applications from vulnerabilities like Cross-Site Scripting (XSS) and Cross-Site Request Forgery (CSRF).





305
Powershell Modules
RequiredModules
Definition: A property in a module manifest that lists other modules required for the module to function.
Explanation: Ensures that dependencies are loaded before the module itself is imported. Example: (Get-InstalledModule -Name AzureRM).RequiredModules.





306
Powershell Modules
Get-Module

Definition: A cmdlet that retrieves information about modules.
Explanation: Can list currently loaded modules or all available modules using parameters like -ListAvailable. Example: Get-Module -ListAvailable.





307
Powershell Modules
Format-List

Definition: A PowerShell cmdlet that formats the output as a list of properties.
Explanation: Used with other cmdlets to display detailed information. Example: Get-InstalledModule | Format-List * shows all properties of installed modules.





308
Powershell Modules
Get-Command

Definition: A cmdlet that retrieves all commands available in PowerShell, including those from modules.
Explanation: Can be filtered to show commands from a specific module using the -Module parameter. Example: Get-Command -Module Az.





309
Powershell Modules
Pester

Definition: A testing framework for PowerShell.
Explanation: Used for writing and running tests to ensure scripts and modules behave as expected.





310
Powershell Modules
Install-Module

Definition: A cmdlet used to download and install a module from a repository like the PowerShell Gallery.
Explanation: Specifies the module name and installation scope. Example: Install-Module -Name Az -Scope CurrentUser.





311
Powershell Modules
Get-Help

Definition: A cmdlet that displays help information for other cmdlets and functions.
Explanation: Provides detailed documentation and examples. Example: Get-Help Get-AzVM -Detailed.





312
Powershell Modules
Module Manifest (.psd1)

Definition: A PowerShell data file that describes the contents and metadata of a module.
Explanation: Includes information like the module version, author, exported functions, dependencies, and more. Essential for publishing and sharing modules.





313
Powershell Modules
Az Module

Definition: A module for managing Azure resources.
Explanation: Provides cmdlets to interact with Azure services. Example cmdlet: Get-AzVM.





314
Powershell Modules
Module Scope Management

Definition: Controlling the installation and availability scope of modules.
Explanation: Deciding between CurrentUser and AllUsers scopes based on requirements and permissions.





315
Powershell Modules
PSReadLine Module

Definition: A module that enhances the command-line editing experience in PowerShell.
Explanation: Provides features like syntax highlighting, auto-completion, and customizable key bindings.





316
Powershell Modules
When multiple modules have cmdlets with the same name, use fully qualified names to specify which one to use.
Example:
Az\Get-AzVM





317
Powershell Modules
ActiveDirectory Module

Definition: A module for managing Active Directory objects.
Explanation: Provides cmdlets to manage users, groups, and other AD components. Example cmdlet: Get-ADUser.





318
Powershell Modules
Get-Command -Module <ModuleName>

Definition: Lists all commands (cmdlets, functions) provided by a specific module.
Example Usage: Get-Command -Module Az lists all Az module cmdlets.





319
Powershell Modules
Module Manifest Properties

Definition: Specific attributes defined in a .psd1 file that describe module metadata.
Explanation: Includes properties like ModuleVersion, Author, RequiredModules, FunctionsToExport, etc.





320
Powershell Modules
Module.psm1

Definition: The primary script file for a PowerShell module.
Explanation: Contains the functions, cmdlets, and other code that define the module's functionality.





321
WSL + Kali Linux
X11 (X Window System)
A graphical windowing system for Unix-like operating systems, providing the foundation for graphical user interfaces. X11 is typically used with Linux systems to handle display rendering and interaction.





322
WSL + Kali Linux
/mnt Directory
In WSL, the /mnt directory is where your Windows file system is mounted. For example, C:\ is accessible at /mnt/c, D:\ at /mnt/d, etc. This allows you to access and work with files from both Windows and Linux environments seamlessly.





323
WSL + Kali Linux
WSL File System Performance
The file system in WSL 2 is optimized for Linux applications but has some overhead when accessing files stored on Windows drives (/mnt/c, /mnt/d). It's recommended to store Linux-specific files in the WSL file system (/home, etc.) for better performance.





324
WSL + Kali Linux
Xfwm4 (XFCE Window Manager)
The window manager for the XFCE desktop environment. It manages window placement, appearance, and focus within the XFCE session.





325
WSL + Kali Linux
WSLg (Windows Subsystem for Linux GUI)
A feature in WSL2 that allows graphical Linux applications to run natively on Windows, without requiring additional software like VNC or an X server.





326
Azure Developer Associate
If you define more than one action on the same blob, lifecycle management applies the least expensive action to the blob. For example, action delete is cheaper than action tierToArchive. Action tierToArchive is cheaper than action tierToCool.





327
Azure Developer Associate
Azure blob rule filter type:
blobIndexMatch
  An array of dictionary values consisting of blob index tag key and value conditions to be matched. Each rule can define up to 10 blob index tag condition.
  Not Required





328
Azure Developer Associate
Q: What kind of database is Redis?
A: Redis is an in-memory key-value store, part of the NoSQL family.





329
Azure Developer Associate
Azure blob storage rule run conditions
  daysAfterModificationGreaterThan
  daysAfterCreationGreaterThan
  daysAfterLastAccessTimeGreaterThan
  daysAfterLastTierChangeGreaterThan





330
Azure Developer Associate
Q: Which Azure Cache for Redis tiers support both clustering and data persistence?
A: Premium and higher (Enterprise, Enterprise Flash).





331
Azure Developer Associate
When you copy an archived blob to a new blob in an online tier, the source blob remains unmodified in the archive tier. You must copy the archived blob to a new blob with a different name or to a different container. You can't overwrite the source blob by copying to the same blob.





332
Azure Developer Associate
What is the purpose of App Insights Profiler?
It provides code-level performance diagnostics to identify bottlenecks under live traffic.





333
Azure Developer Associate
What Azure App Service feature allows zero-downtime deployment and testing?
Deployment Slots





334
Azure Developer Associate
What does the App Service Plan define?
It defines the pricing tier and compute resources (CPU, memory, instance count) used by your web app.





335
Azure Developer Associate
Q: What is Azure Cache for Redis?
A: A fully managed, in-memory key-value caching service based on the open-source Redis engine.





336
Azure Developer Associate
Q: Which Azure Cache for Redis tiers support Virtual Network (VNet) integration?
A: Premium, Enterprise, and Enterprise Flash.





337
Azure Developer Associate
Q: Does Redis support multiple programming languages?
A: Yes — supports .NET, Java, Python, Node.js, Go, Ruby, PHP, and more.





338
Azure Developer Associate
Which App Service deployment method enables CI/CD integration with GitHub or Azure Repos?
Continuous Deployment (CI/CD)





339
Azure Developer Associate
Which diagnostic tool lets you trace and troubleshoot slow or failed HTTP requests?
Application Insights (Failures blade or Profiler)





340
Azure Developer Associate
What happens if one app in an App Service Plan consumes too much CPU?
It can impact the performance of other apps in the same plan





341
Azure Developer Associate
Q: Which tiers of Azure Cache for Redis are based on Redis Enterprise from Redis Inc.?
A: Enterprise and Enterprise Flash tiers.





342
Azure Developer Associate
What Azure feature should you use to securely store secrets like connection strings?
Azure Key Vault with Managed Identity





343
Azure Developer Associate
How can you keep an Azure App Service always warm and responsive?
Enable "Always On" in app settings





344
Logging in Python
Q: How can you configure Python's logging to output messages to a file instead of the console?

A: Use FileHandler from the logging module with a filename like 'app.log'.
This directs log messages to the specified file instead of the standard console output.





345
Logging in Python
Q: What does setting logging.disable(logging.CRITICAL) do to the logging system in Python's logging module?

A: It disables all logging messages at or below the CRITICAL level.
This effectively silences all log messages, as CRITICAL is the highest standard logging level.





346
Logging in Python
Q: Why is it important to include timestamps in log messages?

A: To track when events occurred, which is essential for debugging and analyzing application behavior over time.
Timestamps provide temporal context, making it easier to correlate events and identify issues.





347
Logging in Python
Q: What does WatchedFileHandler from the logging.handlers module do differently compared to FileHandler?

A: It watches the log file for external modifications and automatically reopens it if the file is moved or deleted.
This is useful when external tools handle log rotation, ensuring continuous logging without interruption.





348
Logging in Python
Q: What is a common practice for naming loggers within Python modules?

A: Using logging.getLogger(__name__) to automatically name the logger based on the module's name.
This practice ensures that logger names reflect the module structure, aiding in organized logging configurations.





349
Logging in Python
Q: What should you avoid doing when configuring multiple handlers in Python's logging module?

A: Avoid configuring multiple handlers to write to the same log file unless it's intentional and properly managed to prevent conflicts.
This prevents issues like duplicate log entries and file access errors.





350
Logging in Python
Q: Name a handler you would use to send log messages via email for critical errors.

A: SMTPHandler from the logging.handlers module
This handler sends log messages through an SMTP server, suitable for alerting on critical issues.





351
Logging in Python
Q: Why should log files be secured with appropriate file permissions in Python's logging module?

A: To prevent unauthorized access to sensitive log information and protect the integrity of log data.
Proper permissions ensure that only authorized users can read or modify log files.





352
Logging in Python
Q: What is the purpose of logging.basicConfig() in Python's logging module?

A: It provides a simple way to configure the root logger with basic settings like level, format, and filename.
This function is ideal for quick setups without the need for multiple handlers or complex configurations.





353
Logging in Python
Q: Which logging level is appropriate for a message that indicates a minor problem that doesn't prevent the program from functioning?

A: WARNING
This level signals potential issues that may require attention but do not halt the application's execution.





354
Logging in Python
Q: What is the default formatter format string if none is specified in logging.basicConfig()?

A: '%(levelname)s:%(name)s:%(message)s'
This default format includes the log level, logger name, and the log message.





355
Logging in Python
Q: What does the backupCount parameter do in RotatingFileHandler from the logging.handlers module?

A: It specifies the number of backup log files to keep after rotation, such as backupCount=5.
This limits the number of rotated files retained, managing disk space usage.





356
Logging in Python
Q: How can you dynamically create loggers based on runtime information in Python's logging module?

A: By using logging.getLogger() with dynamically constructed names, such as logging.getLogger(f"module_{module_id}").
This allows for the creation of loggers tailored to specific runtime contexts or modules.





357
Logging in Python
Q: Why might you choose to use Loguru over Python's built-in logging module?

A: For simpler syntax, reduced boilerplate, and additional features like colorized output and automatic exception logging.
Loguru offers a more user-friendly and modern interface compared to the standard logging module.





358
Logging in Python
Q: What is the impact of setting a logger's level higher than its handler's level in Python's logging module?

A: Log messages must meet or exceed the logger's level to be processed by the handler, regardless of the handler's own level.
This means that even if a handler is set to a lower level, it won't handle messages below the logger's threshold.





359
Logging in Python
Q: How does using hierarchical logger names help in large applications using Python's logging module?

A: It allows for organized, modular logging configurations where different parts of the application can have tailored logging behaviors.
This structure simplifies managing and configuring loggers across various modules and components.





360
Debugging in VS Code
Variable Inspection
The process of viewing and analyzing the values of variables in a program while it's running.





361
Debugging in VS Code
Code Coverage
The process of determining which parts of your code have been executed during testing or debugging, helping to identify untested areas and ensure comprehensive testing.





362
Debugging in VS Code
Step Out
A debugging feature that lets you exit the current function and return to the function that called it.





363
Debugging in VS Code
Call Stack
A data structure that stores the sequence of function calls made in a program, showing the order in which they were called.





364
Debugging in VS Code
Step Into
A debugging feature that allows you to enter a function call to examine its internal execution line by line.





365
Debugging in VS Code
Hot Reloading
A feature in some debuggers and IDEs that allows you to modify and reload parts of your code while the program is running, enabling you to see the changes in real time without restarting the application.





366
Debugging in VS Code
Watch Expression
A tool in a debugger that allows you to monitor the value of a specific variable or expression during execution.





367
Vocab
Jane Eyre
Arrogate
(AIR-uh-gate) To seize or assume rights or privileges without justification, often in an overbearing or presumptuous manner.





368
Vocab
Lost in a Good Book
Tunguska event: A massive explosion in Siberia (1908) caused by an airburst of a meteoroid or comet, flattening 800 square miles of forest.





369
Vocab
Scriptorium
noun
SPA: skrip-TOR-ee-um
IPA: /skrɪpˈtɔːrɪəm/

A room or place in medieval monasteries where manuscripts were copied, typically by hand.
Example: The scriptorium was the heart of manuscript production during the Middle Ages, where scribes worked diligently.





370
Vocab
Lost in a Good Book
Lerwick: The main town and port of the Shetland Islands, Scotland, known for its fishing and maritime history.





371
Vocab
Red Side Story, FForde
Turpitude
Pronunciation: TUR-pi-tood
Definition: Depravity; moral corruption or wickedness.





372
Vocab
Jane Eyre
Hips and Haws
Fruits of wild roses (hips) and hawthorn trees (haws), commonly seen in hedgerows. These red or orange berries are associated with autumn and are used in herbal remedies and preserves.





373
Vocab
Jane Eyre
Palliate
(PAL-ee-ate) To alleviate pain or lessen the severity of something, especially symptoms or distress, without removing the cause; can also mean to downplay faults or mistakes.





374
Vocab
Jane Eyre
Beldame
(BEL-dame) An old woman, sometimes used respectfully for a grandmother, or pejoratively to describe a hag or crone.





375
Vocab
Jane Eyre
Fillip
(FIL-ip) A small but impactful boost or stimulus; also refers to a flicking motion made by snapping fingers.





376
Vocab
Jane Eyre
Basin and Ewer
(BAY-sin and YOO-er) A bowl (basin) and jug (ewer) used together for hand or face washing, commonly found before the advent of modern plumbing.





377
Vocab
Do Androids Dream of Electric Sheep?
Wimple (WIM-puhl): A cloth headdress covering the head, neck, and sides of the face, traditionally worn by women in the Middle Ages and still by some nuns.





378
Vocab
Lost in a Good Book
Perfidious: Deceitful and untrustworthy, often describing betrayal or disloyalty.





379
Vocab
Lost in a Good Book
Diatryma:  A genus of large flightless Eocene birds from Wyoming and New Mexico having much reduced wings, large head and powerful beak, and long massive legs and constituting with extinct related forms (as Gastornis) an order of birds probably most nearly related to the surviving cariamas and bustards





380
Vocab
Lost in a Good Book
Pelmet(s): A decorative framework or fabric cover above a window, concealing curtain fittings or rods.





381
Vocab
Jane Eyre
Spoony
(SPOO-nee) Foolishly or overly sentimental, especially in matters of love or infatuation, often appearing naïve or overly romantic.





382
Vocab
Red Side Story, FForde
Semolina
Pronunciation: sem-uh-LEE-nuh
Definition: A coarse flour made from durum wheat, commonly used in making pasta and couscous.





383
Vocab
Ecriture
noun
SPA: ay-KREE-toor
IPA: /ˈɛkrɪtʊr/

A French term for writing or script, often used in literary theory to describe the act or art of writing itself.
Example: The novel's use of écriture gives a distinct rhythm and depth to the narrative.





384
Vocab
Interval Funds Generally Have Higher Fees and Costs:
Interval funds usually have higher management fees and operational expenses compared to typical mutual funds or ETFs, due to their complexity, specialized asset classes, and active management strategies.





385
Vocab
Red Side Story, FForde
Parboil
Pronunciation: PAR-boyl
Definition: To partially boil food as a preliminary step before further cooking.





386
Vocab
Palimpsest
noun
SPA: PAL-imps-est
IPA: /ˈpælɪmpsɛst/

A manuscript or document that has been written on, scraped off, and reused, often revealing traces of previous writings beneath the surface.
Example: Archaeologists discovered an ancient palimpsest where earlier texts were still legible under the more recent writing.





387
Vocab
Red Side Story, FForde
Osculation
Pronunciation: oss-kyoo-LAY-shun
Definition: The act of kissing; in mathematics, it can also refer to the contact between curves or surfaces.





388
Email Auth and Security
BIMI (Brand Indicators for Message Identification)

Allows organizations to display their brand logos alongside authenticated emails in recipients' inboxes.
Enhances brand recognition and trust.
Requires proper implementation of SPF, DKIM, and DMARC.





389
Email Auth and Security
SPF (Sender Policy Framework)

A DNS-based email authentication method.
Specifies which mail servers are authorized to send emails on behalf of a domain.
Helps prevent email spoofing by verifying the sender's IP address against the domain's SPF record.





390
Email Auth and Security
SMTP (Simple Mail Transfer Protocol)

The standard protocol used for sending emails across the internet.
Facilitates the transmission of email messages from senders to recipients via mail servers.
Includes commands like HELO/EHLO, MAIL FROM, RCPT TO, DATA, and QUIT.





391
Email Auth and Security
PGP (Pretty Good Privacy)

A data encryption and decryption program that provides cryptographic privacy and authentication.
Used for securing emails through encryption and digital signatures.
Combines symmetric and asymmetric encryption for robust security.





392
Terraform
Meta-Arguments:
Definition: Special arguments like count, depends_on, and lifecycle that control resource behavior and relationships.
Count: Enables creating multiple instances of a resource.

resource "aws_instance" "web" {
  count = var.instance_count
  # Other configuration...
}





393
Terraform
Expressions and Operators:
Definition: Terraform uses expressions to compute values. These support arithmetic operations, string concatenation, and comparisons.
Usage: Allows dynamic configuration based on variable values or conditions.

Example:


"${var.a + var.b}"
"${var.env == "prod" ? "Production" : "Staging"}"





394
Terraform
You can create and use Terraform modules that codify the standards for deploying and managing services in your organization, allowing teams to efficiently deploy services in compliance with your organization’s practices.





395
Terraform
Network Infrastructure Automation (NIA) allows you to safely approve the changes that your applications require without having to manually translate tickets from developers into the changes you think their applications need.





396
Terraform
Provisioning infrastructure across multiple clouds increases fault-tolerance, allowing for more graceful recovery from cloud provider outages. However, multi-cloud deployments add complexity because each provider has its own interfaces, tools, and workflows. Terraform lets you use the same workflow to manage multiple providers and handle cross-cloud dependencies.





397
Terraform
Double Quotes vs. Single Quotes:

Double Quotes (" "): Allow variable interpolation.
Single Quotes (' '): Do not interpolate variables; they treat the content as a literal string.





398
Terraform
terraform validate:
A CLI command that checks the syntax and internal consistency of your Terraform files without connecting to remote services. Use it to catch errors before applying any changes.





399
Terraform
List and Map Indexing:
Access elements within lists or maps using square brackets.

List Example:
${var.instance_ids[0]}

Map Example:
${var.settings["key_name"]}





400
Python
Q:
What happens if you try to call gen.next() on a generator gen in Python 3?

A:
It raises an AttributeError because the correct method to retrieve the next value is next(gen).





401
Python
How can you re-raise an exception after handling it?

try:
    # Some code
    pass
except ValueError as e:
    print("Handling ValueError")
    raise  # Re-raises the caught ValueError





402
Python
Q:
What is the purpose of the finally block in exception handling?

A:
To execute code regardless of whether an exception was raised or not, typically used for cleanup actions.





403
Python
Q:
What exception is raised when an iterator has no more items?

A:
StopIteration.





404
Python
Q:
How do you make a custom object iterable?

A:
By implementing the __iter__() method that returns an iterator (which can be the object itself with a __next__() method).





405
Python
Q:
What is the advantage of using yield from in a generator?

A:
yield from delegates part of the generator’s operations to another generator, simplifying code and allowing for the composition of generators.





406
Python
How do you resolve a relative path to an absolute path using pathlib?

from pathlib import Path
relative_path = Path('some/relative/path')
absolute_path = relative_path.resolve()





407
Python
Q:
How can you obtain command-line arguments in a Python script?

A:
Using sys.argv





408
Python
Q:
What is the main advantage of using generators over lists?

A:
Generators are memory-efficient as they generate items on-the-fly and don't store the entire sequence in memory, making them faster for large datasets.





409
Python
Q:
How can you raise an exception inside a generator from outside?

A:
Using the .throw(type, value=None, traceback=None) method.





410
Python
How can you compare two Path objects for equality regardless of their string representations? By resolving both paths and comparing them.

path1 = Path('/home/user/file.txt').resolve()
path2 = Path('./file.txt').resolve()
are_equal = path1 == path2





411
Python
Q:
What are the two methods that a context manager class must implement?

A:
__enter__() and __exit__(exc_type, exc_value, traceback).





412
Python
Q:
Which keyword is used to define a generator function in Python?

A:
yield





413
Python
Q:
Which library is suggested for adding a progress bar to Python scripts?

A:
tqdm





414
Python
Q:
Which Python module provides an object-oriented approach to handling filesystem paths?

A:
pathlib





415
Python
Q:
What is the primary purpose of exit codes in Python scripts?

A:
To communicate the termination status of a script to the operating system or calling process.





416
RAG Project
async / await
Keywords in Python for writing non-blocking, asynchronous code.





417
RAG Project
auth_client
A special fixture often defined in conftest.py that returns a test client with fake authentication already set up.





418
RAG Project
Quart
A Python web framework like Flask but with full support for async/await. Used to build async HTTP APIs.





419
RAG Project
Generator / yield
Functions that produce values one at a time. Used to stream large responses or iterate lazily.





420
RAG Project
Config Object
A centralized dictionary or structure that stores runtime settings and credentials for your app.





421
RAG Project
Factory Function (create_app)
A function that sets up and returns a fully configured app instance. Used to cleanly separate setup from execution and enable testing.





422
RAG Project
Middleware
Functions that run before/after every request — often used for logging, auth, or telemetry.
Telemetry / Instrumentation
Logging of metrics, performance data, and errors (e.g., via Azure Monitor or OpenTelemetry).





423
RAG Project
Async Test
A test defined with async def, usually needed for Quart and async functions.





424
Azure AD Authentication
Managed Identities
Azure-managed identities used by Azure resources (like VMs) to authenticate to other Azure services, removing the need to manage credentials.





425
Azure AD Authentication
Service Principal
A security identity for an app to authenticate and access Azure resources. Used for automated services and applications instead of using user credentials.





426
Azure AD Authentication
App Registration
Registers an app in Azure AD, creating its identity to authenticate with Azure services. Allows the app to access resources and interact with Azure services.





427
Azure AD Authentication
Role Assignment
Links a principal (user, group, service principal) to a role at a defined scope, granting specific permissions to interact with Azure resources.





428
Azure DevOps Pipelines
What keyword is used to define multiple steps that should run in parallel in Azure DevOps YAML pipelines?
Answer: matrix





429
Azure DevOps Pipelines
What does the jobs keyword in Azure DevOps YAML define?
Answer: It defines a set of jobs that run in the pipeline. Each job can contain steps, and jobs can be executed in parallel or sequentially based on dependencies.





430
Azure DevOps Pipelines
What is the main purpose of a YAML file in Azure DevOps pipelines?
Answer: To define and configure pipeline processes, including steps, tasks, and environments.





431
Azure DevOps Pipelines
What is the default working directory for a pipeline job in Azure DevOps?
Answer: $(Build.SourcesDirectory)





432
Azure DevOps Pipelines
How do you use stages with dependencies in Azure DevOps YAML pipelines?
Answer: You can define dependsOn between stages to specify the execution order. Stages will run sequentially based on the dependencies defined, ensuring that one stage only runs after another has completed.





433
Azure DevOps Pipelines
What is the default trigger for a YAML-based pipeline in Azure DevOps?
Answer: A trigger based on code changes in a Git repository.





434
Azure DevOps Pipelines
How do you specify a condition for a job or stage to run in an Azure DevOps YAML pipeline?
Answer: You use the condition keyword, such as condition: succeeded() to define when a job should run based on the status of previous jobs.





435
Azure DevOps Pipelines
How can you trigger a pipeline based on a Git tag in Azure DevOps?
Answer: You use the trigger keyword with the tags sub-keyword to specify that the pipeline should trigger when a Git tag is pushed.

Example:
trigger:
  tags:
    include:
      - v*





436
Azure DevOps Pipelines
How do you specify a deployment environment like 'staging' or 'production' in a YAML pipeline?
Answer: Use the environment keyword, e.g., environment: 'staging'.





437
DNS
Forward Lookup Zones
DNS zones that translate hostnames to IP addresses. They are the most common type of DNS zones, enabling clients to resolve domain names to their corresponding IPv4 or IPv6 addresses.





438
DNS
Conditional Forwarding
A DNS configuration that directs queries for specific domain names to designated DNS servers instead of using default forwarders. It's useful for managing inter-office DNS resolution or directing queries for partner domains to their respective DNS servers.





439
DNS
Root Hints
A list of authoritative DNS servers for the root zone. Root hints are used by DNS servers to initiate recursive queries when resolving domain names, especially when no forwarders are configured.





440
SharePoint
SharePoint REST API adheres to REST (Representational State Transfer) principles, which means it uses standard HTTP methods (GET, POST, PUT, DELETE) to perform operations on resources identified by URLs.





441
SharePoint
Delegated Permissions
Definition: Permissions granted to an application on behalf of a user. The app acts as the user and can only perform actions that the user is permitted to do.
Use Case: Suitable for scenarios where a user is present and can interactively sign in, such as desktop applications or web apps with user interfaces.
Authentication Flow: Typically involves interactive authentication methods like the Authorization Code Flow or Device Code Flow





442
SharePoint
To retrieve the actual content of the file, you append /$value to the REST API endpoint. This instructs SharePoint to return the binary content of the file instead of its metadata.

GET https://contoso.sharepoint.com/sites/YourSite/_api/web/GetFileByServerRelativeUrl('/Documents/Report.docx')/$value
Headers:
  Accept: application/octet-stream





443
SharePoint
The Content-Type header specifies the media type of the resource being sent to the server. When uploading a file, setting the correct Content-Type ensures that SharePoint correctly interprets the file type. For example, for a Word document, you might use application/vnd.openxmlformats-officedocument.wordprocessingml.document.





444
Azure Functions + PP365
Function Proxies
A feature in Azure Functions that allows developers to create a façade over one or more functions or APIs. Function Proxies can manage routing, transformation, and composition of requests to Python Azure Functions, simplifying API management and enhancing security by abstracting backend services.





445
Azure Functions + PP365
Azure Functions Extensions
Additional modules or packages that extend the capabilities of Azure Functions. For Python developers, extensions can provide support for integrating with other Azure services, enhancing bindings, and adding new triggers, enabling more complex and feature-rich serverless applications.





446
Azure Functions + PP365
API Gateway Integration
Connecting Azure Functions with an API gateway to manage and secure API traffic. Integrating with services like Azure API Management allows Python Azure Functions to benefit from features like rate limiting, authentication, and monitoring, enhancing the security and scalability of exposed APIs.





447
Azure Functions + PP365
Power Platform CLI
A command-line interface tool for managing Power Platform resources, including Power Apps, Power Automate, and Dataverse. The Power Platform CLI facilitates automation, scripting, and advanced management tasks, enabling developers and administrators to interact with the platform efficiently.





448
Azure Functions + PP365
Azure Service Principal
An identity created for use with applications, hosted services, and automated tools to access Azure resources. Service principals enable secure, programmatic access to Azure services, acting as non-human users with specific permissions, essential for authenticating applications like Power Automate and Azure Functions.





449
Azure Functions + PP365
Local Debugging
Running and testing Azure Functions on a local machine to identify and fix issues before deployment. Python developers use tools like Azure Functions Core Tools and VS Code to debug functions locally, allowing for rapid development and troubleshooting in a controlled environment.





450
Azure Functions + PP365
Environment Variables
Variables set in the operating environment that can be accessed by applications. In Python Azure Functions, environment variables are used to store configuration data, secrets, and connection strings securely, allowing functions to adapt to different environments without code changes.





451
PnP Powershell
Set-PnPWeb (PnP.PowerShell)
Configures properties of a SharePoint site, such as title, description, and logo. Enables automated site customization and configuration management.





452
PnP Powershell
New-PnPList (PnP.PowerShell)
Creates a new SharePoint list within a site. Supports specifying list templates, columns, and settings, facilitating automated list management.





453
PnP Powershell
AppInv.aspx
A SharePoint page used to grant app permissions to specific SharePoint sites, allowing custom or third-party apps to access site resources based on defined permissions.





454
PnP Powershell
Server Relative URL
The URL path relative to the SharePoint server, excluding the domain (e.g., /sites/ASB/Shared Documents), used in REST API endpoints for precise resource targeting.





455
PnP Powershell
Update-PnPListItem (PnP.PowerShell)
Modifies an existing item in a SharePoint list. Allows updating fields and properties, supporting dynamic data management and automation.





456
PnP Powershell
Get-PnPGroup (PnP.PowerShell)
Retrieves information about SharePoint groups within a site. Assists in managing permissions and user access by programmatically handling group memberships.





457
PnP Powershell
Token Caching
Stores OAuth tokens locally to reduce the need for repeated authentication requests. Enhances script performance and reduces latency in API interactions.





458
PnP Powershell
Remove-PnPFile (PnP.PowerShell)
Deletes a specified file from a SharePoint library or folder. Useful for automating cleanup tasks or managing outdated documents programmatically.





459
PnP Powershell
Get-PnPSite (PnP.PowerShell)
Fetches information about the current SharePoint site, including properties like URL, title, and storage usage. Helps in monitoring and managing site configurations.





460
PnP Powershell
System.IO.Stream (System.IO)
Represents a sequence of bytes, such as a file. Used in PowerShell to handle file data streams for operations like uploading files to SharePoint.





461
PnP Powershell
AADSTS7000218 Error
An Azure AD error stating that the authentication request lacks a client_assertion or client_secret, preventing successful token acquisition.





462
PnP Powershell
Client Secret (client_secret)
A confidential key associated with an Azure AD application, used alongside the client ID to authenticate the application in secure authentication flows.





463
Home Network Project
Front: Explain the purpose of AllowedIPs in WireGuard configuration.

Back: AllowedIPs defines the IP addresses that are permitted to be routed through the VPN tunnel for a specific peer. It acts as both an access control list and routing rule, determining which traffic should be encrypted and sent through the VPN and which should bypass it.

The -f flag indicates the name of the Dockerfile to use.
The -t flag specifies the name of the image to be created; in this example, myapp:v1.
The final parameter, ., provides the build context for the source files for the COPY command: the set of files on the host computer needed during the build process.





464
Home Network Project
How do you install Docker on a Raspberry Pi?

bash
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo usermod -aG docker pi





465
Home Network Project
Front: How does Pi-hole utilize DNS Sinkholing to block ads?

Back: Pi-hole intercepts DNS queries for domains listed in its blocklists. Instead of resolving these domains to their legitimate IP addresses, Pi-hole returns a non-routable IP address (e.g., 0.0.0.0), preventing the ad content from loading on the client devices.





466
Azure Functions + Visual Studio
ASP.NET Core provides built-in Dependency Injection (DI) support, enabling you to manage dependencies in your application. This makes your code more modular, testable, and easier to maintain.





467
Azure Functions + Visual Studio
ASP.NET uses a flexible routing system to map URLs to controllers and actions in ASP.NET MVC or ASP.NET Web API applications. This routing system supports custom URL patterns and simplifies URL management.





468
Azure Functions + Visual Studio
The ASP.NET MVC architecture is based on the Model-View-Controller pattern, which separates the application into three components: Models (data), Views (UI), and Controllers (logic), providing a clean separation of concerns for better maintainability.





469
Azure Functions + Visual Studio
In all cases, a function is passed an ILogger parameter. The function can use this parameter to write log messages, which the function app writes to storage for later analysis.





470
FSLogix
Q: Which format does FSLogix use to store user profile data?
A: FSLogix uses the VHDX (Virtual Hard Disk) format to store user profile data in containers.





471
FSLogix
Cloud Cache uses the locally mounted container to provide periodic updates to the remote storage providers. Cloud Cache is designed to insulate users from short-term or intermittent local (inner-region, close proximity) storage issues.





472
FSLogix
All data written to the user's profile is temporarily stored as block-level cache objects in the same directory. Those block-level cache objects are then committed to the local cache. Before the block-level cache objects are created, the writes into the user's profile are processed in memory through a proxy file.





473
FSLogix
Cloud Cache uses storage providers based on the order of entries in CCDLocations.
Storage providers should be listed in order of proximity, then preference.
Only one (1) provider is used when data is hydrated from the storage provider.





474
FSLogix
A full VHD(x) clone is performed when Cloud Cache determines, at sign in, that a storage provider isn't at the same sequence. During this operation, all pending writes are kept in the local cache until all storage providers are at the same sequence. Once complete, the flush operation begins sending new data to the storage providers.





475
FSLogix
Cloud Cache operates the user's profile from the local cache during the user's session and must be configured with one or more remote storage providers as specified in CCDLocations. These remote storage providers store copies of the local cache and are used during the current session and for subsequent sign ins.





476
FSLogix
Q: What does the FSLogix Profile Container do when a user is logging into multiple Azure Virtual Desktops (AVD)?
A: FSLogix mounts the same Profile Container (VHDX) to any virtual desktop the user logs into, ensuring that their profile settings, documents, and application preferences are consistent and immediately available across all virtual machines. This provides a unified experience regardless of which VM the user accesses.





477
FSLogix
Cloud Cache uses the concept of a proxy file, represented as Profile_%username%.vhd though it isn't a true VHD file. The proxy file is used as a means to collect and process all I/O writes destined for the local cache. The I/O writes are buffered in memory and tracked via the proxy file before they're written out as block-level cache objects in the cache directory.





478
Audit Report Tracker (Sharepoint List)
Create List Item (for creating a new item in a SharePoint list):

Endpoint: POST https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/items
Description: Adds a new item to a specified SharePoint list.





479
Audit Report Tracker (Sharepoint List)
View (SharePoint View)
Definition: A pre-defined display of list data, which can filter, sort, and group information in a specific way.
Context: Views can be customized to show only specific columns, items, or data based on user needs.





480
Audit Report Tracker (Sharepoint List)
List Views Endpoint (for getting views in a SharePoint list):

Endpoint: GET https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/views
Description: Retrieves the views available in a specified SharePoint list.





481
Audit Report Tracker (Sharepoint List)
List Administrator
Definition: A user with permissions to manage a specific SharePoint list, including adding columns, modifying views, and setting list-specific permissions.
Context: Has permissions to edit and configure a specific list within a site.





482
IW Migration
Linked Table Manager (in Access)
A feature in MS Access that helps you manage and refresh connections to external data sources. If a database is split, this tool reconnects front-end objects to back-end tables, ensuring smooth data retrieval and updates.





483
IW Migration
Database Backup and Restore (SSMS)
Built-in wizards and features in SQL Server Management Studio to safeguard data. They allow administrators to create full, differential, or transaction log backups and restore databases to a previous state, ensuring data recovery after failures.





484
IW Migration
VBA Modules (Access)
Visual Basic for Applications code libraries integrated within Access. Modules let developers write custom functions, event handlers, and business logic to enhance functionality beyond what macros offer, enabling more advanced data manipulation and validation.





485
IW Migration
Execution Plans (SQL Server)
Visual or textual representations of how the SQL Engine executes queries. They identify steps taken—like table scans, index seeks, or joins—helping developers and DBAs optimize performance, tune queries, and refine indexing strategies.





486
Todd Ideas
In Azure AI Document Intelligence, the incoming data is processed in the same region where the Document Intelligence resource was created. When you submit your documents to a Document Intelligence operation, it starts the process of analyzing the document to extract all text and identify structure and key values in a document.





487
Todd Ideas
In Azure AI Document Intelligence, you can integrate with Azure Functions to trigger document processing automatically upon upload, using serverless computing for cost-effective, event-driven workflows that streamline data extraction and real-time business logic.





488
Todd Ideas
In Azure AI Document Intelligence, prebuilt models offer a straightforward integration via RESTful APIs. Their endpoints are designed for simplicity, returning data in structured JSON. This means that once you send your document for analysis, you can easily parse the response and integrate the extracted fields directly into your application’s workflow.





489
Todd Ideas
In Azure AI Document Intelligence, Custom classifiers identify document types before invoking an extraction model.

Custom classifier | Identify designated document types (classes) before invoking an extraction model.





490
Todd Ideas
In Azure AI Document Intelligence, although prebuilt models deliver robust extraction out-of-the-box, they offer customization options such as field mapping and configuration adjustments, enabling developers to fine-tune output formats to align with unique business requirements.





491
Open Source/GitHub
Downstream Repository

A fork or clone of an upstream repository, where contributors can make changes independently before contributing back.





492
Open Source/GitHub
Good First Issue

A label for beginner-friendly tasks in a project’s issue tracker, designed to help new contributors make their initial contributions with manageable tasks.





493
Open Source/GitHub
Test Suite

A collection of automated tests that verify the functionality and integrity of a project’s code, ensuring that changes do not introduce new bugs.





494
Open Source/GitHub
CONTRIBUTING.md

A markdown file that outlines the process and guidelines for contributing to a project, including coding standards, commit messages, and pull request procedures.





495
Open Source/GitHub
Contribution Guidelines

A set of rules and best practices outlined by a project to ensure consistent and quality contributions from all contributors, often found in CONTRIBUTING.md.





496
JavaScript Concepts
GraphQL: A query language for APIs that allows clients to request exactly the data they need, improving efficiency and flexibility over REST.





497
JavaScript Concepts
Service Workers: Scripts that run in the background of web browsers, enabling features like offline functionality and push notifications.





498
JavaScript Concepts
Vue.js: A progressive framework for building user interfaces, known for its simplicity and flexibility, with features like directives and single-file components.





499
JavaScript Concepts
Event Handling: Responding to user interactions like clicks and keypresses by attaching event listeners to DOM elements.





500
JavaScript Concepts
Chai: An assertion library that pairs with testing frameworks like Mocha, providing readable and expressive test assertions.





501
JavaScript Concepts
Bitbucket: A Git-based source code repository hosting service, offering integration with Atlassian products like Jira for project management.





502
JavaScript Concepts
Dependency Injection: A design pattern used in frameworks like Angular and NestJS to manage and inject dependencies, promoting modularity and testability.





503
JavaScript Concepts
Testing Library: A family of libraries that encourage testing best practices by focusing on user interactions rather than implementation details.





504
JavaScript Concepts
React Hooks: Functions like useState and useEffect that allow functional components to manage state and side effects in React.





505
JavaScript Concepts
Server-Side Rendering (SSR): Rendering web pages on the server before sending them to the client, improving performance and SEO.





506
JavaScript Concepts
Arrow Functions: Arrow functions provide a concise syntax for writing functions. They are especially useful for short functions and callbacks. For example:

const add = (a, b) => a + b;





507
JavaScript Concepts
Spread and Rest Operators (...): Operators that expand elements of arrays or objects (spread) and collect multiple elements into a single array parameter (rest).





508
JavaScript Concepts
Virtual DOM: An in-memory representation of the real DOM used by libraries like React to optimize and batch DOM updates efficiently.





509
JavaScript Concepts
Middleware: Functions in frameworks like Express.js that have access to request and response objects, used for tasks like authentication and logging.





510
JavaScript Concepts
Template Literals: Enhanced string syntax using backticks, allowing embedded expressions and multi-line strings for better readability.





511
JavaScript Concepts
Netlify: A platform for deploying static sites and serverless functions, providing continuous deployment and built-in CI/CD pipelines.





512
JavaScript Concepts
While Loop
while (condition) {
    // Code to execute as long as condition is true
}





513
JavaScript Concepts
Logical AND (&&) and OR (||) Statements
if (condition1 && condition2) {
    // Code to execute if both condition1 and condition2 are true
}

if (condition1 || condition2) {
    // Code to execute if either condition1 or condition2 is true
}





514
JavaScript Concepts
Component-Based Architecture: Building applications by encapsulating functionality into independent, reusable components, commonly used in frontend frameworks.





515
JavaScript Concepts
Jest: A JavaScript testing framework by Facebook, supporting unit, integration, and snapshot testing, particularly well-suited for React applications.





516
Powershell Modules
Get-InstalledModule

Definition: A cmdlet that retrieves modules installed on the system.
Explanation: Useful for managing and updating modules. Example: Get-InstalledModule | Update-Module updates all installed modules.





517
Powershell Modules
Scope (Installation)

Definition: Determines whether a module is installed for all users or just the current user.
Explanation: Controlled via the -Scope parameter in Install-Module. Options include CurrentUser and AllUsers.





518
Powershell Modules
Update-Module

Definition: A cmdlet used to update an installed module to its latest version from the repository.
Explanation: Example: Update-Module -Name Az updates the Az module. To update all modules: Get-InstalledModule | Update-Module.





519
Powershell Modules
Auto-Import

Definition: A feature in PowerShell that automatically imports a module when a cmdlet from that module is invoked.
Explanation: Starting from PowerShell 3.0, modules can be auto-imported, eliminating the need to manually run Import-Module for each module you use.





520
Powershell Modules
Select-Object

Definition: A cmdlet that selects specific properties of an object or set of objects.
Explanation: Often used to filter and display only the needed information. Example: Get-Module -ListAvailable | Select-Object Name, Version, Path.





521
Powershell Modules
Dependencies

Definition: Other modules or components that a PowerShell module requires to function correctly.
Explanation: Dependencies are specified in a module's manifest and must be present for the module to operate as intended. They can be viewed using properties like RequiredModules.





522
Powershell Modules
Windows System Modules Directory
Definition: A default directory where PowerShell modules are stored for all users.
Explanation: Typically located at C:\Program Files\PowerShell\Modules.





523
Powershell Modules
Module Path

Definition: The directories where PowerShell looks for modules.
Explanation: Can be viewed using the $env:PSModulePath environment variable. PowerShell searches these paths when importing modules.





524
Powershell Modules
New-AzResourceGroup

Definition: Creates a new Azure Resource Group.
Example Usage: New-AzResourceGroup -Name "TestResourceGroup" -Location "EastUS".





525
Powershell Modules
Listing All Available Modules:
Get-Module -ListAvailable | Select-Object Name, Version, Path

Updating All Installed Modules:
Get-InstalledModule | Update-Module





526
Powershell Modules
Connect-AzAccount

Definition: A cmdlet from the Az module that authenticates your session with Azure.
Example Usage: Connect-AzAccount prompts for Azure credentials to manage Azure resources.





527
Powershell Modules
Module Load Order

Definition: The sequence in which modules are loaded into a PowerShell session.
Explanation: Important when resolving cmdlet conflicts or ensuring dependencies are loaded first.





528
Powershell Modules
Module Version Specification

Definition: The practice of specifying exact module versions when importing to ensure script compatibility.
Explanation: Done using parameters like -RequiredVersion in Import-Module. Example: Import-Module -Name Az -RequiredVersion 5.0.0.





529
Powershell Modules
CurrentUser Scope

Definition: An installation scope that makes a PowerShell module available only to the current user.
Explanation: Installing a module with -Scope CurrentUser does not require administrative privileges and places the module in the user's profile directory, typically C:\Users\<Username>\Documents\PowerShell\Modules.





530
Powershell Modules
Find-Module

Definition: Searches for modules in a repository like the PowerShell Gallery.
Example Usage: Find-Module -Name SQLServer searches for the "SQLServer" module.





531
Powershell Modules
Module Conflicts

Definition: Situations where multiple modules have cmdlets or functions with the same name.
Explanation: Resolved by fully qualifying cmdlet names with the module name (e.g., Az\Get-AzVM).





532
WSL + Kali Linux
WSL Networking
Accessing Windows Network Services from WSL: WSL allows you to access Windows network services and vice versa. For example, you can access a Windows-hosted HTTP server in WSL at localhost:port.
wsl.exe Networking: When WSL 2 is in use, it runs a virtualized network adapter with a different IP address than the host machine, but WSL 2 allows seamless access to services running on the host.





533
WSL + Kali Linux
D-Bus
A message bus system that allows applications and services to communicate with each other, particularly in Linux-based systems. D-Bus is essential for managing things like user authentication and device notifications in desktop environments.





534
WSL + Kali Linux
XFCE (XForms Common Environment)
A lightweight and fast desktop environment for Unix-like operating systems, known for its low resource usage. XFCE provides a complete graphical interface for managing windows, files, and system settings.





535
WSL + Kali Linux
12. wsl --mount
A feature introduced with WSL 2, this allows you to mount physical disks in WSL as Linux file systems. Useful for accessing raw disks like external drives directly within WSL.
13. wsl --no-launch
Prevents WSL from automatically launching the default Linux shell after a distribution is installed.





536
Azure Developer Associate
Azure blob rule filter type:
prefixMatch	
  An array of strings for prefixes to be match. Each rule can define up to 10 prefixes. A prefix string must start with a container name.	
  Not Required





537
Azure Developer Associate
While a blob is in the archive access tier, it's considered to be offline and can't be read or modified. In order to read or modify data in an archived blob, you must first rehydrate the blob to an online tier, either the hot or cool tier.





538
Azure Developer Associate
Rehydration priority options include:

High priority: The rehydration request is prioritized over standard priority requests and might complete in under one hour for objects under 10 GB in size.





539
Azure Developer Associate
There are two options for rehydrating a blob that is stored in the archive tier:

Copy an archived blob to an online tier: You can rehydrate an archived blob by copying it to a new blob in the hot or cool tier with the Copy Blob or Copy Blob from URL operation. Microsoft recommends this option for most scenarios.





540
Azure Developer Associate
Q: Name 3 common use cases for Azure Cache for Redis.
A: Session storage, API response caching, real-time leaderboards.





541
Azure Developer Associate
Q: Which Azure Cache for Redis tier allows SSD-backed storage for large datasets?
A: Enterprise Flash tier.





542
Azure Developer Associate
What setting ensures an app only uses a connection string in a specific slot?
Mark it as a deployment slot setting





543
Azure Developer Associate
Q: What are Redis’s primary data structures?
A: Strings, Lists, Sets, Sorted Sets, Hashes, Bitmaps, HyperLogLogs, Streams.





544
Azure Developer Associate
Q: What should you monitor in production Redis usage?
A: Memory usage, key eviction rates, connection count, latency, hit/miss ratio.





545
Azure Developer Associate
Azure blob storage rule actions:
  tierToCool
  tierToCold
  enableAutoTierToHotFromCool	
  tierToArchive
  delete





546
Azure Developer Associate
Q: Can the Standard tier of Azure Cache for Redis be deployed into a VNet?
A: No — only Premium and above support VNet integration.





547
Azure Developer Associate
Q: Which Azure Redis tier supports persistence and clustering?
A: Premium Tier — includes data persistence, clustering, geo-replication, and VNet integration.





548
Azure Developer Associate
Q: What port is used for SSL/TLS connections to Azure Cache for Redis?
A: Port 6380.





549
Azure Developer Associate
Which service provides centralized telemetry and query support for logs and metrics across Azure services?
Azure Monitor Logs (Log Analytics)





550
Azure Developer Associate
What is the recommended way to authenticate an App Service to access Azure resources like Storage or Key Vault?
Use a Managed Identity





551
Azure Developer Associate
What is the default behavior when multiple apps share the same App Service Plan?
They share compute resources, which can cause performance issues if one app consumes too much.





552
Azure Developer Associate
What Azure App Service feature allows gradual traffic routing between staging and production versions of an app?
Deployment Slots





553
Logging in Python
Q: What is the purpose of the disable_existing_loggers key in a dictConfig logging configuration?

A: disable_existing_loggers=False in logging.config.dictConfig
This ensures that existing loggers not specified in the configuration remain active and are not disabled.





554
Logging in Python
Q: What is the advantage of using logging.getLogger(__name__) in each module of a Python application?

A: It automatically names the logger based on the module's name, ensuring consistency and facilitating hierarchical logging configurations.
This practice aligns loggers with the application's structure, making configuration and debugging more manageable.





555
Logging in Python
Q: How can external log rotation tools like logrotate interact with Python's WatchedFileHandler from the logging.handlers module?

A: WatchedFileHandler detects external changes to the log file (like rotation) and automatically reopens the file, ensuring continuous logging without interruption.
This integration ensures that logs remain consistent even when rotated by external utilities.





556
Logging in Python
Q: How does RotatingFileHandler from the logging.handlers module determine when to rotate a log file?

A: It rotates the log file when it reaches a specified size, such as maxBytes=5*1024*1024 (5 MB).
Once the file size exceeds this threshold, a new log file is created, and backups are managed based on backupCount.





557
Logging in Python
Q: What does logging.disable(logging.CRITICAL) do in Python's logging module?

A: It disables all logging messages at or below the CRITICAL level.
Since CRITICAL is the highest standard level, this effectively silences all log messages.





558
Logging in Python
Q: What happens if you add multiple handlers to a logger that write to the same file without proper configuration in Python's logging module?

A: It can lead to duplicate log entries and potential file access conflicts.
Ensuring that each handler writes to a unique file or managing handler configurations prevents such issues.





559
Logging in Python
Q: How can you configure logging using an external INI-style configuration file in Python's logging module?

A: Use logging.config.fileConfig('logging.ini') from the logging.config module
This function reads the logging configuration from an INI file, allowing for external and reusable configurations.





560
Logging in Python
Q: What is a NullHandler used for in Python's logging module?

A: To discard log messages, preventing "No handler" warnings in library code.
This is useful for libraries to ensure they don't interfere with the application's logging configuration.





561
Logging in Python
Q: How does TimedRotatingFileHandler from the logging.handlers module differ from RotatingFileHandler?

A: TimedRotatingFileHandler rotates log files based on time intervals (e.g., daily at midnight), whereas RotatingFileHandler rotates based on file size (maxBytes).
This allows for log rotation that aligns with time-based requirements instead of size-based thresholds.





562
Logging in Python
Q: What is one advantage of using structured logging libraries like Structlog over Python's built-in logging module?

A: Structured logging facilitates easier parsing, querying, and analysis of log data, especially when integrating with log management systems.
This is particularly useful for applications that require detailed and machine-readable log formats.





563
Logging in Python
Q: What should you do to ensure that logging.basicConfig() has an effect in Python's logging module?

A: Call it before adding any custom handlers or performing other logging configurations, and ensure that the root logger doesn't already have handlers attached.
This guarantees that basicConfig sets up the logging system as intended without being overridden.





564
Logging in Python
Q: What is the significance of the level parameter when configuring a logger or handler in Python's logging module?

A: It sets the minimum severity of log messages that will be processed; messages below this level are ignored.
For example, setting level=logging.INFO means that DEBUG messages will be ignored.





565
Logging in Python
Q: What is the purpose of a Formatter in Python's logging module?

A: To define the structure and content of log messages using formats like '%(asctime)s - %(levelname)s - %(message)s'.
This ensures that log messages are consistently formatted for readability and analysis.





566
Logging in Python
Q: What is one of the best practices for securing log files in Python's logging module?

A: Setting appropriate file permissions to restrict unauthorized access.
This protects sensitive log data from being accessed or tampered with by unauthorized users.





567
Logging in Python
Q: What is one advantage of using dictConfig over fileConfig for logging configuration in Python's logging module?

A: dictConfig allows for more complex and dynamic configurations, often being easier to manage programmatically.
This flexibility makes it suitable for applications that require runtime logging configuration changes.





568
Debugging in VS Code
Exception Breakpoint
A breakpoint that pauses the program when a specific exception (error) is raised.





569
Debugging in VS Code
Conditional Breakpoint
A breakpoint that only pauses execution when a specific condition is met (e.g., when a variable reaches a certain value).





570
Debugging in VS Code
Step Over
A debugging feature that allows you to skip over a function call, running it entirely without entering it.





571
Debugging in VS Code
Remote Debugging
The process of debugging code running on a different machine or environment from your local computer.





572
Debugging in VS Code
Reverse Debugging
A debugging technique where you can move backward through the program’s execution to examine the program's state before an issue occurred, often helpful for tracking down bugs that involve complex states.





573
Debugging in VS Code
Profiling
The process of analyzing the performance of a program, including memory usage, execution time, and function calls, to identify bottlenecks and optimize performance.





574
Vocab
Lost in a Good Book
Doric columns: A simple, sturdy style of Greek column with a plain capital and no base, emphasizing proportion and strength.





575
Vocab
Do Androids Dream of Electric Sheep?
Vagus nerve (VAY-guhs nurv): The tenth cranial nerve that extends from the brainstem to the abdomen, playing a crucial role in the parasympathetic nervous system by controlling involuntary functions such as heart rate, digestion, and respiratory rate.





576
Vocab
Structured Credit Provides Portfolio Diversification:
Investors utilize structured credit products to diversify portfolios beyond traditional bonds or equities, potentially accessing higher yields or returns not typically achievable through standard debt instruments.





577
Vocab
Do Androids Dream of Electric Sheep?
Bucolic (byoo-KOL-ik): Relating to the pleasant aspects of the countryside and country life; pastoral.





578
Vocab
Do Androids Dream of Electric Sheep?
Thalamic (thuh-LAM-ik): Relating to the thalamus, a part of the brain that acts as a relay station for sensory and motor signals.





579
Vocab
Lacunary
adjective
SPA: LACK-yoo-nary
IPA: /ˈlækjʊnəri/

Characterized by gaps or missing portions, particularly in texts or manuscripts.
Example: The ancient manuscript was lacunary, with several sections of the text lost to time.





580
Vocab
Logogram
noun
SPA: LOG-oh-gram
IPA: /ˈləʊɡəʊɡræm/

A written character or symbol that represents a word or morpheme, rather than a sound, commonly found in languages like Chinese.
Example: Chinese characters are logograms, each representing a concept or word rather than a phonetic sound.





581
Vocab
Interval Funds Carry Redemption Risk:
Because interval funds permit redemptions only periodically—and often limit the total amount redeemable in each interval (commonly 5%-25% of assets)—investors may face difficulty liquidating positions quickly if the need arises.





582
Vocab
Lost in a Good Book
Wisteria: A climbing flowering plant with fragrant, cascading purple or white blooms, often grown on pergolas or trellises.





583
Vocab
Jane Eyre
Post-chaise
(POST-shayz) A lightweight, horse-drawn carriage used for long-distance travel, designed for speed and efficiency, popular in the 18th and 19th centuries.





584
Vocab
Jane Eyre
Contumelious Epithet
(con-too-MEE-lee-uhs EP-uh-thet) An insult or scornful nickname intended to express contempt, often delivered with arrogance.





585
Vocab
Anacoluthon
noun
SPA: an-uh-koh-LOO-thon
IPA: /ˌænəkəˈluːθɒn/

A grammatical construction in which a sentence begins in one way but ends in another, often disrupting the expected syntax or logical sequence.
Example: His speech was full of anacoluthons, making it difficult to follow his intended argument.





586
Vocab
Lost in a Good Book
Phaeton (bodied automobile): A type of early open-top car with no fixed roof, evoking the design of 19th-century horse-drawn carriages.





587
Vocab
Red Side Story, FForde
Curtilage
Pronunciation: KUR-tuh-lij
Definition: The area immediately surrounding a house or dwelling, often considered part of its property for legal purposes.





588
Vocab
Red Side Story, FForde
Proscenium
Pronunciation: pruh-SEE-nee-uhm
Definition: The part of a theater stage in front of the curtain, often framing the stage.





589
Vocab
Structured Credit Combines Debt Instruments:
Structured credit refers to complex financial products created by pooling and repackaging loans, bonds, or other debt obligations, then dividing them into distinct risk-and-return segments called tranches.





590
Vocab
Red Side Story, FForde
Gimbal
Pronunciation: GIM-buhl
Definition: A pivoted support that allows the rotation of an object about a single axis, often used in photography and aerospace for stabilization.





591
Vocab
Lost in a Good Book
Evelyn Waugh (novels): English writer famous for satirical works like Brideshead Revisited and A Handful of Dust, exploring themes of aristocracy, faith, and morality.





592
Vocab
Lost in a Good Book
Compère (of a game show): A host or master of ceremonies, responsible for introducing participants and keeping the event flowing.





593
Vocab
Jane Eyre
Piquant
(PEE-kahnt) Having a pleasantly sharp or spicy taste; can also describe something intellectually stimulating or excitingly provocative.





594
Vocab
Interval Funds Invest in Less Liquid Assets:
Interval funds typically invest in alternative, less liquid assets like real estate, private equity, private debt, and structured credit, granting investors access to opportunities not typically available through conventional investment vehicles.





595
Email Auth and Security
Email Authentication Alignment

Ensuring that SPF and DKIM align with the domain specified in the email's "From" header.
Critical for DMARC to function correctly.
Provides consistent authentication results and improves email deliverability.





596
Email Auth and Security
DMARC (Domain-based Message Authentication, Reporting & Conformance)

Builds on SPF and DKIM to provide domain owners with policies for handling unauthenticated emails.
Enables reporting on email authentication status and issues.
Protects against unauthorized use of a domain in email communications.





597
Email Auth and Security
MX Toolbox

An online suite of tools for diagnosing and analyzing DNS records.
Checks SPF, DKIM, and DMARC configurations.
Helps administrators verify the correctness of their email authentication setups.





598
Email Auth and Security
MUA (Mail User Agent)

An email client used by end-users to send, receive, and manage their emails.
Provides the interface for users to interact with their email accounts.
Examples include Microsoft Outlook, Mozilla Thunderbird, and Gmail.





599
Terraform
Variable References:
Refer to variables using the var. prefix within interpolation expressions. For example:

${var.env}





600
Terraform
Remote Backends and Interpolation:
Definition: Terraform can store state remotely (e.g., in AWS S3, Azure Blob Storage). Variable interpolation may be used to configure these backends dynamically.
Example:

terraform {
  backend "s3" {
    bucket = var.state_bucket
    key    = "path/to/my/key"
    region = var.region
  }
}





601
Terraform
Built-In Functions:
Definition: Terraform provides functions for manipulating data types like strings, lists, and maps.
Usage: Essential for transforming and preparing data for resource configurations.

Examples:
join(separator, list): Concatenates list elements.
h
Copy
"${join(",", var.instance_ids)}"
split(delimiter, string): Splits a string into a list.
lookup(map, key, default): Retrieves a value from a map.





602
Terraform
Dynamic Blocks:
Definition: Allow you to construct nested blocks dynamically based on complex data structures.
Usage: Ideal for when the number of nested blocks is not fixed and depends on variable data.

Example:

dynamic "ingress" {
  for_each = var.ingress_rules
  content {
    from_port = ingress.value.from
    to_port   = ingress.value.to
    protocol  = ingress.value.protocol
  }
}





603
Terraform
Ticket-based review processes are a bottleneck that can slow down development. Instead, you can use Sentinel, a policy-as-code framework, to automatically enforce compliance and governance policies before Terraform makes infrastructure changes. Sentinel policies are available in Terraform Enterprise and HCP Terraform.





604
Terraform
Ternary Operator (Conditional Expression):
A shorthand for conditional logic in interpolation.

Syntax:
${condition ? "true_value" : "false_value"}

Example:
${var.env == "prod" ? "Production" : "Non-production"}





605
Terraform
For Expressions:

Definition: These are used to transform or filter collections (lists or maps) inline.
Usage: Useful for generating new lists or maps based on existing ones without using external loops.
Example:

[for instance in var.instances : instance.id]





606
Terraform
Terraform allows you to manage the resources in each tier together, and automatically handles dependencies between tiers. For example, Terraform will deploy a database tier before provisioning the web servers that depend on it.





607
Python
Q:
What is the purpose of itertools.groupby()?

A:
It groups consecutive keys in an iterable that are identical, returning the key and the group iterator.





608
Python
Q:
What does the pathlib.Path class represent in Python?

A:
Filesystem paths with methods and properties for path manipulations in an object-oriented manner.





609
Python
Q:
How can you create an infinite iterator cycling through a given iterable using itertools?

A:
Using itertools.cycle(iterable).





610
Python
Q:
What is the default exit code if a Python script ends without calling sys.exit()?

A:
0 (indicating successful execution).





611
Python
Q:
Name a built-in context manager in Python and its purpose.

A:
open() is a built-in context manager used for opening files. It ensures that the file is properly closed after its block of code is executed.





612
Python
Q:
How can you define a custom exception in Python?

A:
By creating a new class that inherits from the built-in Exception class.
Example:
class MyCustomError(Exception):
    pass





613
Python
Q:
Name a common use case for generators in Python.

A:
Reading large files one line at a time without loading the entire file into memory.





614
Python
Q:
What does the else block do in a try-except statement?

A:
The else block executes if no exceptions were raised in the try block.





615
Python
Q:
How can you create a context manager using a generator function?

A:
By using the @contextmanager decorator from the contextlib module and yielding control within the function.





616
Python
Which pathlib method can be used to iterate recursively through all files matching a pattern?

for file in Path('/path/to/directory').rglob('*.txt'):
    print(file)





617
Python
Q:
How can you set an exit code of 2 in a Python script?

A:
Using either sys.exit(2) or exit(2).





618
Python
Q:
What does sys.exit(1) signify in a Python script?

A:
An error occurred during execution.





619
Python
Q:
What is the advantage of using context managers for resource management?

A:
They ensure that resources are properly acquired and released, even if errors occur, promoting cleaner and more reliable code.





620
Python
Q:
What does an exit code of 0 typically signify in a Python script?

A:
Successful execution without errors.





621
Python
Q:
Which Python module is commonly used to set exit codes?

A:
sys





622
RAG Project
ASGI
Asynchronous Server Gateway Interface — allows async Python web apps to talk to servers. Quart apps are ASGI apps.





623
RAG Project
Patch / Monkeypatch
Temporary override of code behavior during tests — often used to replace Azure calls with mocks.





624
RAG Project
test_client()
A method on a Quart app that gives you a fake browser-like interface to make test requests like client.get("/endpoint").





625
RAG Project
Dataclass
A Python feature that makes it easy to create classes with fields. Often used for request/response models.





626
RAG Project
Test Client
A simulated web client that sends fake HTTP requests to your app (e.g., client.post("/ask")).





627
RAG Project
pytest.mark.asyncio
A decorator that marks a test function as asynchronous so you can use await inside it. Required when testing Quart or anything async.





628
RAG Project
OIDC / Entra ID
Authentication standards used by Azure for signing in users.





629
RAG Project
__init__.py
A special file that makes a directory a Python package (so it can be imported).





630
Azure AD Authentication
Custom Roles
User-defined roles with specific permissions, used when built-in roles don’t provide the required access or for more granular control.





631
Azure AD Authentication
App Registration vs Enterprise Application
App Registration defines the app’s identity, while Enterprise Application represents the actual instance of the app within an Azure AD tenant.





632
Azure AD Authentication
Azure AD Roles vs Azure Resource Roles
Azure AD Roles manage access to directory functions (e.g., Global Administrator), while Resource Roles control access to Azure resources (e.g., Contributor).





633
Azure AD Authentication
Role Inheritance
Roles assigned at a higher scope (e.g., subscription) are inherited by resources at lower scopes (e.g., resource groups, resources).





634
Azure DevOps Pipelines
How can you specify which agent pool should be used in a YAML pipeline file?
Answer: pool: <agent_pool_name>





635
Azure DevOps Pipelines
In Azure DevOps, what is the use of the strategy keyword in a pipeline matrix?
Answer: The strategy keyword allows you to define different combinations of variables or configurations for matrix jobs, enabling parallel execution with different environments or settings.





636
Azure DevOps Pipelines
What is the purpose of the 'checkout' step in an Azure DevOps YAML pipeline?
Answer: It checks out the source code from the repository for use in the pipeline.





637
Azure DevOps Pipelines
In Azure DevOps, what command is used to run a pipeline manually from the Azure DevOps portal?
Answer: "Run pipeline" button in the Azure DevOps portal.





638
Azure DevOps Pipelines
What is the purpose of the trigger: none keyword in an Azure DevOps YAML pipeline?
Answer: It disables automatic triggers, meaning the pipeline will not run automatically on code changes. This is useful for manual execution or scheduled runs.





639
Azure DevOps Pipelines
What is a Deployment Pool in Azure DevOps?
Answer: A Deployment Pool is a set of environments where deployments occur. You can configure and target specific deployment pools for releases to ensure the proper deployment environment is used.





640
Azure DevOps Pipelines
What does the 'variables' keyword do in a YAML pipeline?
Answer: It declares the variables that can be used throughout the pipeline.





641
Azure DevOps Pipelines
Which YAML element in an Azure DevOps pipeline defines the steps or tasks to be executed?
Answer: steps